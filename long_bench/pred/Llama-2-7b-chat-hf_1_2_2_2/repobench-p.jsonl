{"pred": "   private final transient JKademliaRoutingTable routingTable;\n\n    private final transient JKademliaStorageEntry storageEntry;\n\n    private final transient JKademliaStorageEntry storageEntry2;\n\n    private final transient JKademliaStorage", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // Add the default effects for the demo\n        // Add the default effects for the demo\n        mEffects.add(new InterlaceEffect());\n        mEffects.add(new ContrastBrightnessAdjustmentEffect());\n        mEffects.add(new KernelSh", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\n    class Encryption1(Encryption):\n        input_widths = [8, 8]\n        output_widths = [8]\n\n        def eval(self, x, rk):\n            rk = self.key_schedule.eval(rk)\n", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "\n    public EffectManager(Activity activity) {\n        mActivity = activity;\n        mParameterListView = (ViewGroup) mActivity.findViewById(R.id.effect_parameters);\n        mParameterListView.setFocusable(true);\n        mParameterListView.setFocusableInTouchMode", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(UpdateFrequencyChangeCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    public void setTaskFactory(TaskFactory taskFactory) {\n        this.taskFactory = taskFactory;\n    }\n\n    public TaskFactory getTaskFactory() {\n        return taskFactory;\n    }\n\n", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tintegrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t} catch (AbortCheckException e) {\n\t\t\tthrow new UncheckedIOException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           SpinnerObservable.getInstance().removeBackgroundTask(this);\n            return true;\n        } catch (RestServiceException e) {\n            Log.e(AbstractYasmeActivity.TAG, \"Error while registering device at YASME server: \" + e.getMessage());\n            return", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignResponse signResponse = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);\n\n    assertEquals(SERVER_CHALLENGE_SIGN, signResponse.getSignatureData());\n}\n\n  @Test\n  public void", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "```\nself.uaA.recvEvent(event)\n```\nI'm not sure what the code is doing, but it seems to be trying to handle an RTP proxy session. However, there are several issues with the code:\n\n1. The `Rtp_proxy_session`", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.typeid = 0x01\n\nclass FlagList(IntEnum):\nclass ByteFlag(IntEnum):\nclass Boolean(IntEnum):\nclass", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               //activity.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)));\n                //end of code\n\n                //TODO: handle error\n                //TODO: handle playback\n            }\n        }\n    }\n\n    private static boolean use", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       // Create a new instance of Retrofit.\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(BaseUrls.FORKME_API_URL)\n                .build();\n\n        // Create a new instance of API service.\n        F", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       net = InterLayerPipeline(InputLayer, FCLayer, PoolingLayer, FCLayer, PoolingLayer, FCLayer, InterLayerPipeline)\n\n        assert isinstance(net, Network)\n        assert isinstance(net.net, InterLayerPipeline)\n\n", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        id = Column(Integer)\n        name = Column(String)\n\n    engine.bind()\n    obj = User(id=", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   def evaluate(self, context: Optional[XPathContext] = None) -> Any:\n        return self\n\n    def select(self, context: Optional[XPathContext] = None) -> Iterator[Any]:\n        yield from self.evaluate(context)\n\n    def", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HueTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new PosterizeTransformation(),\n                    new RescaleTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    private Movie movie;\n    private MovieDetails movieDetails;\n    private MovieDetailsView movieDetailsView;\n    private MovieInfoView movieInfoView;\n    private MovieTrailers trailers;\n    private MovieTrailersAdapter trailersAdapter;\n    private SimilarMoviesAdapter similarM", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "\n                handleEvent(new Event() {\n                    @Override\n                    public void run() throws IOException {\n                        handleCreateMBean(instance);\n                    }\n                });\n            } catch (InstanceAlreadyExistsException e) {\n                throw new IOException(e);\n           ", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild_report.add_reaction('üëç')\n        await wild_report.add_reaction('üö´')\n\n\n    @classmethod\n    async def city(cls, bot, guild_id):\n        guild_dict = await Gu", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   if c['vocab_def']:\n        vocab_def = Vocabulary(c['vocab_def'])\n    else:\n        vocab_def = None\n    # Load dictionary\n    dictionary = load_vocab_def(c['v", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, TCXOSine)\n\n\ndef test_params_doppler_poly():\n  '''\n  Poly doppler parameters test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "\n            }else{\n                Toast.makeText(getActivity(), \"Raffle failed\", Toast.LENGTH_SHORT).show();\n            }\n            loadParticipant();\n        }else{\n            Toast.makeText(getActivity(), \"No participant\", Toast.LENGTH_SHORT", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       return ConeSettings(self, \"threed_cone_settings\")\n\n    def get_tag(self, tag_type):\n        \"\"\"Get a :py:class:`~pyfmodex.tag.TAG`.\n\n        :param int tag_type: Tag type", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    def __init__(self):\n        super(CompressedData, self).__init__()\n        self.calg = 0\n        self.data = b''\n\n    def __len__(self):\n        return len(self.data)\n\n    def __repr", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   size = findCellSize(img2, centers, maxLabel = imgmax.max(), verbose = verbose, out = out, **parameter);\n    \n    # intensity and size measurement\n    findCellIntensityParameter = getParameter(detectSpotsParameter, \"findCellIntens", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           music.play(Song.PERFECT);\n        } else if (accuracy == Accuracy.GREAT) {\n            music.play(Song.GREAT);\n        } else if (accuracy == Accuracy.NICE) {\n           ", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           printer.printOperation(\"Operation: \" + transactionIterator.next());\n            print.append(\"Operation: \\t\" + transactionIterator.next() + lineSeparator());\n        }\r\n    }\r\n\n    private static void exit(int status) {\r\n        System.exit(status);\n", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               //stmnt.setDataMeta(stmnt.dataMeta.getDataMeta());\n                //stmnt.setDataMeta(stmnt.dataMeta.getDataMeta());\n                //stmnt.setDataMeta(stmnt.dataMeta.getDataMeta", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "```\n    def decrypt(self, message: FinTSMessage):\n        raise NotImplemented()\n\nclass PinTanDummyAuthenticationMechanism(AuthenticationMechanism):\n    def __init__(self, security_method_version=1):\n        super().init()\n", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.regs[i].regType == REG_CALLTARGET) {\n                                // r = 0 ???\n                                // r < 0 -< err, FOUND_CALLED_NODE = 1\n                                // r !=", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "```\nfrom django.urls import path\nfrom django.conf import settings\nfrom django.urls import path\nfrom . import views\n\napp_job_urls = [...],\napp_pipeline_urls = [...],\napp_setting_urls = [...],\najax_urls =", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;\n\t\t\tthis.", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self._storage_type = storage_type\n        return self\n\n    def get_db_name(self):\n        return self._db_name\n\n    def get_storage_type(self):\n        return self._storage_type\n\n    def close(self):\n       ", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public <$SystemUnderTest> void prepare() {\n        preparation.prepare();\n    }\n\n    public static class ThenStepFactory {\n\n        public static <$SystemUnderTest> void prepare(Function<($SystemUnderTest) -> Void> prepare) {\n            prepare(prepare", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        // Wait for the process to complete.\n        CommandResult result = process.await();\n        // Check if the process exited with a successful exit code.\n        if (result.exitCode() != 0 && !expectedExitCodes.isEmpty()) {\n          throw new", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tAbstractEvent event = AbstractEvent.fromMessage(xml);\n\t\tif (event != null) {\n\t\t\thandleMessage(event);\n\t\t}\n\t\treturn \"ok\";\n\t}\n\n\tvoid handleMessage(AbstractEvent event) {\n\t\tif (", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if os.path.exists(os.path.join(file_path, 'info_dynamic_analysis')):\n        print \"Already ran\"\n        return\n    # ...\n\ndef get_manifest(file_path):\n    # ...\n\ndef download_logs(file", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx):\n        \"\"\"\n        **!raid-city** - displays the current city of the raid party\n\n        \"\"\"\n\n    async def check_city(self, ctx):", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime.strptime(\"2015-11-25 00:00:00\"))\n        self.assertEqual(date_string_to_", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor = ConfigActor(config_file)\n        config_actor.start()\n        gevent.sleep(1)\n\n        if honeypot_first:\n            # send honeypot message first\n            honeypot_session = Honeypot", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.sharePicture(mActivity, picture.getPics()[0], picture.getComment_author() + \"Ôºö\" + picture.getComment_content());\n                            break;\n                        case 1:\n                            //ÂàÜ‰∫´Âà∞ÂæÆÂçö\n                ", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "```\n\t\t\t\t\t\timage_array = np.column_stack((image_array[0],negative_data)))\n\t\t\t\t\t\toutdata = np.column_stack((outdata,-np.log10(1-positive_data)))\n\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               InstallSurveyDependencies.class,\n                InstallSurveyDependenciesFragment.class,\n                SurveyActivity.class,\n                SurveyPromptLoader.class,\n                ResponseSyncAdapter.class,\n                ResponseFiles.class,\n                ResponseSyncAdapter.class,\n                ResponseSyncAdapter", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "\n    def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n        self.sigtype = self.int_to_sigtype(self.packet.int_at_end())\n        self.pubalg = self.int_to", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   def __eq__(self, other: Any):\n        return isinstance(other, self.__class__) and \\\n            self.xsd_types == other.xsd_types and \\\n            self.xsd_types_or_self == other.xsd_types_or_self\n\n", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Gauge\n    }\n\n  def __init__(self, sink_cls, role=None, **defaults):\n    super(HeapBalancerSink, self).__init__(sink_cls, role, **defaults)\n    self.", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol(OK, protocol)\n\n    def test_send_message_with_string(self):\n        \"\"\"\n        Ensures that the raw string form of the message is correctly turned\n        into a valid netstring.\n        \"\"\"\n        n", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       StatementExecution qe_stmt = (StatementExecution) qe;\n        assertEquals(1, qe_stmt.getBatchExecutionEntries().size());\n        assertEquals(1, qe_stmt.getPreparedBatchEntries().size());\n        assertEquals(1", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "\n        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testStatementCount() {\n        ProxyTestDataSource ds = new Proxy", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "\n        # Schedule the next ADR cycle\n        yield self.adr_task.send(self.adr_task.interval(self.config.adrdelay))\n        self.adr_task.send(self.adr_task.delay(self.config.adrmessagecycle", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "def IEEE802154_format(data):\n    # format: (type, len, data)\n    # type: (Beacon, Data, Ack, MAC command, Visibility)\n    # len: (16, 64)\n    # data:", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       super.onResume();\n        // Update UI\n        updateUI();\n    }\n\n    private void updateUI() {\n        // Update UI\n        // Update UI\n        // Update UI\n        // Update UI\n        // Update UI\n        // Update UI\n        // Update UI", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(HIT", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "\n            mPublicRoomsListList = new ArrayList<List<PublicRoom>>();\n            // Load public rooms from the database\n            // ...\n            // ...\n            // ...\n            // Update the list\n            // ...\n            // ...\n            // ...\n            // Update the adapter", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(raw_bp_graphs[ID_SMALLEST],\n                                      target_sequences, naming_ref)\n\n    #running synteny backend to close assembly gaps\n    #and to get synteny blocks", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   startMiPush();\n                }\n                break;\n            default:\n                Log.e(MYTAG, \"‰∏çÊîØÊåÅÁöÑÊé®ÈÄÅÁ±ªÂûã\");\n                break;\n        }\n    }\n\n    private boolean shouldInit() {\n        // Â¶ÇÊûú", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>(\n                QUERY_NAMES);\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ R", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "\n    public PersonalVulnsWindow() {\n        initComponents();\n        setTitle(\"Personal Vulns\");\n        setDefaultCloseOperation(javax.swing.WindowCloseOperation.HIDE);\n        setResizable(false);\n        // setLocationRelativeTo(this);\n       ", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "\n    public void addGCTraceSetListener(GCTraceSetListener listener) {\n        gcTraceSet.addGCTraceSetListener(listener);\n    }\n\n    public void removeGCTraceSetListener(GCTraceSetListener listener) {\n        gcTraceSet.removeGC", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       handlePacket(packet, client, transport);\n    }\n\n    private void handlePacket(Packet packet, NamespaceClient client, Transport transport) {\n        if (packet.getType() == PacketType.MESSAGE) {\n            handleMessage(packet", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       VideoTrack videoTrack = lMS.getVideoTracks()[0];\n        videoTrack.addRenderer(new VideoRenderer(this, this));\n      }\n    }\n  }\n\n  private void logAndToast(String message) {\n    Log.d(TAG,", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "\n        }\n    }\n\n    private static class JobRequest {\n\n        public static final String COLUMN_ID = \"id\";\n        public static final String COLUMN_TAG = \"tag\";\n        public static final String COLUMN_LAST_RUN = \"lastRun\";\n", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Set the toolbar to the activity\n        setSupportActionBar(toolbar);\n        // Set the layout for the activity\n        setContentView(R.layout.settings);\n        //", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "```\n    def determine_executable(self, desktop_file):\n        # ...\n```\n\n\nclass DesktopSupport(DesktopCommand):\n    def __init__(self, config):\n        super().__init__(config)\n        self.theme_support = ThemeSupport(config", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "\n    Iterable<Board> its = SMTHService.getInstance().wService.getBoardsFromWWW();\n    List<Board> results = MakeList.makeList(its);\n\n    SaveBoardListToCache(results, null, null);\n\n    return results;\n", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       super.onResume();\n        super.onResume();\n        super.onResume();\n        super.onResume();\n        super.onResume();\n        super.onResume();\n        super.onResume();\n        super.onResume();\n", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\tTestClassGenerator generator = new TestClassGenerator(model, testDataFactories, monitor, annoGenerated, writeTML);\n\tTestClassGenerator generator = new TestClassGenerator(model, testDataFactories, monitor, annoGenerated, writeTML);\n\t// Generate test class\n\t", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       client = SimulatorDataClient()\n        client.add_simulator_data_listener(self.test_received_simulator_data_datagram)\n        client.start()\n        # Send simulator data\n        simulator_data = fdm_data.SimulatorData", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           showResponse = true;\n            // show response\n            // and request\n            // and highlight\n            // and update\n            // and invalidate\n            // and update UI\n            // and update\n            // and update\n            // and update\n            // and update\n            // and update\n", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\ndef test_simple_status_with_gsi(model):\n    \"\"\"Table is ACTIVE, GSI is ACTIVE\"\"\"\n    description = {\n        \"TableStatus\": \"ACTIVE\",\n", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "\n    def load(self, filething, known_frames=None, translate=True, v2_version=4,\n             load_v1=True):\n        \"\"\"Load ID3v2 tags from a file thing or file object.\"\"\"\n\n        fileobj = filething.file", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitProxOp(new VisitOrd3(n), query);\n\n      return null;\n    }\r\n    visitProxOp(new VisitOrd3(n), query);\n\n    return null;\n  }\r\n\n  public void visitCheckForBoolean(VisitCheck", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EdgeTransformation(),\n                    new EmbossTransformation(),\n                    new EmbossTransformation().setAmount(1.5f),\n                    new EmbossTransformation().setAmount(2f),\n                    new EmbossTransformation().setAmount(2.5f", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\nself.prepare( )\n\n=============================================\n\nI have tried to format the code as much as possible, but it's not easy to read, as it's a lot of code.\n\nI think the issue is related to the `get_serializer( )` method", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   if not elexon_b1420(args):\n        return None\n    if not elexon_b1610(args):\n        return None\n    if not elexon_b1630(args):\n        return None\n    if not e", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum( (GalleryItemProxy) proxy ); }\n\t\t\telse { // not an album\n\t\t\t\titem = new GalleryImage( (GalleryItemProxy) proxy );\n\t\t\t}\n\t\t\titems.add( item );", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(engine, user) == user_key\n\n\ndef test_index_for(engine):\n    class Person:\n        def __init__(self, name):\n            self.name = name\n\n    people = [\n        Person(\"one\"),\n        Person(\"", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new ProgressBar(2, '|', ' '),\n        new Status(' ', ' '),\n        new Fraction(1, 100),\n        new Percentage(100),\n        new TaskName('My Task'),\n        new Spinner('_'),\n", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static <T> T tag(String tagName, Object content) {\n\t}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           event = Event(e, self)\n            events.append(event)\n\n        return events\n\n    def create_event(self, name, description):\n        params = {\"name\": name, \"description\": description}\n        data = self.call_api(\"events\", type=\"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // ParameterHolderAssertions\n    /////////////////////////////////////////////////////////////////////////////\n\n   ", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           Wallpaper wallpaper = Preferences.get(this).getWallpaper();\n            WallpaperDownloader.prepare(this).wallpaper(wallpaper).start();\n        }\n    }\n\n    public void loadWallpaper() {\r\n        WallpaperDownloader.prepare(this", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final int MAX_DEPTH = 5000; // arbitrary limit on depth of parse tree; adjust as needed\n  private static final int MAX_TOKEN_DEPTH = 100; // arbitrary limit on depth of parse tree; adjust as needed\n ", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # If the beginning time is not in the file name, try to guess the beginning time\n        if self.beginning_datetime is None:\n            self.beginning_datetime = getMiddleTime", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p.set_zscale(0.89)\n\nperi/viz/interact/ortho_manipulator.py\nclass OrthoManipulator(object):\n    def __init__(self, state, size=8, cmap_abs='bone', c", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodModifier.setInStone();\n\t}\n}\n\nPlease complete the code given above.\n\nNote: The code is quite large, so I have only provided the relevant parts of the code. Please ensure that you have completed all the necessary parts of the code before testing.", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comments = Comment.objects.filter(post=post)\n        comments = sorted(comments, key=attrgetter('created'), reverse=True)\n        comments = paginate_posts(post, comments, request)\n        context = {'post': post, 'comments': comments, 'username", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tselectedCells = selectedCells.iterator().next();\n\t\t\t\t\t\t// Update the selection in the editor\n\t\t\t\t\t\tsetSelection(selectedCells);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def parse(self, packet):\n        super(RevocationKey, self).parse(packet)\n        self.keyclass = packet[0]\n        del packet[0]\n\nclass NotationData(NotationDataFlags):\n    \"\"\"\n    5.2.3", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "   if is_processing_instruction_node(item):\n        yield item\n\ndef is_processing_instruction_node(item):\n    return hasattr(item, 'tag') and callable(item.tag) and item.tag.__name__ == 'ProcessingInstruction'", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   client.send('pw', client['id'], puffle.id, puffle.type, puffle.sub_type, puffle.walking, 100, 100, 100, 100, 100,", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   image = GlobalScalar(name='image', value=P + H + I)\n    image.set_tile_full()\n    image.set_mem_level('hi')\n    image.set_pos(pos)\n    image.set_rad(rad)\n   ", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           manager = mp.Manager()\n                error_dict = manager.dict()\n                return_queue = manager.Queue()\n                stopped = Stopped()\n                procs = []\n                for i, job in enumerate(jobs):\n                    function = CompileInformationFunction(job)", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar, good = checkFitGoodness(config, platepar, catalog_stars, star_dict, min_radius, verbose=True)\n\n    # If the fit is not good enough, try to refine the platepar with FFT phase correlation and redo the ACF", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 100_000L);\n        contentValues.put(JobStorage.COLUMN_REQUIRES_BATTERY_NOT_LOW);\n        contentValues.put(JobStorage.COL", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       super.onResume();\n        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();\n        Fragment fragment = fragmentManager.findFragmentById(R.id.chat_settings_remove);\n        if (fragment != null) {\n            if (mDelAdapter != null) {", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area']\n\n\nclass AreaType(models.Model):\n    name = models.CharField(max_length=255)\n    code = models.CharField(max_length=255, blank=True", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           GoogleAnalyticsSender.getInstance(getContext()).send(\"on_data\");\n        }\n    }\n\n    @ViewById\n    protected Activity getContext();\n\n    @Bean\n    protected Presenter presenter;\n\n    @Pref\n    protected Preferences_ prefs;\n", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n            @Override\n            protected void onSuccess(final Channel channel, final Void value) throws Exception {\n                context.setConnectionState(new ConnectedConnectionState(channel, false));\n            }\n        });\n\n        return deferred.get();\n    }\n\n    @Override", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegisterFragment().onRegisterSuccess(name, email, password));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "\n    private final SpatialOperator spatial;\n\n    private final int k;\n\n    private final int t;\n\n    private final int tau;\n\n    private final int tau_old;\n\n    private final int tau_new;\n\n    private final int[][]", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private List<String> list = new ArrayList<>();\n\n    public DropMenuAdapter(Context context) {\n        mContext = context;\n        onFilterDoneListener = new OnFilterDoneListener() {\n            @Override\n            public void onFilterDone(int position, String positionTitle, String", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " assert isinstance(args.message, ZeroOneMessage)\n\n\ndef test_parameters_msgtype1():\n  '''\n  CNAV message type test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "   def read_xml_svg(self, path):\n        self.read_xml_svg_element(path, None, self.config)\n        self.outlines = path_builder.path\n        self.triangles = path_builder.polygon\n        self.outline_", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\tif (data.equals(\"\")) {\n\t\t\t\t\tneedSave = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tBaseData app = new BaseData(data);\n\t\t\t\tif (needSave) {\n", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "\n                if (isOpsNeed2Add) {\n                    // do something\n                    // ...\n                }\n\n                if (isPlayNeed2Add) {\n                    // do something\n                    // ...\n                }\n\n                if (isXPrivacy", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.duration = np.abs(self.beg_vect - self.end_vect)\n\n        # Compute the great circle distance\n        self.distance = np.sqrt(np.sum((self.cartesian_points - self.beg_vect)**2))", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\t\tMMethod m = new MMethod(new FunctionSymbol(tool, fhead.ID().getText()));\n\t\t\tm.name = f.name;\n\t\t\tm.args = new ArrayList<MArg>(f.args.size());\n\t\t\tfor (MArg", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "\n    // Adds a new visitor method for each visitor class that needs it.\n    void add(NodeAdditionVisitor visitor);\n\n    // Adds a new visitor method for each visitor class that needs it.\n    void visit(NodeNavigationVisitor visitor);\n\n    // Adds", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    @Override\n    public void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        typeUtils = processingEnvironment.getTypeUtils();\n        elementUtils = processingEnvironment.getElementUtils();\n        messager = processingEnvironment.getMessager();\n\n       ", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritRestModule.class).asEagerSingleton();\n        bind(GerritRestApi.class).toProvider(new GerritApiProvider());\n        bind(GerritHttpAuthDataProvider.class).asEagerSingleton();\n        bind(Ger", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (parseLong(zxid.substring(2), 16) == i + 1) {\n                        snapFile = snapshots.get(i);\n                        break;\n                    } else {\n                        i--;\n                        if (i <", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "           entries = [e for e in entries if query(e.name, e.memo, e.description)]\n        if filter_type == FilterType.ByType:\n            entries = [e for e in entries if e.type == filter_type]\n        return entries\n\n   ", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "\n# *--------------------------------------------------------\n# * File Name : formats/JPEG.py\n# * Created : 2012-04-16\n# * Authors : Benoit Michau \n# *--------------------------------------------------------\n#\n# * This file contains the", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(View.GONE);\n\t\t\t\t\t\tsearchList.set", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   image = np.zeros((100, 100), dtype='float32')\n    for i in range(100):\n        x = np.random.randint(0, 100)\n        y = np.random.randint(0", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "```\n    return Column(np.logical_and(left.values, right.values), left.index)\n```\nThe rest of the code is the same as the previous one, but with the `and` function instead of the `gt` function.\n\nI think the issue is that", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);Next line of code:\n                    Icon icon = RequestListener.getIcon(mContext.get(), request);Next line of code:\n                    stringBuilder.append(RequestListener.getRequestBody(mContext.", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "           instance, (int, float, Decimal, AbstractDateTime, Duration)\n        )\n\n    def __subclasshook__(cls, subclass: type) -> bool:\n        return issubclass(subclass, (int, float, Decimal, AbstractDateTime, Duration))\n\n", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "\n        return rvalue\n\n\n    def getByPath(self, path):\n        \"\"\"\n        get an object by a path\n\n        Arguments\n        - path  :  a path of an object\n\n        Return  :  an object\n        \"\"\"\n        path = path.", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = SerializerClass = serializers.ModelSerializer(\n        Plan, fields=['id', 'code', 'name', 'target', 'sectors', 'sectors_ids', 'goal', 'sectors_ids', 'target', 'goal', 'sectors', '", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "\n    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private StarTask starTask;\n    private List<StarItem> starList = new ArrayList<StarItem>();\n\n    private CommitService commitService;", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tFile input = new File(\"src/main/java/fr/insee/eno/main/DDI2FOGenerator.java\");\n\t\tFile output = ddi2fo.generate(input, new byte[0], \"survey\".getClass());\n\t\tFile[] match", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Save the user to the device\n                        // ...\n                        // ...\n                        // ...\n                        // ...\n                        // ...\n                        // ...\n                        // ...\n                        // ...\n                        // ...\n                        // ...\n                        // ...", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "```\n    url(r'^$', PackageListView.as_view(), name=\"package-list\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(r'^view", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n\n\ndef test_GPSL1TwoBitsEncoder_init():\n  '''\n  Test construction of GPS L1 two band single bit encoder\n  '''\nNext line of code:\n", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tg_helper._tgToTiers(tg_helper.Textgrid(tgAsDict))\n\n\ndef run_read(fn):\n    with open(fn, \"r\") as fd:\n        return textgrid_io.readTextgrid(fn,", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                       pbar.set_description(f\"Segmentation: {len(arguments)}/{self.num_utterances}\")\n                        try:\n                            try:\n                                p = tqdm.tqdm(\n                                    function.run(\n                                        self", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "\n    def _check_dataset(self, dataset):\n        pass\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void addTag(FixTag tag);\n    void removeTag(FixTag tag);\n    void clear();\n    Set<FixTag> getTags();\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self.load(group=group, name=name, chunk_key=chunk_idx)\n\n    def load(self, group=None, name=None, chunk_key=None):\n        # Load the data for the given chunk.\n        # Load the data for the given", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\t\tcase AlvisIRAndQueryNode.Operator.AND:\n\t\t\tcase AlvisIRAndQueryNode.Operator.BUT:\n\t\t\tcase AlvisIRTermListQueryNode.Operator.AND:\n\t\t\tcase AlvisIRTermListQueryNode.Operator.", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\t\n\tpublic ParameterizedGenerationService(File folder) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = new ValorizatorParametersImpl();\n\t\tthis.valorizatorParameters.setFolder(folder", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (UNREGISTER_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (GET_OBJECT_INSTANCE ^ RESPONSE_MASK),", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       viewManager.printToConsole();\n                        logDb.addTweet(tweet.getText());\n                        logDb.addTweetID(tweet.getId());\n                        logDb.addTweetUrl(tweet.getUser().getScreenName() + \"/", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       return lines\n\n    def render(self, obj):\n        if isinstance(obj, BufrMessage):\n            return self._render_bufr_message(obj)\n        elif isinstance(obj, TemplateData):\n            return self._render_template_data(obj)", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "```\n    def _get_return_code(self, return_code_list):\n        error_return_code = None\n\n        for return_code in return_code_list:\n            if return_code == 0:\n                return return_code\n\n        error_return", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       return Contact.objects.filter(phone_number=self.phone_number).first()\n\nTraceback:\nFile \"C:\\Python2.7\\lib\\site-packages\\django\\core\\handlers\\base.py\" in get_response\nFile \"C:\\Python2.", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   PCollection<GCPResource> liveResources =\n        pipeline.apply(\"Read live resources\", ParDo.apply(new GCPResourceState.createResourceState(org)));\n\n    // Convert live resources to GCPResourceState objects.\n    PCollection<GCPResourceState> liveState", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       self.similar_path = \"/files.inc\"\n\n    def test_get_tail_pattern(Next line of code:\n        generator = SimilarPathGenerator()\n        tail_pattern = generator.get_tail_pattern(self.similar_path)\n        self.assertEqual(", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(condition_for(operation, column))\n    return [condition_for(operation, column) for condition in conditions]\n\n\ndef condition_for_value(value):\n    return Condition(value)\n\n\ndef condition_for_range(value):\n   ", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(row=0, col=0) == 0\n        assert get_square_idx(row=0, col=1) == 1\n        assert get_square_idx(row=0, col=2) == 2\n        assert get_", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\n    private final Testprio selectedTestprio = Testprio.DEFAULT;\n\n    private final GroupMethodSelectionCtrl group;\n\n    private final Button button;\n\n    private final Text text;\n\n    private final Button buttonOK;\n\n    private final SelectionDialog dialog;\n", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\nclass Scales(object):\n  def __init__(self):\n    self.scales = {}\n\n  def add_scale(self, scale):\n    self.scales[scale.name] = scale\n\n  def get_scale(self, name):\n    return", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate static final int MIN_SPACING = 10;\n\tprivate static final int MAX_SPACING = 100;\n\tprivate static final int MIN_SPACING_BETWEEN_WORDS = 5;\n\tprivate static final int MAX", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     var exitCode = javadoc.execute(cmdLine);\n      return exitCode;\n    });\n    return exitCode;\n  }\n  \n  private static boolean isLinkHostOnline(Log log, String host) {\n    try {\n      URL url = new URL(\"", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.enviar", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new AnswerCallWithSpeakerAction(this), AnswerCallWithSpeakerAction.ANSWER_CALL_SPEAKER_ACTION_ID);\n        registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_S", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   try:\n      result = self.commands[name](self, gopts, argv, git_trace2_event_log)\n    except (RepoClientError, RepoChangedException) as e:\n      result = 1\n      print(e, file=sys.st", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Provides @Singleton\n    PersistentData providePersistentData(App app) {\n        return new PersistentData(app);\n    }\n\n    @Provides @Singleton\n    Ion provideIon(Application app) {\n        return Ion.get", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(3));\n\n        // when (and why) assertions fail\n        // 1. when queryExecutions is empty\n        // 2. when queryExecutions is not a List\n        // 3. when queryExecutions contains no", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    public static void main( String[] args )\n    }\n\n    private static void initialize()\n    {\n        if ( initialized )\n        {\n            return;\n        }\n\n        // Initialize the SVN client", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       VerifierProperty validSchemaNameVerifier = new ValidSchemaNameVerifierImpl();\n        VerifierProperty localFilesExistVerifier = new LocalFilesExistVerifierImpl();\n        VerifierProperty remoteFileExistVerifier = new RemoteFileExistVerifierImpl();\n\n       ", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    private boolean yasmeDeviceCheck() {\n        // Check if device exists in Database\n        // Check if device exists in Database\n        // Check if device exists in Database\n        // Check if device exists in Database\n        // Check", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "\n    public void login(String username, String password) throws DrupalLoginException, DrupalFetchException;\n\n    public void logout() throws DrupalLogoutException;\n\n    public void save() throws DrupalSaveException;\n\n    public void fetch() throws DrupalFetchException;", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       quirks.plainList().append(text)\n        self.chum = None\n        self.chumopen = False\n        self.history = None\n        self.textInput.clear()\n        self.textInput.focusInEvent(None)\n        self.textInput.", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRNearQueryNode nearQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getNearQueryNodeExplanations(nearQueryNode);\n\t\t\treturn expandAtom(explanations);\n", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Invalid selection criterion: \" + criterion);\n        }\n\n        return new SelectionChunk(informationCriterion);\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_typ)\ndef pi(ty, e)\n    \"\"\"Turn a simply typed term into a Pi.\n    \n    Arguments:\n    - `ty': a type", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(KioskSettingsFragment kioskSettingsFragment);\n    void inject(KioskModeHandler kioskModeHandler);\n    void inject(PlaybackSettingsFragment playbackSettingsFragment);\n    void inject(PlaybackService playbackService);\n    void inject(Analytics", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "\n    public static ChartCategoryFragment newInstance(int id) {\n        ChartCategoryFragment fragment = new ChartCategoryFragment();\n        Bundle args = new Bundle();\n        args.putInt(PrefKeys.CREDIT_CARD_ID, id);\n        args.putBoolean(P", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   with pytest.raises(ResponseValidationError):\n        validate_response(Mock(response=Mock(body=b'{\"foo\": \"bar\"}'))):\n\n\ndef test_response_content_type_missing_raises_400():\nNext line of code:\n", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void execute(String[] args) {\n\t}\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "\n    def worker_function(self, file: File) -> None:\n        try:\n            # ...\n\n    def worker_function(self, file: File) -> None:\n        try:\n            # ...\n\n    def worker_function(self, file: File) ->", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n    for instrument in sensors:\n        _add_instrument_resources(api, instrument)\n\n    for pitot_tube in fdm.GetPitotTubes():\n        _add_pitot_tube_resource(api, pitot_tube)", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       gps.u = fdmexec.GetPropagate().GetUVW(1)\n        gps.v = fdmexec.GetPropagate().GetUVW(2)\n        gps.w = fdmexec.GetPropagate().GetUV", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "```\n    # ... (rest of the code)\n```", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t\n\t@RequestMapping(\"/manage\")\n\tpublic String manage() {\n\t\treturn \"manage\";\n\t\n\t}\n\t\n\t@RequestMapping(\"/manage/category\")\n\t@RequestMapping(\"/manage/category\")\n\tpublic String manageCategory() {\n\t", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(t);\n                        }else{\n                            logError(t);\n                        }\n                        logError(t);\n                        throw t;\n                    }\n                }\n            });\n        } catch (Throwable t) {\n            logError(", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "\n    def run_e2e_flow_for_language(self, language):\n        # Set up the person to be enrolled\n        person = Contact.objects.create(name=person_name,\n                                        phone_number=phone_number,\n                                        alt_", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected GingerbreadLocationUpdateRequester gingerbreadLocationUpdateRequester;\n  protected GingerbreadLocationUpdateRequester gingerbreadLocationUpdateRequester;\n", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   adb = connect(adb)\n    try:\n        #  Connect to VM/Device\n        adb = getADB(adb)\n        subprocess.call([adb, \"kill-server\"])\n        subprocess.call([adb, \"start-server\"])", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "   MSCm2.add_layer(Layer.L3(MCSm2, MSCm3, L3GSM_IE, L3GSM_IE_dict, \\\n                                    IANA_dict, GSM_RR_dict, CKSN_", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(exp.getOperator().name());\n      result.append(\" \");\n      acceptOrVisitValue(exp.getRhsValue());\n    } else {\n      result.append(\" \").append(exp.getOperator().name());\n      result.append(\" \");\n", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.createCacheList(listName);\n      }\n    }\n  }\n\n  private boolean hasValue(Optional<String> opt) {\n    return opt.isPresent();\n  }\n\n  @FXML\n  public void updateStatus(ActionEvent actionEvent", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "\n    def __init__(self, Pt=None, PtFunc=None, Val=None, \n                 BitLen=1, BitLenFunc=None, Dict=None, \n                 Repr=None, Trans=False, TransFunc=None):\n        if Pt", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.create(dataManager, timeSource, workTimeConfigBean)\n                )\n        );\n    }\n\n    @Subscribe\n    protected void onDateFromChange(DateField.DateChangeEvent event) {\n        dateTo.setValue", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "\n    def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = packet[0]\n        del packet[0]\n\n        self.pkalg = packet[0]\n        del packet[0]\n\n       ", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    def get_expansion_info(self):  # -> list[BoardInfo]\n        board_info_list = []\n\n        for board_type in ul.get_config(InfoType.EXPANSIONINFO, self._board_num,\n                                        0,", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "\n        for i in range(count):\n            key = f.read(2)\n            value = decode_utf16le(f.read(2))\n            self.objects[f.read(2).read(2)] = value\n\n        f.close()\n\n       ", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           invitation = create_inactive_user(site, user=site.get_user(email))\n            messages.success(request, _('Thank you for your request. '\n                                         'We will review your application '\n                                         'and be in touch soon.')\n", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       await Utilities.message(ctx.message.channel, f\"{pokemon.to_dict()}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is None:\n                pass  # '.' wildcard doesn'", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   helpTestQuery(10);\n  }\n  \n  public void helpTestQuery(int rows) {\n    DummySherpaServer server = new DummySherpaServer(rows);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\treturn result;\n\t\t\n\t}\n\t\n\t", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   //initMiPush();\n                    //Log.e(MYTAG, \"‰ΩøÁî®MiPushÊé®ÈÄÅ\");\n                }\n                break;\n        }\n\n        //Log.e(MYTAG, \"CurrentUserActivity init\");\n\n        //initMi", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n    }\n\n    @Override\n   ", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "           table = tabulate(rows, headers, tablefmt=tablefmt, floatfmt=\"g\", numalign=numalign, stralign=stralign, missingval=missingval)\n            output.append(table)\n        else:\n            table = tabulate(rows, headers, tablefmt", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "\n    @app.route('/api/wordnik/<word>')\n    @as_json\n    def word_nik_route(word):\n        return word_nik_api.lookup(word)\n\n    @app.route('/api/poster/<word>')\n", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate ImageView imageView;\n\tprivate ImageView imageView2;\n\tprivate ImageView imageView3;\n\tprivate ImageView imageView4;\n\tprivate ImageView imageView5;\n\tprivate ImageView imageView6;\n\tprivate ImageView imageView7;\n\tprivate", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsNotNone(handle)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=True, bInitialState=True)\n        self.assertIsNone(handle)\n\n    def test_create_", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root);\n        this.vms = new SpringVms(restTemplate, root);\n        this.deployments = new SpringDeploy", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   return parserHost.parse(roundEnv, annotation, currentAnnotatedElement.get(), originatingElements);\n                })\n                .collect(Collectors.toList());\n        List<SpecificationGenerator> specificationGenerators = new ArrayList<>();\n        List<CodeGenerator> codeGenerators", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    public void start() {\n        ExecutorService executor = Executors.newFixedThreadPool(crawlerConfig.getThreads());\n        executor.execute(new Runnable() {\n            @Override\n            public void run() {\n                startCrawling();\n            }", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           Next line of code:\n            actionPopupGroup.add(new AddKeyAction(mongoDocumentOperations));\n            actionPopupGroup.add(new AddValueAction(mongoDocumentOperations));\n            actionPopupGroup.add(new DeleteKeyAction(mongoDocumentOper", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton saveButton;\n    private GuiCheckbox enableButton;\n    private GuiText channelName;\n\n    public GuiSettingsChannel(ServerSettings settings, Channel channel) {\n        super(I18n.format(tabbyChatSettings.channelSettings));", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClear", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Composite composite = new Composite(form.getForm(), SWT.NONE);\n        form.getForm().setLayout(new GridLayout(1, 1));\n        GridData gd = new GridData(SWT.BORDER | SWT.FILL, SWT", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       type = Type(name=\"my_type\", category=\"my_category\")\n        self.assertEqual(\"my_my_type\", type.get_sample())\n\n    def test_type_get_comparable_values(self):\n        type = Type(name=\"my_", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent.class, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, SetStatusMessageEvent.class, this::queueEvent));\n        commandProcessor.", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n    sign_flickr_query(query)\n    # ...\n\\end{code", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tthrow new FCPPutFailedException(\"Can't insert message\", e);\n\t\t\t\t} catch(FCPPutFailedException e) {\n\t\t\t\t\tLogger.error(this, \"Caught FCPPutFailedException while inserting message\", e);\n", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       op, arg = condition_bytecode[0]\n        if op in opcode.HAVE_ARGUMENT:\n          arg_size = len(arg)\n          if arg_size > 0:\n            condition_bytecode.insert(1, (op, arg", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   private List<DailyExpense> dailyExpenses = new ArrayList<>();\n\n    //VARIABLES\n    private TextView tvActiveCreditCardName;\n    private TextView tvActiveCreditCardLimit;\n    private TextView tvActiveCreditCardBalance;\n    private TextView tvTotal", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "   from dashboard.models import *\n\nI'm getting an error that says:\n\nTraceback (most recent call last):\n\nFile \"/home/runner/Envs/django_project/bin/python\", line 8, in <module>\nfrom dashboard.models import *", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t} else if (type == TAB_MY_LISTS) {\n\t\t\tif (syncSubscription != null)\n\t\t\t\tsyncSubscription.unsubscribe();\n\t\t\tstatusText.setVisibility(View.GONE);\n\t\t\temptyText.set", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "\npingparsing/_parser.py\nclass WindowsPingParser(PingParser):\n    @property\n    def _parser_name(self) -> str:\n        return \"Windows\"\n\n    @property\n    def _icmp_reply_pattern(self) -> str:", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // Restore latest message from savedInstanceState or persist it if it doesn't exist in DB yet.\n            restoreLatestMessageFromSavedInstanceState(savedInstanceState);\n            // Load messages from DB and update UI.\n            loadMessagesFromDB();\n        } else {\n            // Load latest", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\t} catch (Exception e) {\n\t\t}\n\t}\n\n\tpublic void setProgressText(String text) {\n\t\tthis.progressText = text;\n\t}\n\n\tpublic void setProgressTitle(String title) {\n\t\tthis.progressTitle = title", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "\n        // query name\n        assertThat(qe, paramNames(paramIndexes(0, \"name\")));\n        assertThat(qe, paramNames(paramIndexes(1, \"age\")));\n\n        // param names\n        assertThat(qe, paramNames(", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     // fileInput.setName(getInputName());\n      fileInput.setName(getInputName());\n    }\n  }\n\n  private void sendRequest(String payload, RequestCallback callback) {\n    // Using a reusable builder makes IE fail\n    RequestBuilder reqBuilder =", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points_by_ids=original_assembly_points_by_ids)\n\n    # Merging assembly points\n    merged_assembly_points = merge_assembly_points(assembly_points_by_ids=original_assembly", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\n    ...\n\nI'\n\nI'll be grateful if you could help me with this.", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "           content=f\"{country_name} ({pytz.country_names[country_code}]})\")\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel_config_embed(ctx, config):\n\n        embed =", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (level.getInstalledTs() > 0) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\tgetString(R.string.installed_level),\n\t\t\t\t\t\t\t\tgetString(R.string", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private WeeklyCaptionProvider captionProvider;\n\n    private final CalendarState state;\n\n    private final CalendarServerRpc rpc;\n\n    private final KeyMapper<CalendarItem> itemKeyMapper;\n\n    private final CalendarItem<ITEM> selectedItem;\n\n   ", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       this.vms = new SpringVms(restTemplate, root);\n\n    }\n\n    @Override\n    public Info info() {\n        return this.info;\n    }\n\n    @Override\n    public Releases releases() {\n        return this.releases;\n", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(rsaVerifier);\n\n    VerifierProviders locators = new VerifierProviders();\n    locators.setVerifierProvider(SignatureAlgorithm.HMAC_HMAC_SHA256", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOn", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                   assertEquals(content.length, retrievedContent.length);\n                } catch (FilesNotFoundException e) {\n                    // Ignore\n                } catch (Exception e2) {\n                    e.printStackTrace();\n                    fail(e.getMessage());\n                }\n            }\n", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "\n            });\n        }\n    }\n\n    private void sendBroadCast(int action) {\n        Intent intent = new Intent(action);\n        LocalBroadcastManager.getInstance(itsContext).sendBroadcast(intent);\n        if (BuildConfig.DEBUG) {\n", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "\nYarrnSpinner\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       Intent intent = new Intent(mContext, HomeActivity.class);\n                        intent.putExtra(HomeActivity.EXTRA_HOME, mHomes.get(position));\n                        mContext.startActivity(intent);\n                        break;\n                }\r\n            }\r\n       ", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       converter = UrlConverter(\n            logger,\n            con,\n            symbol_replace_value=ctx.obj[Context.SYMBOL_REPLACE_VALUE],\n            add_pri_key_name=ctx.obj[Context.ADD_PRIMARY_KEY_NAME", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def _getPlaylistItem(self, item):\n        \"\"\" Return the playlist item for the given item. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item\n\n    def _getPlaylist", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       class NonTypeCheck(object):\n            def __getitem__(self, key):\n                if key == u\"a\":\n                    return u\"value\"\n                raise ValueError(u\"Not found\")\n\n        self.assertRaises(ValueError, _environment_to", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   try:\n      result = cmd.Run(gopts, argv)\n    except DownloadError as err:\n      print('repo: warning: git trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2 trace2", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               // Â∞Ü‰ªªÂä°ÁªìÊûúÈÄöÁü•Âà∞ÁõëÂê¨Âô®\n                runnerListenerList.forEach(TaskListener::onTaskSuccess);\n            } catch (Throwable e) {\n                // ÊçïÊçâÂºÇÂ∏∏\n                taskData.setState(", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       self.assertEqual(r.exception_class, RejectRequest)\n\n\n\n\nclass ContentSimhashSamplingTest(TestCase):\n\n    @async_test()\n    async def test_content_simhash_nothing(self):\n        c = ContentSimhashSampling", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //ÂàùÂßãÂåñÁî®Êà∑ÁöÑÂ≠¶ÁßëÂêç\n        initCourseData();\n    }\n\n    private void changCodeImage() {\n        //ÊõøÊç¢È™åËØÅÁ†ÅÂõæÁâá\n        ImageView ivCodes = (ImageView) findViewById(R.id.", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    def parse(self, line):\n        self.__parse_qdisc_direct_len(line)\n        self.__parse_qdisc_netem(line)\n        self.__parse_qdisc_filter(line)\n        self.__parse_qdisc_", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = [qual_classname(i) for i in inv]\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  * f0 -> <4th order operator> f1 -> BasicSearchType() f2 -> ( Ord4Search() )?\n   */\r\n  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n    occurs = rfOp", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t\tthis.cleaningFolder = true;\n\t\tthis.surveyName = \"surveyName\";\n\t}\n\n\tpublic void generatePipeline(String surveyName) {\n\t\tthis.surveyName =", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\n            //get data tree from zxid\n            DataState dataState = new DataState(new DataDirTransactionLogFileList(dataDir).getFirstTransactionLog(), new TreeSet(\r\n                    new Map<Long, Integer>()), getLastZxid());\n", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n    def is_peer_firewalled(self, peer):\n        \"Here to let a packet know if its peer is firewalled\"\n       # Wait til there's something in the queue\n        self.q_work.acquire()\n        if len(self.queue", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "\n        cursorById.close();\n\n        // Test the query with a more complex where clause\n        where.id(movieRowId);\n        where.idNot(movieRowId);\n        where.idGt(movieRowId);\n        where.idGt(movieRowId", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DocumentDialog(self, DevisModifications(self.inscrit, self.current_cotisation[0])).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        DocumentDialog(self, ContratModifications(self.inscrit, self.", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       element = ElementTree.Element('schema')\n        self.assertEqual(node_children(element), [])\n\n        element = ElementTree.Element('element')\n        self.assertEqual(node_children(element), [])\n\n        element = ElementTree.Element('element')", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.activity_mapview);\n\t\tlocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\n\t\tdataProvider = new DataProvider(this);\n\t\toverlays = new ArrayList<Overlay>();\n\t\t", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           self.switch_configuration.name + \"_enabled\".format(self.last_connection_id))\n\n    def get_netconf_protocol(self):\n        return \"netconf\"\n\n    def get_default_ports(self):\n        return [\n            Port(\"Fast", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\n  assert isinstance(config, NormalRateConfig)\n\n\ndef test_", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "\n    def analisar(self, retorno):\n        \"\"\"Constr√≥i uma :class:`RespostaSAT` a partir do retorno informado.\n\n        :param retorno: Retorno da fun√ß√£o ``an√°lise``.\n\n        :rtype: satc", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   calculate_dict['P'] = np.concerntrate(calculate_dict['P'], [1, 0, 0])\n    calculate_dict['T'] = np.concatenate([calculate_dict['T'], [0, 0, 0,", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   # ...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def __init__(self, *, corpus: Union[str, MontrealForcedAlignerCorpus]) -> None:\n        self.corpus = corpus\n        self.speakers = []\n        self.files = []\n        self.utterances = []\n        self.", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private CameraSource cameraSource;\n\n    private ExpenseManagerDAO expenseManagerDAO;\n\n    private ExpenseCategory expenseCategory;\n\n    private ExpenseType expenseType;\n\n    private Expense expense;\n\n    private ExpenseCategory selectedExpenseCategory", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static NetUtil getNetUtil() {\n\t\treturn NetUtil.instance;\n\t\t}\n\n\tpublic static ClasspathUtil getClasspathUtil() {\n\t", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       List<ServerConfiguration> serverConfigurations = new ArrayList<>();\n        try {\n            URL pluginSettingsUrl = GuiUtils.pluginSettingsUrl;\n            InputStream is = pluginSettingsUrl.openStream();\n            try {\n                try (InputStream is2 = FileUtils.readFile(", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = container.section(\"header\");\n\t\tFluent h1 = H1(\"Learn Vert.X UI\", \"Learn Vert.X UI\");\n\t\th1.txt(\"Learn Vert.X UI\");\n\t\th1.", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               Intent intent = new Intent();\n                intent.putExtra(IMAGE_OUTPUT,output);\n                setResult(RESULT_OK,intent);\n                finish();\n                overridePendingTransactions();\n                super.onClick(v);\n            }\n        });\n\n        capture", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\n    }\n\n    public void onViewCreated(View view) {\n        super.onViewCreated(view);\n        mFastScroller = (FastScroller) view.findViewById", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   condition = validate_search_projection(model, index, {\"projection\": {\"included\": [\"name\"]}, \"filter\": {\"name\": \"value\"}}})\n    assert condition is None\n\n\n@pytest.mark.parametrize(\"model, index\", all_per", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        // Do nothing\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName) {\n        // Do nothing", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "\nfloranet/web/rest/appinterface.py\nclass RestAppInterface(AppInterfaceResource):\n    \"\"\"RestAppInterface Resource class.\n    \n    Manages REST API GET and POST transactions for reading and creating\n    application interfaces.\n    \n    \"\"\"\n    def __init", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self.signalImported = QtCore.Signal(str)\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.signalImported = QtCore.Signal(str)\n        def __import_", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "```\n    parser.run_parser()\n```\nExpected output:\n```\ntcset eth0 --rate 10Mbps\n```\nExpected error message:\n```\n```\nExpected output:\n```\ntcset eth0 --rate 10Mbps\n", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final ILayout layout = new BorderLayout();\n\n    private ChatChannel channel;\n    private ChatChannel.ChannelStatus status;\n    private int hovered = 0;\n    private int lastHover = 0;\n    private int lastHoverTime = 0;", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        * @param event\n         *            The click event\n         */\n        void onDateClick(Date date, ContextMenuEvent event);\n     }\n\n    public VCalendar() {\n        setStyleName(PRIMARY_STYLE);\n        setWidth(\"100%\");", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self.set_db_type(db_type)\n        self.set_client_id(self._orient_socket.serialization_type)\n        self.set_user(self._orient_socket.user)\n        self.set_pass(self._orient_socket.", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onPing(client);\n            break;\n        }\n\n        case MESSAGE: {\n            client.getBaseClient().send(new Packet(PacketType.NOOP", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitService commitService;\n    private List<RepositoryCommit> commitList = new ArrayList<RepositoryCommit>();\n\n    private CommitTask commitTask;\n    private RepoContentTask content", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\treturn new LunaticXMLPipeline(preprocessors, pipeline.getLunaticXML(), postprocessors);\n\t}\n\t\n\tprivate Preprocessor[] setPreProcess", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<GCPProject, GCPResourceState>> readLiveResources =\n        pipeline.apply(\"Read live resources\", LiveProjectSource.create(org));\n    // Convert GCPProject to GCPResource.\n    PCollection<GCPResource> gcpResources =\n", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel()\n\n\n@pytest.mark.parametrize(\"model\", [MyModel, ComplexModel, User])\ndef test_model_init(model):\n    # ...\n\n\n@pytest.mark.parametrize(\"model\", [MyModel,", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        // Guarded by _lockObject.\n        _id = UUID.randomUUID().toString();\n        // Guarded by _lockObject.\n        _relayHost = \"", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private String videoPath;\n    private String videoTitle;\n    private String videoDescription;\n    private String videoThumbPath;\n    private String videoDurationStr;\n    private String videoFilePath;\n    private String videoFileType;\n    private String videoFileExtension;\n    private", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           self.object.save()\n        return self.render_to_response(self.get_template(request), form)\n\nclass CrearUser(UserBase, CreateView):\n    template_name = 'relevamiento/crear_user.html'\n    form_class", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static Fog convert(Fog fog) {\n        Fog convertedFog = new Fog();\n        convertedFog.setFogID(go.getId());\n        convertedFog.setName(go.getName());\n        convertedFog.setActive(go", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t}\n\t}\n}\n```\n\nI have no idea what the code is doing, but I can tell you that it seems to be related to the Loom format, which is a format for storing gene expression data. The code seems to be implementing a class that can read and manipulate Loom", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t// now, we can start the benching\n\t\t\t\t\trunBenchmark();\n\t\t\t\t\t// and update the view\n\t\t\t\t\tview.updateProgress();\n\t\t\t\t\t// and update the view\n\t\t\t\t\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   class Dashboard(TemplateView)(ManagersMixin):\n        pass\n\n\nclass Dashboard(TemplateView)(ManagersMixin):\n    pass\n\n\nclass JobsLogManager(ManagersMixin):\n    \"\"\"\n    Jobs Log Manager\n   ", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building the wrapper from the service discovery file: \"\n\t\t\t\t\t\t\t+ serviceDiscoveryInfo.getServiceDiscovery());\n\t\t\treturn activateLoginIfRequested(buildM", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planillas_modelo = PlanillaModelo.objects.all()\n        planilla_de_relevamiento = PlanillaDeRelevamiento.objects.filter(planilla_modelo=None)\n        return render(request, 'relevamiento/seleccionar_plan", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self.tree = root\n    else:\n      self.tree = Comparator(root.data[1], root.data[2])\n      self.tree.lhs = root.data[3]\n      self.tree.rhs = root.data[4]\n      self", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\n  public Tropo(Key... keys) {\n\n    super(keys);\n    setName(\"tropo\");\n   }\n\n  public Tropo() {\n\n    super();\n    setName(\"tropo\";\n\n  }\n\n  public AskAction ask", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [1023])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [123456", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n###\n# XPath 2.0/XQuery 1.0 functions\n@method(function('sqrt', label='math function', nargs=1,\n                 sequence_types=('xs:double?', 'xs:double?')))\ndef evaluate_", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.name == \"margins\":\n\t\t\t\treturn Qt.ItemIsSelectable | Qt.ItemIsEnabled\n\t\t\telif model_item.name == \"border\":\n\t\t\t\treturn Qt.ItemIsSelectable | Qt.ItemIs", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       response = Hydrator(version1, versions, []).hydrate_object(object_dto, object1)\n        response = Hydrator(version2, versions, []).hydrate_object(object_dto, object2)\n\n        self.", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         //buildRunnable(executorService, isAlive);\n          //buildRunnable(executorService, isAlive);\n          //buildRunnable(executorService, isAlive);\n          //buildRunnable(executorService, isAlive);\n          //buildR", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(SFO, GPSSatellite(1))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "containsString(\"_source.id\", equalTo(\"dab-record-1\"));\n containsString(\"_source.name\", equalTo(\"dab-record-1\"));\n containsString(\"_source.type\", equalTo(\"dab-record-1\"));\n containsString(\"_source.co", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "\n    def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = packet[0]\n        del packet[0]\n\n        self.fingerprint = self.parse_fingerprint()\n\n        self.", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter geojsonWriter = new GeoJSONWriter();\n\t\tGeoJSONWriter.setGeoJSONWriter(geojasonWriter);\n\n\t\t// Initialize", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                   } catch (SQLException e) {\n                        context.put(ContextKeys.EXIT_STATUS, SQL_ERROR);\n                        addContextMessage(context, true, e.getMessage());\n                        context.<List<Throwable>>get(ContextKeys.THROWABLES).", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new_user'),\n    url(r'^users/edit/(?P<user_id>[-\\w]+", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           updateAdapter();\n                            updateEmptyViews();\n                        }\n                        dialog.dismiss();\n                    }\n                });\n                dialogFragment.show(getActivity().getFragmentManager());\n            }\n            stack.addListener(this);\n            stack.addPlaySession", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   private DropDownMenu dropDownMenu;\n    private DropMenuAdapter dropMenuAdapter;\n    private List<String> menuList;\n    private List<String> menuUrl;\n    private List<String> menuTitle;\n    private List<String> menuType;\n    private List<", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n\nclass Block(QtGui.QGraphicsObject):\n\n    def __init__(self, parent=None):\n        QtGui.QGraphicsObject.__init__(self, parent)\n        self.setAcceptHover(True);\n        self.set", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\n        assert isinstance(f.find_preimage(d1, d2), Difference)\n        assert isinstance(f.find_preimage(d2, d3), Difference)\n        assert isinstance(f.find_preimage(d1, d3), D", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static class ConstantTransformer implements NodeTransformer {\n\t\t\tprivate final DiscriminativeOracle oracle;\n\t\t\tprivate final List<Maybe<Node>> multiConstantNodes;\n\t\t\tpublic ConstantTransformer(DiscriminativeOracle oracle, List<Maybe<", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\t// Add the listeners\n\t\tBukkit.getServer().getWorlds().stream().forEach(world -> {\n\t\t\tworld.getBlocks().stream().forEach(block -> {\n\t\t\t\tif (block.getType().equals(Material.AIR))", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       connection.sasl().processChallenge(new Challenge(doc.getName(), doc.getAttributeValue(\"\", \"type\")));\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        connection.sasl().processSuccess(new Success(doc.getName(),", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "\n    private SongListAdapter mAdapter;\n\n    private List<Song> mSongList;\n\n    private List<Playlist> mPlaylist;\n\n    private int mCurrentPage = 1;\n\n    private int mTotalPage = 1;\n\n    private", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           // Add listener to newly selected effect\n            effect.addListener(this);\n            mSelectedEffect = effect;\n            // Update parameter controls\n            updateParameterControls();\n        }\n        return true;\n    }\n\n    public void updateParameterControls() {\n        if(mParameter", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM_len', ReprName='ESM length', Pt=0, BitLen=4, Repr='hum')\n    ]\n\n#\n# define the ESM_dict for the ESM header\n#\nESM_dict = {\n    193", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           updateUI();\n        }\n    };\n\n    private ImageView mArtwork;\n    private TextView mName;\n    private TextView mArtist;\n\n    private ImageButton mMenuButton;\n\n    private PopupMenu mPopupMenu;\n\n    private Menu mPop", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\treturn UserManagement.addUser(getCurrentUserName(), request.getUser());\n\t\t\t\t ^\n\t\t\t\t // Add the user to the keyring\n\t\t\t\t // Add the user to the eligibility job list\n\t\t\t\t // Add the user to the", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n\n    @GET(\"shodan/host/{ip}\")\n    Observable<Host> hostByIp(@Path(Constants.IP) String ip);\n\n    @GET(\"shodan/host", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(Throwable throwable) {\n      // don't log the failure message\n      // instead, collect the failure message and the stack trace\n      // so that we can include it in the trial report\n      // (we don't want to include the failure message in the report", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   # bandwidth = erb.erg(freq, Hz=freq)\n    # bandwidth = erb.erg(freq, Hz=freq, n=10)\n    # bandwidth = erb.erg(freq, Hz=freq,", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset):\n    \"\"\"Read a single item from a sequence (a single dataset or a list of datasets)\"\"\"\n\n    # XXX: This function is not implemented yet\n", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor processor : commentProcessors) {\n      try {\n        ICommentProcessor impl = commentProcessorInterfaces.get(processor);\n        if (impl != null) {\n          // create a new instance of the processor\n          ICommentProcessor implProcessor = (ICommentProcessor", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected abstract YarrnAdapter<PatternShort> getAdapter();\n\n    protected abstract ListView getListView();\n\n    protected void loadData(int page) {\n        if (getActivity() == null) {\n            return;\n        }\n        loadingStarted();\n        AbstractRavel", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "\n    def __init__(self):\n        super(NotationData, self).__init__()\n        self.flags = []\n\n    def parse(self, packet):\n        super(NotationData, self).parse(packet)\n        self.flags = [self.parse", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.addNewMessage(serverMsg)\n\n    def addNewMessage(self, message):\n        self.history.add(message)\n        self.textInput.clear()\n        self.textArea.setPlainText(\"\")\n        self.textArea.setHtml(", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def check_arg(arg, type_, env):\n        arg = check(arg, env)\n        with env.errors.location(arg.location):\n            unify(arg.__type__, type_)\n        return arg\n\n    def check_type(type_):\n       ", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   feature_matrix = _build_feature_matrix(sample_condition_dicts, symbolic_coefficients)\n\n\ndef _get_sample_condition_dicts(dbf, phase_name, configuration, symmetry):\n    # Get the sample conditions for the given phase.\n", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerController controller, PlayerController adPlayerController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n    }\n\n    private void showVpaid(PlayerController playerController, PlayerController adPlayerController, Fsm", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 7 || type == 0) {\n            StepCounterSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 8 || type == ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SearchSuggestionResponse> getSearchSuggestions(@QueryMap Map<String, String> serviceIds,\n                                                        @Query(\"tag\") String tag,\n                                                        @Query(\"limit\") @IntRange(from = 1, to = 50)", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       stream = Stream(model, position)\n        yield from stream\n\n    def delete(self, *objs, condition=None):\n        \"\"\"Delete one or more objects.\n\n        :param objs: objects to delete.\n        :param condition: only delete objects that match this condition", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(confusion_matrix)\n\n        if parsed_args.plot:\n            self.plot_confusion_matrix(confusion_matrix, classes, normalize=normalize,\n                                       title", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\t@Autowired\n\tprivate ChallengeServices challengeServices;\n\t@Autowired\n\tprivate SubmissionServices submissionServices;\n\t@Autowired\n\tprivate CountryServices countryServices;\n\t@Autowired\n\tprivate CategoryServices categoryServices;\n\t\n\t@RequestMapping(\"/profile\")\n\t", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __init__(self, *args):\n        super(Vertex, self).__init__(*args)\n        self.in_ = None\n        self.out = None\n        self.inE = None\n        self.outE = None\n        self.inV = None\n", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "\n    def decoder(self) -> Decoder:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output at the previous time step as input, and outputs the predicted\n        output at the current time step.\n\n        Returns\n       ", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for engine in TRANSPLATFORM_ENGINES:\n        slugs = [engine_slug for engine_slug in TRANSIFEX_SLUGS if engine_slug.startswith(engine + ':')]\n        all_platform_slugs.append(", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableReferenceNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n       ", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t\t}\n\n\tpublic static H3 h3", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final NiceTable table = new NiceTable(out, alignment);\n        table.addRow(new Object[] { \"Method\", \"Result\" });\n        for (int i = 0; i < numberOfColumns; i++) {\n            table.addRow(new Object[] { \"Me", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     parent_loop = None\n      while visitor.edges:\n        edge = visitor.edges.pop()\n        edge.visit(self)\n        if edge.kind == ControlFlow.E_TRUE:\n          parent_loop = edge.target\n          break\n      return parent", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "```\n    def __le__(self, other: Union[str, 'AnyURI', UntypedAtomic]) -> bool:\n        if isinstance(other, (AnyURI, UntypedAtomic)):\n            return self.value <= other.value\n        return self.value", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   }\n                }\n            });\n        }\n\n        @Override\n        public void onMessageEvent(Event event, RoomState roomState) {\n            RoomActivity.this.runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tpublic void generate(InFormat inFormat, OutFormat outFormat) {\n\t\t// Step 1: In2Out Generator\n\t\tinFormat.setIn2Out(identityGenerator.generate());\n\t\t\n\t\t// Step 2: DDI2XFORMS", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveJour(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.jour_", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "\n    def compute_angular_momentum_jacobian_jacobian(self, p):\n        \"\"\"\n        Compute the jacobian matrix J(q) such that the angular momentum of the\n        robot at `P` is given by:\n\n        ..", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       displayPattern(queuedProjectResult.queuedProject.pattern);\n        displayYarnWeight();\n        displayYarnWeightDescription();\n        displayYarnWeightDescription();\n        displayNotes();\n    }\n\n    protected void displayPattern(final String pattern) {\n        if (", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "\n    }\n\n    private void initializeCurrencies() {\n        List<Currency> currencies = new ArrayList<>();\n        configManager.getConfig().getChildren().forEach(child -> {\n            if (Currency.class.isAssignableFrom(child.getClass())) {", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "   if np.any(np.isnan(np.array([error], dtype=np.float64))):  # must coerce sympy.core.numbers.Float to float64\n        return -np.inf\n\n    return error\n\n    def _fit(self", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(data=arg)\n    elif op == LOAD_VAR:\n      return Var(arg)\n    else:\n      raise ValueError(\"Unsupported opcode: %s\" % op)\n  else:\n    raise ValueError(\"Unsupported opcode", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\tprivate final FringeLayer fringeLayer;\n\n\tpublic ClientMaster(FringeLayer fringeLayer) {\n\t\tthis.fringeLayer = fringeLayer;\n\t\tthis.fringeLayer.begin();\n\t\tthis.fringeLayer.renderTill(this", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tview", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tLong reference() {\n\t\tSet<Long> set = new HashSet<>();\n\t\tAtomicLong aLong = new AtomicLong();\n\t\tjdbcTemplate.query(\"SELECT COUNT(*) FROM AUTHOR WHERE ID = (SELECT MIN(ID) FROM AUTHOR)\");\n", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic void execute(E exp, ForestReader in, ForestWriter out) {\n\t\t// ...\n\t}\n}\n\npublic class SQLQuery extends SQLTranslation {\n\n\t// ...\n}\n\npublic class SQLTranslation {\n\n\t// ...\n}\n\npublic class", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "   except Exception, e:\n        print \"Dynamic Analysis Error:\", e\n        print \"File:\", file_path\n        print \"File MD5:\", file_md5\n        print \"Error:\", traceback.format_exc()\n        print \"Stack Trace:\", traceback", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "\n    Genotype parseGenotype(InputStream inputStream);\n\n    */\n    Genotype parseGenotype(InputStream inputStream);\n\n    */\n    Genotype parseGenotype(InputStream inputStream);\n\n    */\n    Genotype parseGenotype(", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(Record, 'bar'),\n                Symbol.typed(Record, 'bar'),\n                Symbol.typed(TypeVar, 'bar'),\n            ]),\n            Symbol.typed(TypeVar, 'bar'),\n            Symbol.typed(TypeVar, '", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, queryTypes(is(select())));\n        assertThat(pe, queryTypes(is(insert()", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\t\tself.on_insert_sketch()\n\t\t\t\t\tself.on_insert_part_in_drawing()\n\t\t\t\t\tself.on_insert_dim_ann_in_drawing()\n\t\t\t\t\tself.on_", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                       case 401:\n                            return new NotFoundException(cause);\n                        default:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        mAdapter = new RestAdapter", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n\t\tregisterRenderer(IfToken.class, new DefaultIfTokenRenderer());\n\t\tregisterRenderer(SilentErrorHandler.class, new DefaultSil", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizedFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig search, Element elt) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<pipeline_id>[\\w\\-\\+]+)/(?P<release_branch>[\\w\\-\\+]+)/(?P<job_id>[\\w\\-\\+]+)$', JobsView.as_view(), name=\"jobs\")\n", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       startActivity(intent);\n                        overridePendingTransition(0, 0, 0, 0);\n                        finish();\n                        return;\n                    } catch (Throwable throwable) {\n                        throwable.printStackTrace();\n                        Log.e(\"", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.token, person=person)\n\nI'm getting an error:\n\n\"TypeError: 'NoneType' object is not callable\"\n\nI'm not sure why it's giving this error, but", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid_size = len(data)\n    grid = np.linspace(0, 1, grid_size)\n    grid = np.reshape(grid, (grid_size, 1))\n\n    # Initialize posterior and marginal distributions\n    posterior = np.zeros", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollBtn.setX(Math.min(x, x + 10));\n            Board.this.rollBtn.setY(Math.min(y, y + 10));\n            Board.this.rollBtn.setVisible(true);\n            Board", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(etree_iter_strings(root), [u'a', u'b1', u'b2', u'b3', u'c1', u'c2', u'c3', u'c3'])\n\n        self.assertEqual(et", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "\n    @async_test()\n    async def test_detect_soft404(self):\n        entry = Entry.create(\"http://example.om/test\")\n        response = StaticResponse(404, {\"Content-Type\": \"text/html\"}}})\n", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            chCanc='1234567890',\n            CNPJ=_opcao('--cfe-cnpj'),\n            signAC=_opcao('--assinatura-ac'),\n           ", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\n    */\n    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return an ancestry.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse response = req.send();\n            System.out.println(\"Signature request sent. Waiting for response...\");\n            // 5. Handle response\n            response.checkResponse();\n        } catch (IOException ioe) {\n            System.out.println(\"Signature", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\t\tDocumentModelItem(None, self, new_item, \"Edges\")\n\t\t\t\tDocumentModelItem(None, self, new_item, \"Annotation\")\n\t\t\t\tDocumentModelItem(None, self, new_item, \"Areas\")\n\t\t", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\r\n            StepCounterSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == ", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\tprivate List<PlayerOverview> playerOverviews;\n\tprivate List<PlayerOverview> playerOverviews;\n\tprivate List<PlayerOverview> playerOverviews;\n\tprivate List<PlayerOverview> playerOverviews;\n\tprivate List<PlayerOverview> playerOverviews;", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "\n        FeedbackUseCase useCase = new FeedbackUseCase(new UserFeedback(userFeedback);\n        UserFeedback userFeedback = userFeedback;\n        UserFeedback userFeedback = new UserFeedback(userFeedback);\n        UserFeedback userFeed", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           try:\n                response = self.session.get_item(\n                    TableName=table_name, Key=key)\n            except Exception as e:\n                raise MissingObjects(e)\n            if response[\"Item\"]:\n                unpack_from_dynamodb(", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "           art = draw_art(key_size=key['size'], key_algo=key['algo'], key_fpr=fingerprint, color=True, longid=True)\n            print(f\"{art}{art}{art}\")\n            print(f\"Finger", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Component, ComponentAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n\nI have tried to follow the instructions in the tutorial but I am getting", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "\n    def consultar_status_operacional(self):\n        \"\"\"Sobrep√µe :meth:`~satcfe.base.FuncoesSAT.consultar_status_operacional`.\n\n        :return: Uma resposta SAT especializada em\n", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(self.elem), self.xsd_type.uri)\n        self.assertIsNone(node_document_uri(self.elem))\n        self.assertIsNone(node_document_uri(self.xsd_type)\n       ", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new ItemStartDateComparator());\n                    break;\n                case START_DATE_DESC:Next line of code:\n                    Arrays.sort(sorted, new ItemStartDateComparator().reversed());\n                    break;\n", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"\n        Top-level worker's trainer initialization\n\n        Notes\n        -----\n        This function is a wrapper around the trainer's :meth:`TrainerMixin.init`\n\n       ", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final List<OAuth2Guild> guilds;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient client)\n    {\n        this.clientId = clientId;\n        this", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Jobs jobs;\n    private final Vms vms;\n    private final Tasks tasks;\n\n    public SpringDirectorClient(RestTemplate restTemplate, Info info, Releases releases, Stemcells stemcells, Deployments deployments, Jobs jobs, Task", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void broadcastState()\n    {\n        synchronized (_lockObject)\n        {\n            LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(this);\n            Intent intent = new Intent(FittingConnectionManager.FittingConnectionStateChangeEventAction", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand( this );\n    }\n\n    // ----------------------------------------------------------------------\n    //\n    // ----------------------------------------------------------------------\n\n    protected static class AddScmResult\n        extends ListScmResult\n    {\n        private ScmFileSet file", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    protected void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        // ...\n    }\n\n    @Override\n    protected void drawText(int mouseX, int mouseY, @Nonnull I", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DERIVATIVE_CALL, EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = callPut[looppc] ? FiniteDifferenceFirstOrder.differentiate(blackPut(), DERIVATIVE_PUT", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           //VotingModule.class, //TODO: implement voting system\n            //DeathModule.class, //TODO: implement death system\n            //};\n\n\n    public static void loadModules() {\n        //TODO: load modules\n        //TODO: register event listen", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    * @see #newDownloadQueue(int)\n     */\n    public DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(mInteger.getAndIncrement());\n    }\n\n    public void start() {\n        mCancelerManager.start();\n    }\n\n", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void doWork(Config config, WatcherRegistry watcherRegistry) {\n    // ...\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Set<String> querySets = Sets.newHashSet();\n        NodeList<Node> childNodes = getAllChildNodes(element);\n        for (Node node = childNodes.get(", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = None\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right_foot,\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   BvUdiv(Constant(0x0c, 8), Constant(3, 8))\n\n\ndef test_basic_ops(size):\n    for op in simple_op:\n        for arg1, arg2 in zip(\n            [Constant(0b", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP14.CODE);\n\t\t\taOutput.write(aJPEG.mICCProfile.getData());\n\t\t}\n\n\t\taOutput.writeInt16(SegmentMarker.SO", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           HibiscusExporter exporter = new HibiscusExporter();\n            if (type == HibiscusExportType.SAMMEL) {\n                exporter.exportSammel(sl);\n            } else if (type == HibiscusExportType.", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "```\n    generate_pronunciations_func(\n        generate_pronunciations_func.GeneratePronunciationsArguments(\n            log_path, dictionaries, text_int_paths, word_boundary_paths, ali_paths, model_path, pron_paths", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       PlayerHandler.getCollectedLore(entityPlayer).addLore(LoreLoader.fromLore(LoreLoader.loadLore(category, ident)));\n        entityPlayer.addChatComponentMessage(new ChatComponentText(String.format(\"Gave lore [%", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "\n    public List<AccountSummary> getAccountSummaries(List<User> users) {\n        List<AccountSummary> summaries = new ArrayList<>();\n        for (User user : users) {\n            AccountSummary summary = getAccountSummary(user);\n            if (summary != null)", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static void main(String[] args) {\n\t\tUtil.log(\"Hello, world!\", true);\n\t\tUtil.log(\"Hello, world!\", false);\n\t\tUtil.log(\"Hello, world!\", true);\n\t\tUtil.log(\"Hello, world!", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutDown(FadingOutDown.class),\n    FadeOutUp(FadingOutUp.class),\n    FadeOutRight(FadingOutRight.class),\n    FadeOutLeft(FadingOutLeft.class),\n\n    RotateIn(Rotate", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode)\n\n    if check:\n        assert issubclass(problem, SearchCh)\n        assert issubclass(problem, SearchSkCh)\n\n    if issubclass(bvf_cipher, Ci", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "\n    def test_hosts_container(self):\n        c = HostsContainer(hosts = {\n            'localhost': [LocalHost1, LocalHost2, LocalHost3, LocalHost4],\n            'localhost2': [LocalHost2, LocalHost3, LocalHost4],\n", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return any(\n                [\n                    typepy.is_null_string(command),\n                    not typepy.Integer(self.direction).is_type(),\n                ]\n            )\n\n        return [\n            command for command in find_tc_command_history(self", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    * @return a List of Expenses\n     */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "\n    public MonthCalendar(Context context) {\n        this(context, null);\n    }\n\n    public MonthCalendar(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public MonthCalendar(Context context, AttributeSet", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = ones()\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [1] * 25\n\n  def test_inf_input(self):\nNext line of code:\n    my_stream = ones", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               isinstance(t2, RecordMeta) or isinstance(t2, ListTypeMeta)\n            ) or isinstance(t2, TypeVarMeta):\n                t1.__instance__ = t2\n            else:\n                raise\n\n    else:\n        raise NotImplemented", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       account_id,\n        account_secret,\n        host,\n        region_id,\n        *,\n        throttle_time=None,\n        motion_interval=None,\n        *,\n        **kwargs,\n    ):\n        \"\"\"\n        Initialize Blink object", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\nI'm trying to understand how the code works, but I'm having trouble understanding how the code is structured. Can someone explain the overall structure of the code and how it works?\n\nHere is a high-level overview of the code:\n\nThe code is organized into several modules,", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     raise\n\n    else:\n      self.next_sink.ProcessMessage(msg, buf, headers)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    headers = {}\n    self.next_sink.ProcessMessage(msg,", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       // assertThat(out.toString(), equalTo(\"\"));\n        // assertThat(out.toString(), startsWith(\"Thread dump\"));\n    }\n\n    @Test\n    public void jmxRemoteConnectViaCliWithJmxPort() throws Exception {\n        TestThread.JM", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.INSERT);\n    }\n\n    private static List<Pair<Long, String>> getStoredKeys(String name, Class<? extends String> valueClass)\n            throws IOException, DrumException {\n        Map<Long,", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"ËßÜÈ¢ë: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaProperties(new Business(new MessageBundle(MESSAGE_BUNDLE_BASE_NAME_PROPERTY, Locale.US)));\n    }\n\n    private ResponseProcessor getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManager(getRox", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self._last_ping_start = time.time()\n    self._ping_msg = self._BuildHeader(1, MessageType.Tping, 0)\n    self._last_ping_start = 0\n    self.send_queue.put(self._ping_msg", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == lag2freq(v) == v\n\n\nclass TestAlmostEqual(object):\n  def test_almost_equal_float_numbers(self):\n    assert almost_eq(3.14, 3.140", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "\n    @commands.command(name=\"config\", help=\"Configure ClemBot\")\n    async def config(self, *, _: str):\n\n    ...\n\n    @checks.check\n    async def is_config_name(self, config_name):\n\n", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return evaluate_binary_expression(self, context, operands[0], operands[1])\n\n\ndef evaluate_binary_expression(self, context=None):\n    if self.symbol == '(':\n        return evaluate_expression(self, context)\n    else:\n", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(\"Welcome, \" + getResources().getString(R.string.default_username));\n        // Implementa el menu...\n        return header;\n    }\n\n    private void initializeEvents() {\n        mEvents = new ArrayList<>();\n        mEventParents", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Fragment to notify\n            Fragment fragment = new InviteToChatFragment();\n            fragment.setChatId(newChatId);\n            fragment.setClassToNotify(classToNotify);\n            fragment.show(getActivity().getSupportFragmentManager());\n        }", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        JSON json = JSON.toJSON(request);\n        JSON json2 = JSON.toJSON(response);\n        System.out.println(JSON.toJSON(request));\n        System.out.println", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = creator.create(KEY, RANDOM_STRING_PARAMETER_VALUE_01, RANDOM_STRING_PARAMETER_VALUE_02);\n\n        assertEquals(2, creator.getParameters().size());\n        assertEquals", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\t}\n\t\tpublic int readSmallIntValue(int d1) {\n\t\t\tint d2 = readSmallIntValue(d1);\n\t\t\treturn d2;\n\t\t}\n\t\tpublic int readSmallIntValue(int d1) {", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __repr__(self):\n        return Client(\n            username=self.username,\n            password=self.password,\n            project_id=self.project_id,\n            auth_url=self.auth_url,\n            insecure=self.insecure,", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n    def _parse_ping_lines(self, lines: Sequence[str]) -> PingStats:\n        \"\"\"\n        Parse ping command output lines.\n\n        Args:\n            lines (Sequence[str]):\n                Ping command output lines.\n\n        Returns:\n", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           setFrameRate(Integer.parseInt(m.videoSetFrameRate.getText()));\n        } else {\n            JOptionPane.showMessageDialog(v.getContentPane(), \"Please enter a valid frame rate.\",\r\n                    \"Error\", JOptionPane.WARNING_MESSAGE", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self.probe = probe\n        else:\n            self.probe = _probe_adjacency_list(probe)\n        # Initialize the waveform extractor.\n        self.we = WaveformExtractor(**kwargs)\n        # Initialize the filter.", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "\n    protected final void doStart() {\n        if (_httpClient == null) {\n            start();\n        }\n    }\n\n    @Override\n    public final void start() {\n        if (_httpClient != null) {\n            throw new IllegalStateException(\"Transport is already", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self.control_dependence = ControlDependence(self)\n\n  def compute_conditions(self):\n    self.control_dependence = ControlDependence(self)\n\n  def analyze(self):\n    self.compute_conditions()\n    self", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       super.onResume();\n        IntentIntegrator integrator = new IntentIntegrator();\n        integrator.setTargetDeviceId(R.id.qr_code_qr_code);\n        Intent integratorIntent = new Intent(IntentIntegrator.INTENT_ACTION_SC", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "\npublic void visit(final SetClause setClause) throws QueryException {\n    final Column column = setClause.getColumn();\n    result.append(OPEN_BRACKET);\n    visit(column);\n    result.append(\" \").append(SET).append(\" \");", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile inputFile = new File(basePath + \"/input.dii\");\n\t\t\tFile outputForms = ddi2xforms.generate(inputFile, null, \"surveyName\");\n\t\t\tFile expectedForms = new File(basePath + \"/expected/output.", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           np.all(np.equal(DiscreteDistribution(pmf, np.array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBoxState, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(Vpa", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) {\n\t\tacceptValue(value);\n\t}\n\t\n\tpublic void acceptBoolean(BooleanTag tag) {\n\t\tacceptValue(value);\n\t}\n\t\n\tpublic void acceptChar(CharTag tag, char", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_add_or_subtract_days(self):\n        self.assertEqual(add_or_subtract_days(date_of_birth=datetime.date(2022, 12, 12), num_of_days=1", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andThrow(new UnexpectedException());\n                        mocksControl.replay();\n\n                        // WHEN\n                        Throwable thrown = catchThrowable(() -> givenSut(systemUnderTestMock)\n                                .givenArgument(() -> {\n", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "   class P1RestOctets(RestOctets):\n        # name for padding at the end\n        rest_name = 'P1_Rest_padding'\n        # GSM padding: 0x2b (for CSN1)\n        L = [0,0,1,", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n        # 1. Check if the table exists\n        try:\n            self.session.get_table(table_name=model.Meta.table_name)\n        except Exception:\n            pass\n        # 2. Create the table if it doesn't exist\n        if not", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "   def _http_post(self, *args, **kwargs):\n        \"\"\"Chama a fun√ß√£o :meth:`~satcfe.base.FuncoesSAT.enviar_dados_venda`\n        com os par√¢metros necess√°rios.\n\n       ", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(ComplexModel)\nraises:\n    InvalidModel: Class must subclass BaseModel\n\n\ndef test_bind_model_with_no_columns(engine):\n    class NoColumns(BaseModel):\n        pass\n\n    engine.bind(NoColumns)\n", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass_sun_kg\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"m/m\")\n    assert u7.dimensions == length\n\n\ndef test_create_from_expression():\n    \"\"\"\n    Create units from", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n    ['Verify instance command references --no, returns paths',\n     ['references', 'TST_Person.name=\"Mike\"', '--no\"],\n     {'stdout': ['\"root/cimv2:TST_Person.name=Mike\"',\n                 '", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules\n        // Load modules", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       ckresult(self.get_tag_async(index, name, callback=_get_tag_async_completed))\n        return _get_tag_async_completed.value\n\n    def get_tag_async(self, index, name, callback):\n        c", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void onCriteriaChanged(Account account, int daysToReturn) {\n                        getPortfolioViewModel().onCriteriaChanged(account, daysToReturn);\n                    }\n                });\n    }\n\n    private void showProgress(boolean show) {", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.instruments.thermometer)\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.instruments.thermometer.temperature, thermometer_data[\"temperature\"], 3", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age\n    value = 3\n    expected_ref = \"#n0.#n1.#n2.#n3.v0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           Alert alert = new Alert(AlertType.INFORMATION, \"Error requesting queue...\", ButtonType.OK);\r\n            alert.showAndWait();\r\n            return false;\r\n        } catch (Throwable t) {\r\n            t.printStackTrace();\r\n            t.printStackTrace(System.out", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "\n    def get_post_url(self):\n        slug = slugify(self.post.title)\n        return reverse('ploghubapp:view_post', args=[self.post.id, self.post.user, slug])\n\n    def can_", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji();\n\n    @GET(\"search?platform=android&type=search_suggestions\")\n    Call<SearchSuggestionResponse> searchSuggestions();\n\n    @GET(\"search?platform=android&type=trending", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionErrorListener).ifPresent(ConnectionErrorListener::onConnectError);\n            of(mWifiConnectionCallback).ifPresent(WifiConnectionCallback::onConnectError);\n        }\n    };\n\n    @NonNull\n    private final WifiScanReceiver.", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\r\n            ProximitySensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 7 || type == ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    }\n\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.get", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    def __call__(self):\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       self.system_object.get_tag(self, index, name)\n        return tag\n\n    def get_length(self):\n        \"\"\"Retrieve the length of the sound in milliseconds.\n\n        :rtype: int\n        \"\"\"\n        return ckresult(", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "\n    def process_section(self, message, bit_writer, section):\n        \"\"\"\n        Encodes a section of a BUFR message.\n\n        :param message: The BUFR message object.\n        :param bit_writer: The bit writer object.\n        :param", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            comment = form.cleaned_data['comment']\n            # Log moderation event\n            log_moderator_event(msg_type=ModerationLogMsg.REVIE", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void doOutput(final AbstractResult result) {\n        final NiceTable table = new NiceTable(out);\n        final AbstractMeter meter = result.getMeter();\n        final AbstractResult relatedResult = result.getRelatedResult();\n        final String unit = meter.getUnit", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "\n        // Initializing the application options\n        ApplicationOptions options = APPLICATION_PROPERTIES.getOptions();\n        // Initializing the model\n        Model model = factory.createModel();\n        // Initializing the selection criteria\n        InformationCriterion ic = factory.createInformationC", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record(TROPO_RECORDING_URL);\n\t\t\n\t\tresponse.setContentType(\"text/plain\");\n\t\tresponse.getWriter().write(\"Recording started\");\n\t\tresponse.getWriter().flush();\n\t\tresponse.", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getRespostas().add(resposta)) {\n\t\t\tcaminho = arquivos.getCaminhoParaArquivo(resposta.getArquivo());\n\t\t\tnenvios = resposta.getNenvios();", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DataConnector listener) {\n\t\t\t\tif (code == 0) {\n\t\t\t\t\t//TODO: load data\n\t\t\t\t\t//load data from web\n\t\t\t\t\t//load data from database", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Before\n    public void setUp() {\n        // Set up the FSM\n        FsmPlayerImperial fsmPlayerImperial = new FsmPlayerImperial(StateFactory.INSTANCE);\n        playerFsm = new FsmPlayerImperial(fsm", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tif (stage.isVisible()) {\n\t\t\t\t\t\tstage.close() ;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void handle(ActionEvent e) {", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String adapterName = adapterName(type, constructor, fields);\n    String injectorName = injectorName(type);\n    String injectorPackage = getPackage(getNoArgsConstructor(type).getEnclosingElement().getDeclaredMethod(\"inject\").getReturnType());\n   ", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           new PushApiClient().enableReceiveNotifyMsg(enable);\r\n        }\r\n    }\r\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_msgtype3():\n  '''\n  CNA message test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   return evaluate_expression(self, context=context)\n\n\ndef evaluate_expression(self, context=None):\n    if context is None:\n        raise self.missing_context()\n    elif isinstance(context, XPathSchemaContext):\n        return None\n    elif not self", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   # ...\n\ngtable/lib.py:10: Defect: Incompatible type in assignment (got type 'NoneType', expected 'list')\ngtable/lib.py:10\n    for i, (k, v) in enumerate(data.items()):\n\n", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               _typing = Boolean.parseBoolean(typingString);\n            }\n        }\n    }\n\n    private void addMessage(ChatMessage message)\n    {\n        synchronized (_lockObject)\n        {\n            if (!_messages.containsKey(message.getId", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "```\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "\n        assertThat(main.getLock(), equalTo(ThreadLock.fromInstance(ThreadLock.fromInstance(ThreadLock.fromInstance(null))).fromInstance(null))));\n\n        assertThat(ThreadDumpThread.getCurrentThread().getName(), equalTo(\"main\"));\n       ", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               DatePicker datePicker = new DatePicker(this, DatePicker.YEAR_MONTH_DAY);\n                Calendar calendar = new Calendar();\n                calendar.set(Calendar.YEAR, 2020);\n                calendar.set(Calendar.MONTH, 1);\n               ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\r\n        if(type == 5 || type == 0) {\r\n            LightSensorCollector.flushDBCache(deviceID);\r\n        }\r\n        if(type == 6 || type == ", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n    private ViewPager mViewPager;\n\n    private TabLayout tabLayout;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.link_up(self.link.new_link)\n\n    def init_logging(self):\n        # XXX this is a hack to make the first log message be at the right level\n        # XXX this is a hack to make the first log message be at the right", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       self.api = NylasClient(api_server=\"https://api.nylas.com\", app_id=\"my_app_id\", app_secret=\"my_app_secret\")\n        self.api.accounts.accounts()\n\nError message:\n\n================================", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       new ActivityLightLevelManager.OnLightLevelChangeListener() {\n          @Override\n          public void onLightLevelChanged(int level) {\n            Log.d(TAG, \"Light level changed to \" + level);\n            nightMode = level == 1;\n            updateNightMode", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_error = calculate_non_equilibrium_thermochemical_error(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_therm", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('MSCm2', Pt=MSCm2(), Len=1),\n            Bit('Mandatory', ReprName='Mandatory Indicator', Pt=0, BitLen=1),\n            Bit('private', ReprName='Reserved', Pt=", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "\n    def __parse_chain(self, device):\n        self.__chain_parser.parse(device, run_tc_show(TcSubCommand.CHAIN, device, self.__tc_command_output))\n\n    def __parse_rule(self, device):\n       ", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "```\nresult, index = apply_fast_ge(left.values, right.values, left.index, right.index)\n```\nExpected output:\n```\nresult: Column(0.0, 0.0, 0.0, 0.0, 0.", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   with pytest.raises(ValidationError):\n        _ = validator_map.validate(valid_data)\n\ndef test_validation_error_transforms_ValidationError():\n    def decorator(func):\n        @functools.wraps(func)\n       ", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
