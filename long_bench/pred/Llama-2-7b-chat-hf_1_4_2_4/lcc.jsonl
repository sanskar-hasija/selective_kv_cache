{"pred": "\t\t\t\tGump g = (Gump)m_Participants[i].Backpack;\n\t\t\t\tif ( g is DuelContextGump )\n\t\t\t\t{\n\t\t\t\t\tDuelContextGump dcg = (DuelContextG", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tA_ = A.copy()\n\t\t\tA_.add_edge(e_u, e_v, **data.copy())\n\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 1 == SEEK_CUR)\n        a.read_frames(1024)\n        a.", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   unisubs_page = VideoPage(\"https://www.unisubs.com/videos/123456789\")\n    unisubs_page.open_video_page(\"123456789\")\n    print(unisubs", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += a.hint_string() + \" \"\n        return ret\n    def is_correct(self, answer):\n        return self.hint_string() in answer\nclass _AnswerData(_QAData):\n    def __", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(cert);\n            }\n        }\n    }\n}\n/*\n * CertificateVerify ... CLIENT --> SERVER\n *\n * The client sends its certificate chain to the server, and the server", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void removeSpace (String name) {\n        spaceRegistrar.remove (name);\n    }", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void consumeAlchemize() {\n\t\t\towner.removeItem(Alchemize.class, this);\n\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = SimpleXMLElement(environ['REQUEST_BODY'])\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        #", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def run_subprocess(self, logger, action, status_id, *args, **kwargs):\n        try:\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n            # ...\n", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsTrue (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return self.trust_managers[0].getAcceptedIssuers()\n\n# FIXME FIXME for performance, cache this lookup in the future\n# to avoid re-reading files on every lookup\n#\n# CompositeX509KeyManager and Composite", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n    async def __play_audio(self) -> None:\n        ...\n\n    async def __stop_audio(self) -> None:\n        ...\n\n    async def __encode_audio(self) -> None:\n        ...\n\n    async def __render_audio(", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnID);\n\t\t\t\t\t//don't catch 0 value\n\t\t\t\t\tif (jumpID > 0) {\n", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = \"\";\n            } else {\n                argValues[i", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tgeneralNode.setPage(new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE,\n\t\t\t\t\t\t\"Auto save", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nNote: I have already written the spell's effect and the spell's name.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n\n    def _begin_nested(self, *entities, **kwargs):\n        self.begin()\n        self.begin_nested()\n        return self", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getField().getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `removeslash` but for adding a slash instead of removing one.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n```\n\nThis is the code for the `MultiView` control in ASP.NET. It inherits from the `Control` class and provides a way to display multiple views in a single control. The `MultiView", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   WigleDownloader(args.user, args.password, args.coordfile, args.outpath).run()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = android_builds(build, builds)\n    else:\n        builds = [{'os': 'os_android', 'os_pretty': 'Android',\n                  'arch': 'x86', 'arch_pretty': 'Android x86',\n                 ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tstateBeansList = StatusBL.loadAllowedByProjectTypesAndIssueTypes(projectID, issueTypeID);\n\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\tT", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                var parameter = memberList.FirstOrDefault( x => x.Name.Identifier.Value.StringValue == argument.Value.Token.Value.StringValue );\n                if (parameter != null) {\n                    argument.Value =", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(0, split_test.user_partition_id)\n        # Change to second group configuration.", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Process the font\n            Process(ttfAfm);\n            // Create the font dictionary\n            PdfDictionary font = GetFontBaseType(piref, subset, ttcIndex);\n            // Add the font to the document\n            writer.AddFont(font);\n            //", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.x = (int)(xScale * (cell.getDepth() + 1));\n\t\t\t\t\t\tcgn.y = (int)(yScale", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream inputStream = context.getAssets().open(model.getSprite());\n      Bitmap bitmap = BitmapUtil.", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('ManagePolicies')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Manage Policies')\n\nI'm not sure what the issue is, but it", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n```\n\nPlease help me complete this code. I am not able to understand the purpose of this code and how to use it in my project.\n\nI am using ClearCanvas RIS/PACS open source", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\tdamage = compound.getInteger(\"Damage\");\n\t\t\n\t\tif (compound.hasKey(\"ToolDamage\"))\n\t\t{\n\t\t\tdamageCooldown = compound.getInteger(\"Cooldown\");\n\t\t}\n", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" + getId() + \"}\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   self.assertEqual(p.owns[0], o)\n    self.assertEqual(o.owner, p)\n\nExpected output:\n\nTraceback (most recent call last):\n  File \"C:\\Python27\\lib\\unittest\\testcase.py\",", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           else:\n                self.line(x=x, y=y, sel_dim=sel_dim)\n        else:\n            self.line(x=x, y=y, sel_dim=sel_dim)\n    def plot_3d(self, x=None", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (rootFolder.IsIgnored())\n                {\n                    ignored.Add(path);\n                    continue;\n                }\n                toScan.Add(path);\n            }\n            foreach (var path in toScan)\n            {\n                var watcher = _fileSystem", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E getAndCompute(K key,\n\t\t\t\t\t\t\tFunction<? super K, ? extends E> mappingFunction) {\n\t\tI result = internalMap.get(key);\n\t", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\t    \n            \n            if con", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic Tile( int x, int y )\n\t\t{\n\t\t\tm_X = x;\n\t\t\tm_Y = y;\n\t\t}\n\t\tpublic Tile(", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // create a new parcel voice channel\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": creating new parcel voice channel", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=textDateStart.Text;\n\t\t\tPayPeriodCur.DateStop=textDateStop.Text;\n\t\t\tPayPeriod", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_or_org_member_create', context, data_dict)\n```\nThis code is a collection of logic functions that handle authentication and authorization for various actions in the CKAN application. The functions are marked with the `@logic.auth_allow", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\texample.setValue(predictionAttribute, example.getValue(predictionAttribute));\n\t\t\t\t// updating outcomes and confidences\n\t\t\t\toutcomes[resultIndex] = parentIndex;\n\t\t\t\tconfidences[resultIndex] = Math.", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        #endregion // Methods\n    }\n}", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = Character.toCodePoint(ch);\n            if (codePoint < 0x10000) {\n               offset += 2;\n               return _range.contains(codePoint) ? offset : -1;\n            }\n         }\n         return -1", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     if (existingRequired && (sampleDAO.getSampleByAccessionNumber(accessionNumber) == null)) {\n        return ValidationResults.SAMPLE_NOT_FOUND;\n      }\n      return ValidationResults.SUCCESS;\n    }\n}\n}\n", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Mod != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor (int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)beans[i].buildVo());\n\t\t}\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Notification(,ok)\")\n\nI have no idea what this code does, but it seems to be a script for a Kodi addon. It contains several functions that start with \"packages\", \"musicdb\", \"videodb\", \"thumb", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```\nThis code is a Django view that handles requests to the `accountingplots` URL. It uses the `Accounting` module to interact with the Accounting system and generate plots.\n\nThe view has several methods:\n\n* `index`: This method returns a rendered template for the accounting plots", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot.World.FindUnits(b.GetRallyUnits(), player));\n\t\t}\n\t\tvoid AddNewProductionBuilding(IBot bot, string buildingType)", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlan();\n    }\n    public void compile(String sql, int paramCount, boolean singlePartition, String joinOrder, DeterminismMode detMode) {\n        compile(sql, paramCount, singlePartition, joinOrder, detMode, false);\n   ", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = (StopBits)bits", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=admin)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\nclass UserProfileViewTest(TestCase):\n   ", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    #print \"keep_tempdir is\", _keep_tempdir\n    TestMethods(tempdir", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.append(self.newAPList[i])\n\t\t\ti += 1\n\t\t\tif i == len(self.newAPList):\n\t\t\t\ti = 0\n\t\tself.oldlist = {}\n\t\tself.", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float barHeight = size * 3;\n                float x = 0;\n                float y = 0;\n                for (int k = 0; k < n; ++k) {\n                    byte[] bar = BARS[k];\n                    for (int i", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, +90, 10)\n        ...\n        sample_points = [\n            (\"longitude\", x_points),\n            (\"latitude\", y_points),\n        ]\n        result = traj_interpolate", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToHex());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n            toolStripButtonConvertTo", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;32;40m'\n    else:\n        print 'default'\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as colors\n\ndef plot_data(data,", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        }\n    }\n}\n\nI am trying to complete the code for the class RefCountedSet<TK> but I am having trouble understanding how the Add and Remove methods should work.\n\nThe Add method takes a key and an optional reference count, and adds the key to the set", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.ImageList = imageList1;\n            // \n            // DummySolutionExplorer\n            // \n            this.DummySolutionExplorer.Dock = System.Windows.Forms.DockStyle.Fill;\n            this.DummySol", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction(self, functionName, *argTypes):\n        \"\"\"Create a function that does nothing and returns None\"\"\"\n        from OpenGL import wrapper\n        return wrapper.nullFunction( functionName, *argTypes )\n\nYou have provided a code snippet that defines a class `BasePlatform", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, emptyStreams.length());\n            for (int i = 0; i < emptyStreams.length(); i++) {\n                baos.write(emptyStreams.get(i) ? 0x1 : 0x0);\n           ", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel += (inRamp ? 255 : 0) * (fixedIncrement * (System.currentTimeMillis() - start));\n                    inRamp = !inRamp;\n                }\n                repaint();\n                try\n                {\n                   ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_not_be_removable_if_over", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n                if (_diff > 0)\n                {\n                    await RecycleItems(session, cancellationToken, pinap, ItemId.ItemPinapBerry);\n                }\n                if (_diff > 0)\n                {\n                    await RecycleItems(session,", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n    def SersicConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f_constrain.write(str(cO) + '       x       ' + \\\n                          str(-c.center", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n            }\n            lo[0] = i;\n        }\n    };\n    public static sega_decryptPtr sega_decrypt77 = new sega_decryptPtr() {\n        public void handler(int pc,/*unsinged*/ int[] lo) {", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_key.make_locator()\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        # Create the course\n        course_location = self._course_location\n        self.session.create(course_", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length>1) {\n\t\t\tchance=Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\tint result = (int)(chance*100);\n\t\treturn result;\n\t}\n}\n*/\nPlease", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if response['status'] == 200:\n        module.exit_json(changed=True)\n    else:\n        module.fail_json(msg=\"Failed to delete meter\")\n    # If the meter was deleted, return 0\n    return 0, \"Meter", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 33);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n            except KeyboardInterrupt:\n                raise\n            except (OSError, IOError) as e:\n                if e.errno in fatal_fs_errors:\n                   ", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   from MaKaC.conference import IConference\n    conference = IConference()\n    conference.getId()\n    conference.getTitle()\n    conference.getDescription()\n    conference.getStartDate()\n    conference.getEndDate()\n    conference.getLocation", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                           parent.mirthClient.log(e);\n                        }\n                        return true;\n                    }\n                };\n                result = messageBrowser.importMessages(fileTextField.getText(), messageWriter);\n            } else {\n                result = messageBrowser.importMessages(fileTextField", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = ((Scriptable) value).getIntValue(LAYER, -1);\n\t\t\t\t} else if (value instanceof Number) {\n\t\t\t\t\tlayer = (int) value;\n\t\t\t\t}\n\t\t    \t}\n    ", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.getAccessToken() != null) {\n            GraphUser user = getUserFromAccessToken(currentSession.getAccessToken());\n            if (user != null) {\n                userProfilePicID = user.getId();\n                connectedState", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.strength = sum / emotions.length;\n\t\t}", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n                }\n            }],\n            self.build.stages_to_list())\n    def test_export_to_xml(self):\n        \"\"\"Test exporting BuildJob to XML.\"\"\"\n        #", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LatRad = phi1*_deg2rad\n    LongRad = (LongOrigin + (x-10000000.0)*(1-eccPrimeSquared/64))*_deg2rad\n    if NorthernHemisphere:\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       form = ReportUserForm(request.POST)\n        if form.is_valid():\n            reason = form.cleaned_data['reason']\n            message = form.cleaned_data['message']\n            UserMessage.objects.create(\n                to_user = user,\n", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   label = \"Add new series\"\n    field_names = [\n        \"name\",\n        \"description\",\n        \"series\",\n        \"owner\",\n        \"active\",\n        \"autoupdate\",\n        ]\n    @property\n    def page_title(self):\n", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n#if !KeePassLibSD\nusing System.Drawing;\nusing", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\npublic class NumberVariableLengthTest\n{\n    public static void main(String[] args)\n    {\n        NumberVariableLength variableLength = new NumberVariableLength(\"Test\", new Abstract", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, re.compile(regex)))\n            return new_positional_tags_list\n    def _add_compile_tag_regex(compile_tag_regex):\n        self._compile_tag_regex = compile_tag_regex", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n        }\n    }\n}\n\nPlease help me complete this code. I am new to C# and .NET framework.\n\nThank you.", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_PID00(data=b'0x00000000')\n\nPlease help me to complete the code by adding the missing fields and the correct values for the fields.\n\nThank you in advance.", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe == -1:\n\t\t\tready_pipe = os.pipe()\n\t\telse:\n\t\t\tdbus.service.Object.listen(self)\n\tdef close(self):\n\t\tdbus.service.Object.close(self)\n", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\t\n\t\t\t\tindex = this.AddCraft(typeof(ManaVampireScroll), 1044353, 1073465, 45.0, 95.0, typeof(BlankScroll), 1", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def __enter__(self):\n        self.push()\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if exc_type is not None:\n            reraise(ex", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, needs_columns=needs_columns)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ###################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n```\nThis code is a part of the Puzzle IT business application generator, which is a tool that helps developers to", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # ...\n    # Compute angles\n    phi = np.arctan(", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           logger.log(u\"Proxified RE: \" + regx, logger.DEBUG)\n        return regx\n    def _doLogin(self):\n        if self.enabled:\n            self.url = self.urls[self.type]\n            self.enabled = True\n", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn font_size_names [type];\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tvar innerVal = JValue.Parse(obj.Properties[0].Value.ToString());\n\t\t\t\tAssert.That(innerVal.Type, Is.EqualTo(TokenType.Object));\n\t\t}\n\t\tstring _text4 = @\"[\n    \"\"", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\nT2 edge = new T2(w, h);\nedges.add(edge);\n}\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices() {\n           ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = iso.Isoelastics(ds)\n    assert np.allclose(iso.get(col1=\"area_um\", col2=\"deform\"),\n                         ddict.get(keys[0]),\n                         ddict.get(keys[1]))", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final LocalTripleStore t1 = new LocalTripleStore(new File(\"t1.ttl\"));\n        final LocalTripleStore t2 = new LocalTripleStore(new File(\"t2.ttl\"));\n        final AbstractTripleStore actual = t1;\n       ", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   def test_check_for_alert_with_no_history(self):\n        \"\"\"We should not create an alert if there is no history.\"\"\"\n        history = []\n        subscription = {'name': 'Sub for 1b',\n                     'threshold':'0.05", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallerLaunch(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\t", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tcontext = IntPtr.Zero;\n\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\tSDL.SDL_GL_DestroyWindow(window.Window);\n\t\t\twindow =", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       projected onto the *y* axis.\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse,", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       CmsLink link = new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n        return link;\n    }\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                   adminUser = getEucalyptusAdmin();\n                  }\n                }\n              } catch (AuthException e) {\n                // ignore\n              }\n            }\n            // Transfer the ownership of the object to the owning account\n            osgObject.setOwnerCan", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler Initialized\n        {\n            add { _initialized += value; }\n            remove { _initialized -= value; }\n        }\n       ", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        command.setTemplateName(name);\n        assertEquals(isImportAsNewEntity, command.canDoAction());\n   ", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.vbox2.Add (this.table1);\n\t\t\tglobal::Gtk.Box.BoxChild w11 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.table1]));\n\t\t\tw11.", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.set('MY_KEY', 'MY_VALUE')\n\nI'm trying to understand how to use this script, but I'm having trouble understanding how to use the `set()` and `get()` functions. Can someone please explain how to use these functions?\n\nAdditionally, I", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes)\n\t\t{\n\t\t\tMethodBuilder mb = DefineMethod(name", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    public class Builder : pb::GeneratedMessageBuilder<SendInvitationRequest, Builder> {\n      protected override Builder ThisBuilder {\n        get { return this; }\n      }\n      public Builder() {\n        result", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(getVertIndex(i, x));\n                else\n                    vertices[x] = vertices[x].add(getVertex(getVertIndex(i, x)));\n            }\n        }\n    }\n    protected Vector3f getVertex(", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.addAll(CmsStringUtil.splitAsList(showDateData, ';'));\n        return result;\n    }\n    /**\n     * Collects the names of the columns to show in the document list view, based on the property value of the current document type.<p>\n", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\tCalculateHeight();\n\t\t}\n\t}\n}\n```\n\nThis code is for a `InputField` component in Unity, which is used to create a text input field. The `InputField", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n  }\n}\n```\nThis code is for a CommandButton control in a Windows Forms application. It has been modified to include an arrow image and", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send email to each user\n            foreach (string user in Users", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // Handle addition to/removal from TVerificationResultCollection\n            VerificationResultCollection.Auto_Add_Or_AddOrRemove(this, VerificationResult, ValidationColumn);\n        }\n        private void LoadDataManual(ref TFrmConferenceMasterSettings AMainForm", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob/byte[].\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n```\nThis code defines a `Load` class with two methods: `Load", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(apply_called_for_all_requirements=%s, apply_cb=%s)\" % (self.apply_called_for_all_requirements, self.apply_cb)\n\nI have completed the code", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && _customRange != null; }\n\t\t}\n\t\t#endregion\n\t}\n}\n#pragma warning restore 0419,1574,1587,1591\n}\n```\nThis code is", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t}\n\t}\n}\n\nThis code is a Gnome application that inherits from the IN", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n            if (bugAnnotation.getType() != BugAnnotation.TYPE_SOURCE_LINE) {\n                throw new IllegalArgumentException(\"Invalid bug annotation type: \" + bugAnnotation.getType());\n            }\n        }\n    }\n}\n\nPlease complete the code by implementing the", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void OnDoubleClick( Mobile from )\n\t{\n\t\tbase.OnDoubleClick( from );\n\t\tif ( from.InRange( this.GetWorldLocation(), 1 ) )\n\t\t{\n\t\t\tEat( from );\n\t\t}\n\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.Count > 0)\n                        {\n                            E.Cast(eFarm[0]);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (Mana", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn new GridBagConstraints(x, y, width, height,\n\t\t\t\t0.0, 0.0, getAnchor(anchor), getFill(),\n\t\t\t\tnew Insets(0, 0, 0, 0), 0, 0);", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_def['rules'], field_model_def['rules'])\n        self.assertEquals(field_def['producer'], field_model_def['producer'])\n        self.assertEquals(field_def['name'], field_model_def['name'])", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L, \">E1<\", \"?E1?\"}});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraMultiKey : RegressionExecution\n        {\n            private readonly", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def __div__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__idiv__(other)\n    \n    def __idiv__(self, other):", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view = self.browse(cr, uid, view_id, context=context)\n    arch = view.arch\n    # ...\n\\end{code}\n\nThis code is a view class for OpenERP, which is a web-based enterprise resource planning software. The", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n            c.putClientProperty(BasicHTML.propertyKey, value);\n        }\n        else {\n            c.removeClientProperty(BasicHTML.propertyKey);\n        }\n    }\n    private static final String propertyKey = \"", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    item_type, items = s.manifest_items()\n    assert item_type == \"testharness\"\n    expected_urls = [\n        \"/html/test.\" +", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, Action<ILoaderMapper> loaderMapping)\n\t\t{\n\t\t\tif (loaderMapping == null", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState ps in m_Members )\n\t\t\t{\n\t\t\t\tps.Serialize( writer );\n\t\t\t}\n\t\t\twriter.Write", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        assert !graphQueue.isEmpty();\n        CallsiteHolderExplorable current = (CallsiteHolderExplorable) graphQueue.peek();\n        InlineInfo currentInfo = current", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               pytest_con = self.args['pytest_con']\n                pytest_bindings = self.create_pytest_bindings(pytest)\n                pytest_env = self.create_pytest_env(pytest_bindings)\n                pytest_name", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(value, value.stamp());\n                    if (phi != null) {\n                        entry.setValue(phi);\n                    }\n                }\n            }\n        }\n    }\n}", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nNote: I have provided the necessary", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic class EodonWallMapGump : Gump\n\t\t{\n\t\t\tpublic EodonWallMapGump", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'BibrecBib1x',\n    'BibrecBib2x',\n    'BibrecBib3x',\n    'BibrecBib4x',\n    'BibrecBib5x',\n    'BibrecBib6x", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user_session(self, username, domain, resource):\n        user = '%s@%s' % (username, domain)\n        session = self.module.get(user)\n        if session is None:\n            raise UserNotFound(username, domain)\n        session", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      self.integrityClient.setTransformationParameter( transID, 'Status', 'WaitingIntegrity'", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() != null && uri.getPath().length() > 0) {\n\t\t\t\t// FIXME what about /downloads/ ?\n\t\t\t\tif(uri.getPath().equals(\"/\"))\n\t\t\t\t\treturn action", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        d = self.run_fake_single_build(gsp, buildResult, expWarning=True)\n        yield d\n        self.assertEqual(gsp.sendCodeRe", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'foobar'\n    self.category.scheme = 'http://example.com/categories'\n    self.assert_(self.category.term == '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>(r1);\n            r.putAll(r2);\n            return r;\n        }\n        @", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   # ##### END GPL LICENSE BLOCK #####\n\nThe code provided is a Python script that defines a set of properties and menus for the Blender material editor. It is designed to work with Blender 2.80 and later versions, and it includes a number of features and options", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenu jMnuOpenDocument = new JMenu(\"Open Document\");\n            jMnuOpenDocument.add(new JMenuItem(oActionListener, \"Open...\"));\n            _jMnuRoot.add(jMnuOpenDocument);\n        }\n        private void insertMenus", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Giant Spiders]\n\t}\n}\npublic class AranwenShop : NpcShopScript\n{\n\tpublic override void Setup()\n\t{\n\t\t", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn base.SizeHeightToFit (min);\n\t\t}\n\t}\n}\n}\n\nPlease help me to complete the code.\n\nThank you.", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```\nimport sphinx\nimport os\nimport shlex\nimport re\nimport sys\nimport os\nimport shlex\nimport re\nimport sys\nimport sphinx.ext.intersphinx\nimport sphinx.ext.todo\nimport sphinx.ext.ifconfig", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                    ''', (i,))\n    rows = cursor.fetchall()\n    print \"Rows are: \", rows\n    for row in rows:\n        print \"Row is: \", row\n        time_start = row[3]\n        time_end = row[4]\n       ", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table('projects').update({'project_id': project_id}, {'$set': {'last_snapshot': timestamp}})\n        conn.table('snapshots').insert({'project_id': project_id, 'snapshot': timestamp})\n    # Close the connection", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tbreak;\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nI have completed the code given above. Please let me know if you have any questions or need further assistance.", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n\\end{code}\n\nThis code is from an Android app that resolves URLs by using the unshorten.it API. It uses the `AsyncTask` class to perform the resolution in the background, and it displays a toast message to the", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if primary.keys():\n        raise AssertionError(\"Primary.xml contains packages:\")\n    else:\n        pass\n        # Do nothing\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n\nI'm not sure what the code is doing, but it seems to be related to installing Python modules. It's a Python script that defines a `install_lib` class that inher", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (propValue != null)\n\t\t\t\t{\n\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',\n        '--',", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(Delegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1})\", circle.X, circle.Y);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex);\n            }", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def checkDownload(self, *args, **kwargs):\n        res = self.load(\"http://www.fileserve.com/link-checker.php\", *args, **kwargs)\n        return json_loads(res)\n    def load(self, url, *args,", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\t// If we found a path, follow it:\n\t\t\t\tforeach (var p in path)\n\t\t\t\t\tself.SetTargetLine(Target.FromCell(self.World", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "           rc = utils.subprocess_call(self.logger, \"dhcpd -f\", shell=True)\n            if rc != 0:\n                self.logger.error(\"dhcpd -f failed\")\n                return False\n        return True\n    def write_", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\nI am trying to complete the code by implementing the methods that are missing in the provided code.\n\nPlease let me know if there is anything else I can do to help.", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                state = context.Statistics;\n                if (state.Symbol == symbol)\n                {\n                    goto NoLoop;\n                }\n                if (state.Frequency < MAXIMUM_FREQUENCY / 4)", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\t//now we have the list of sessions that have this test\n\t\t//now we have to check if the test is the same as the one selected in the treeview\n\t\t//if it is,", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00ij', self.read(o))\n    def test_larger", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][test]['durations'], label=app)\n    ax.set_xlabel('Time in ms')\n    ax.set_ylabel('Count')\n    ax.set_title('%s, %s, individual %ss", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is non-root.\n        \"\"\"\n        self.assertEqual(util.gidFromString(\"100\"), 100)\n        self.assertEqual(", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}else if(bDrawCheck || bDrawCross){\n\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlColor());\n\t\t\t\t\tg.drawRect(x, y, controlSize - 1, controlSize - ", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, knn, patternDict, testName):\n    failures = \"\"\n    for i in range(len(patternDict)):\n      pattern = patternDict[i]['pattern']\n      category = patternDict[i]['category']\n      if knn.distance", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / elementKind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n}\n\nPlease complete the code given above.\n\nNote: The code is for a class called OhmArrayLayout,", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // try to resolve relative path as a file in the project directory\n            string file = FileUtils.CombinePaths(ProjectDirectory, relativePath);\n            if (File.Exists(", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\ndef get_random_string(length=10):\n    \"\"\"\n    Generates a random string of the specified length\n    \"\"\"\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    string =", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dcopy.dcopy(i16, paramArrayOfDouble12, i19 - 1 + paramInt22, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1);\n        Dcopy.dcopy(i", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\tpublic class State {\n\t\tpublic string name;\n\t\tpublic AnimationGraph graph;\n\t\tpublic", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.CalledProcessError, lambda: subprocess.Popen(\n            ['/bin/bash', '-c', 'echo \"hello\"'],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n           ", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Start();\n\t\t\tResourceService.Start();\n\t\t\tAddInManager.Start();\n\t\t\tMessageService.Start();\n\t\t\tLoggingService.Start();\n\t\t\t// ...\n\t\t}\n\t}\n}\n// </", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t\t//call once before adding a constraint to a collection\n\t\t\t//will throw an exception to prevent the add if a rule is broken\n\t\t\tthis.AddToConstraintCollectionSetup (this.ConstraintCollection);\n\t}\n}\n#endregion", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.Dialog.setWindowTitle(\"Pyslvs UI\")\n        self.Dialog.show()\n        self.Dialog.raise()\n        self.Dialog.activateWindow()\n\nI have tried to modify the code to match the above code but I am getting an error message saying that", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n            } else {\n                // Display the TAF details\n                showTaf( wxs );\n            }\n            return true;\n        }\n    }\n    private void showTaf( Cursor wxs ) {\n        // Display the TAF details\n        String stationId =", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ (ulong)uiByteValue ^ polynom;\n            }\n            return (ushort)uiCRCITTSum;\n        }\n        private ulong reflect(ulong crc,", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n\t}\n\tpublic void shoot(EntityTarget<Sentry> target, float speed, float range, SoundEvent sound) {\n\t\tif (target != null) {\n\t\t\tthrowableEntity = new Bullet(level, this);\n\t\t\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector() };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonJavaBackendHyperlinkDetector(controller), \n                new C", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DPrivateInterface(self))\n        self.connect(self.drawingModeWidget,\n                     qt.SIGNAL(\"drawModeUpdated(int)\"),\n                ", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( sender.Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedChoice = selectConverter.convert(valueChoice);\n                        if (convertedChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\t\tif (acceptableChange[i][j])\n\t\t\t\t\tsb.append(\"+\"+i+\"->\"+j+\"\\t\"+fractionWithAmount[i][j][0]+\"\\t\"+1.0*fractionWithAmount[i][j][0]", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n    Console.WriteLine(\"For purchase order: \" + orderPurchaseESD.dataRecords[0].purchaseOrderCode + \" a pricing issue was found for line number: \" + (lineIndex + 1) + \" with product code: \" + orderProduct.productCode);\n", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n```\n\nThis code is a class `ClientOperation` that represents a client operation for a service. It has various properties", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final String ownerName = \"owner\" + ownerId;\n        final String groupName = \"group\" + ownerGroupId;\n        final String[] acl = new String[] {\n            \"user:\" + ownerName + \",read=denied\",\n            \"group:\" + groupName +", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn Vector2.Transform (v, Matrix.CreateTranslation (viewport.Center));\n\t\t}\n\t}\n}\n}\n```\nThis code is a collection of utility methods for working with vectors, matrices, and other geometric data in XNA. It includes methods for performing", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "e = endpoint_key(vlan=10, mac_hi=0x1234, mac_lo=0x5678)\nprint(type(e))\nprint(repr(e))\npacket = endpoint_value(port=100)\n", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        #endregion\n        #region \"threading\"\n        private Thread workerThread;\n        private ManualResetEvent m", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    convertToStepBucketList(list);\n                    break;\n                case Activity:\n                    convertToActivityBucketList(list);\n                    break;\n            }\n        }\n    }\n    @", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%d<ReturnType%s>,' %\n                (parent_class, exec_count, exec_type_str))\n  if bind_count:\n    PrintLongLine('                               (%s)(%s),' % (signature,", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n    return response\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n   ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        //\n        // Test the optimizer.\n        final ASTSearchOptimizer optimizer =", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       form = UserForm(request.POST)\n        return UserDetailView(request, form=form)\n\\end{code}\n\nThis code is a Django admin view for managing users. It includes a form for creating and editing users, as well as a toolbar with buttons for changing the user", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssemblyReference.ResolvedAssembly {\n      get { return this.ResolvedAssembly; }\n    }\n    AssemblyIdentity IAssemblyReference.Unified", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n            // Perform the TFQMR iteration\n            for (int k = 0; k < 100; k++)\n            {\n                // Compute the LU factorization of A\n                LU lu = new LU(matrix);\n                // Compute the inverse of", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat leftMedian = sortedNumbers[left];\n\t\t\tApfloat rightMedian = sortedNumbers[right];\n\t\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               A[v, :] = L[v, :]\n                L[v, :] = L[edge.child, :]\n                L[edge.child, :] = L[edge.parent, :]\n                L[edge.parent, :] = L[v", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for item in self.items:\n            item['ocean-unique-id'] = item['id']\n            item['metadata__updated_on'] = datetime.fromtimestamp(item['updated_on'])\n            item['metadata__timestamp'] = datetime.fromtimestamp(item['timestamp'])", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tvar bot = slot.Value.LockTeam ? botController.GetBot(slot.Key) : null;\n\t\t\t\t\t\t\t\t\t\tif (bot != null)\n\t\t\t\t\t\t\t\t\t\t{", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n    def __repr__(self):\n        return '<DataFrame length: {}, flags: {}, stream_id: {}, data: {}>'.format(\n            len(self),\n            '<{}>'.format(','.join(str", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.BoundaryCurve.BoundingBox;\n            if (b.Width < 1 || b.Height < 1)\n                return;\n            var p = b.Center;\n            var q = cluster.Center;\n            if (p.X < q", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\nvoid btKinematicCharacterController::addContactResult (btCollisionWorld::LocalRayResult& rayResult,bool normalInWorldSpace)\n{\n\tif (rayResult.m_collisionObject == m_me)\n\t\treturn;\n\tClosestRay", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 !=", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(Context, typeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t// Private methods\n\t\t//--------------------------------------------------------------------\n\t\tprivate void CreateMethods()\n\t\t{", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration,", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\t\n\t\t// If we've reached this point, we know that the access paths are\n\t\t// equal, and the rest of the fields are equal.\n\t\t// Therefore,", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.rightChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "```\n    def test_bwlimit_ssh_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(popen, pipe_processor_loop,", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a material with the given appearance.\n\t *\n\t * @param   appearance   Appearance to be used", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( proxyThat instanceof Contact ) {\n\t\t\tContact that = (Contact)proxyThat;\n\t\t\tif ( this.getId() != null && that.getId() != null ) {\n\t\t\t\tif ( !this.getId().equals(that.get", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n == n_steps - 1:\n      print((\"Saving final configuration : %s\" %n))\n      if (reject_wall+reject_jump) == 0:\n\tbody_offset = 0\n\tfor i, ID in enumerate(struct", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            return\n        subtens = Subtensor(cdata)\n        sl_ins = Subtensor.collapse(cdata,\n                                    lambda x: isinstance(x, T.Variable))\n        out = subtens(node.inputs[0", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   class Meta:\n        model = Group\n        fields = ('id', 'name')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'index' %}\"\n        widgets = {'groups': forms.CheckboxSelectMultiple}\n       ", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        return wrap\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been composed\n        into a core :class:`.Select` object.\n        This event is intended to allow changes", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           self.runtime.add_block_as_child_node(self.get_show_block(), xml_object)\n        return xml_object\n    def get_show_block(self):\n        show_block = etree.SubElement(self, 'show')\n        for", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            global_changes.append(change)\n        return global_changes\n    def get_adapter(self, data, bg_value):\n        return get_adapter(data, bg_value)\ndef register_adapter(type):\n   ", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (Method != null)\n\t\t\t{\n\t\t\t\tif (Class == null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' attribute without 'class", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assert", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        termData.add(csvData.get(ID_KEY), csvData.get(ID", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\nPlease help me understand what this code does and how it works.\n\nI have no idea what most of the methods and variables are for, and I'm having trouble", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n}\n}\nPlease help me complete the code by implementing the methods BIRTH, CONTRACTION_DIVISION, and", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if not are_equal:\n        raise Exception(\"Error when upgrading record %s: moreinfo not equal\" % recid)\n    return are_equal\ndef estimate_time(recids):\n    \"\"\"Estimate the time needed to upgrade the given list of records.\"\"\"\n    return", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Dispose();\n\t\t\tcomputerMgmt = null;\n\t\t\t\n\t\t\te.Cancel = true;\n\t\t}\n\t\tprivate void menuItem1_Click(object sender, System.EventArgs e)\n\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  private static Date toDatable(Date date, int hour) {\n    Date result = new", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.SourceEventName = SourceEventName;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<dfEventBinding>();\n\t\ttargetEventBinding.hideFlags = HideFlags.HideAndDont", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           ISwitchManager switchManager = (ISwitchManager) ServiceHelper.getInstance(ISwitchManager.class, containerName, this);\n            SpanConfig spanConfig = (SpanConfig) DaylightWebUtil.jsonToObject(jsonData, SpanConfig.class);\n            switchManager.", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate Images()\n\t\t{\n\t\t\tCore = new CoreImages();\n\t\t}\n\t\tpublic final class CoreImages implements java.io.Serializable\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n}\n}\n\nI am trying to complete the code by implementing the methods and classes as required. Can someone please help me with this?\n\nI have a feeling that I am missing something very basic here, but I am not sure what it is.", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\nlam.make_von_den_driesch_equiv(project_uuid='A5DDBEA2-B3C8-43F9-8151-33343CBDC857')\nlam.replace_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           buffer.Append(\"    .shrinktofit = \")\n                .Append(StringUtil.ToHexString(ShrinkToFit)).Append(\"\\n\");\n            buffer.Append(\"    .mergecells = \")\n                .Append(StringUtil.ToHexString(", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width kana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t(((int) (", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "```\n    obj.operands = [src1, src2]\n    obj.type = type_data_processing\n```\nExpected output:\n```\n    v = env.cst(((disp2<<16)+disp1)<<1,24)\n   ", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tJRPropertiesMap properties = new JRPropertiesMap();\n\t\t\tproperties.load(stream);\n\t\t\treturn properties;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JRRuntimeException(e);\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n}\n\nPlease complete the code by writing the missing methods and variables.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (true, true, 0", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def run(self):\n        self.put(AcoustidSubmissionThread(self.queue, self.progress_cb))\n        self.put(LookupResult(self.queue, self.queue, \"error\"))\n        self.start()\n        self.join()\n       ", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       foreach (var rpc in PhotonNetwork.RPCs)\n        {\n            if (!RPCs.Contains(rpc.Key))\n            {\n                additionalRpcs.Add(rpc.Key);\n            }\n        }\n        RPCs = new List", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\nrootLayout.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                // Handle button click\n            }\n        });\n        return rootLayout;\n    }\n    @Override\n    public void onResume() {\n        super", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.dot(op_cc, self.symmetry.op_scc[s])\n            if time_reversal:\n                op_cc = np.dot(op_cc, np.eye(3, dtype=int))\n            else:", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\tforeach (ILNode child in block.Body) {\n\t\t\t\t\t\tif (child is ILBlock) {\n\t\t\t\t\t\t\tFlattenBasicBlocks((ILBlock)child);\n\t\t\t\t\t\t} else {\n\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll != ragdoll) {\n\t\tif (ragdoll) {\n\t\t    //set the body to be a ragdoll\n\t\t    //this will cause the body to lose its animator and become a simple physics object\n\t\t   ", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.name = \"Fracture\"\n        self.top = ClassFactory( [InterfaceNodeSet, InterpolatedNodeSet] )\n        self.polygon_region_ids = [", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 0] = (byte)(num & 0xff);\n        out[outOff + 1] = (byte)((num >> 8) & 0xff);\n        out[outOff + 2] = (byte)((num >> ", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                    getMatcher(), null ) );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   return slice_json\ndef transform_values_holder_xml_json_to_json(values_holder_xml_json, format = None):\n    comments = []\n    values_json = collections.OrderedDict()\n    for value in values_holder_xml_json:\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n          }\n        }\n     ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   from clientBase import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftTo", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, \"ID_GROUP = \" + newId, \"ID_GROUP = \" + deleteId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE_NAME, \"ID_GROUP", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.DestroyMemory(m_ptr);\n                }\n            }\n            m_ptr = IntPtr.Zero;\n        }\n        #endregion\n    }\n}", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n# ... rest of the settings file ...\n```\nPlease complete the code by filling in the missing values for the various settings.", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Any(pi => pi.Item == itemName))\n\t\t\t{\n\t\t\t\tvar toRemove = queue.Find(pi => pi.Item == itemName);\n\t\t\t\tif (toRemove != null)\n\t\t\t\t{\n", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.infoLabel.setText(infoText)\n        \n    def callNewFile(self):\n        import fileTypes\n        fileTypes.showFileTypes()\n        \n    def callNewDir(self):\n        import fileTypes\n        fileTypes.showFileTypes()\n        \n", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%\\1', code)\n        self.outputs[0].write(code)\n        self.outputs[0].close()\n        return self.outputs[0]\nclass task_gen(object):\n    def __", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n\nif __name__ == '__main__':\n    rospy.init_node('planning_server', anonymous", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx - reactorExtent ] + chemical[ 0 ][ idx - reactorExtent - 2 ]\n\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.nextAdapter().of(type));\n                break;\n        }\n    }\n   ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn base.ReceberAutoIncremento(qs, entity);\n\t\t}\n\t}\n}\n```\nPlease note that this is a generated code and you should not try to modify it. Also, you should fill in the appropriate namespace and class name according to your needs.", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object original, object target, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic System.Type Returned", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config([\"ntp authentication-keyid\", \"32\"])\n\n    def undo_config_ntp_auth_keyid_by_cli(self):\n        \"\"\"Undo ntp authentication keyid bye the way of CLI\"\"\"\n       ", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           check_node(component.location, editing_user, None, editing_user, None, None, editing_user)\n        # Verify that the ancestor nodes were last edited by the user who made the change\n        for block in [component, child, sibling]:\n            check_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch, start, length);\n        updateWithCharBuf();\n        digest.update((byte) 0);\n        digest.update((byte) 0);", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['op'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['op'],", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            // Try to find the type from the parameter names and sample direction.\n            foreach (var parameter in parameterNames)\n            {\n                type = ResolveType(api, controllerName, actionName, parameter, sampleDirection, out formatters);\n                if (", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_keypressed(entry, event)\n            return True\n        else:\n            return False\n    def _key_up(self, path, model, column):\n        if path:\n            iter = model.get", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, beanProperties);\n        }\n        return beanProperties;\n    }\n}\n```\nThis code is a post-processor for Spring's `BeanFactory` that upgrades old-style Spring overrides that add location paths to the `repository-", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if line.strip():\n                    raise AnsibleError(\"htpasswd file contains blank lines\")\n        finally:\n            if f:\n                f.close()\n    if os.path.exists(path):\n        if state == \"present\":\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var sp = Principals.getCurrentSecurablePrincipal();\n        var aclKey = spm.lookup( sp );\n        if ( !directedAclKeys.getType().equals( PrincipalType.USER ) ) {\n            ensureReadAccess( aclKey );\n", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       if element.text:\n            self.verify_text(element)\n        if element.extra_text:\n            self.verify_extra_text(element)\n        for child in element.findall('.'):\n            if child.text:\n                self.verify_text(child", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\ndef _get_StringIO():\n    return StringIO()\ndef _get_elements_by_tagName_helper(node, name, list):\n    for child in node.childNodes:\n        if child.nodeType == Node.ELEMENT_NODE:", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tdecodeKeyLocator\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator.getKeyLocator", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).updateCooldown(delta);\n        }\n    }\n    @Override\n    public void draw(GameContainer container, Graphics g) throws Slick", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       GameEngine.model().getGame().addPlayer( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    // show dialog\n    show();\n  }\n  public void", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Bad Request: %s\" % r.data.decode(\"utf-8\"))\n    filename = get_filename(r.headers)\n    with open(filename, \"wb\") as f:\n        f.write(r.data)\n        if progress:\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   from cobra.flux_analysis.production_envelope import production_envelope\n\nThe code is a part of the `cobra.flux_analysis` module and is used to calculate the production envelope of a metabolic network. The `production_envelope` function", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(path__startswith=pootle_path,\n                                            submitted_by=user)\n    def get_units_for_translation(self, translation):\n        \"\"\"Returns units that need to be translated.\n        :", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='Subject',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def get_table_entry(self, dpid):\n        return self.pox_switch.get_table_entry(dpid)\n\n    def get_flow_table_entry(self, dpid):\n        return self.pox_switch.get_flow_table", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    writeProps();\n  }\n  \n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe item to remove from the list\n   */\n  public synchronized void remove", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            // Checked for any kind of friendship\n            if (src.Friends.Any(", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return getMaxTradePeriodDate().getTime() / 2;\n\n    }\n    public boolean isHalfTradePeriod() {\n        return getState().getPhase() != null && getState().getPhase().ordinal() >= Phase.HALF_RE", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a;\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tstatic Node FindAny(Node p) {\n\t\tif (p == null) return null;\n\t\tNode a = LeadingAny(p);\n\t", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tinternal void OpenWiimoteDeviceHandle(string devicePath)\n\t\t{\n\t\t\tmHandle = new Safe", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tMsk", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           if (_subAllocatorSize == 0)\n            {\n                //ArrayFactory.BYTES_FACTORY.recycle(heap);\n                _heap = null;\n                _heapStart = 1;\n                // rarfree(HeapStart);", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n\\end{code}\n\nThis code is a part of CFME's Intelligence module, which provides a way to manage chargeback rates for various resources (compute, storage, etc.) in the VMDB. The code defines a `ComputeRate` class, which represents", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, dest, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.retune(None)\n\tdef retune(self, foo):\n\t\tif self.frontend:\n\t\t\tself.frontend.tune(foo)\n\t\telse:\n\t\t\tself.session.nav.playService(self.session", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                TcpAddress.TcpAddressMask filter = new TcpAddress.TcpAddressMask(filterStr);\n                tcpAcceptFilters.add(filter);\n            }\n        }\n    }\n}\n\\end{code}\n\nThis is the `Options`", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n            }\n            return fout.ToArray();\n        }\n        \n        private void ReadPdf() {\n            xref = new int[10];\n            xrefInh = new int[1", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus'))\n        s", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   def massey_product_printout(self, filename):\n        output = \"\"\n        map_list = self.get_E_2_page().get_dual_resolution(self.options).get_map_list()\n        for index in xrange(len(map", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_nested_enum\\\".\",\n                \"optional_nested_enum: 123\");\n        }\n    }\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t\tdirty();\n\t}\n\t@Override\n\tpublic Set<Object> keySet() {\n\t\treturn new KeySet( map );", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n```\nThis code is a log writer for the Arya Auction System. It writes log entries to a file", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n    @api.constrains('attendance_ids')\n    def _check_attendance_ids(self):\n        for employee in self:\n            for attendance in employee.attendance_ids:\n                if attendance.check_out and not attend", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(form.grdResults().getRows().size() - 1);\n\t\tif (parentRow == null)\n\t\t{\n\t\t\tparentRow = form.grdResults().getRows", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        internal SystemListView Item { get { return sw; } }\n    }\n    public class SystemListViewColumn\n    {\n        readonly string title;\n        readonly int width", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "   def on_destroy(self, window, event):\n        \"\"\"Called when the window is destroyed\"\"\"\n        self.terminator.unregister_window(self)\n        self.config.options_set(self.terminator.get_options())\n        self.config.save", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\" + Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshal", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\treturn base_type != null && base_type.IsTypeOf (\"System\", \"ValueType\");\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext line of code:\n\t\t\t\treturn base_type", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\nPlease help me complete the code by adding the missing methods and properties.\nI have provided the necessary comments to help you understand what each method and property does.\n\nNote: The `Evidence` property", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.version = protocol.version\n        self.ciphers = protocol.ciphers\n        self.options = protocol.options\n        self.certs = protocol.certs\n        self.key = protocol.key\n        self.ca_certs = protocol.ca_cert", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::MonoDevelop.Components.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.checkbuttonWhiteSpaces.Label = global::Mono.Un", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   notebooks[\"board\"].set_current_page(0)\n    headbook.set_tab_reorderable(True)\n    headbook.connect(\"switch-page\", callback)\n    headbook.show()\n    mainvbox.show()\n    return widgets\n", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),\n    \"Close-Tab\": QKeySequence(Qt.CTRL + Qt.Key_W),\n    \"Close-All-Tabs\": Q", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return getModel() != null && getModel().isReadOnly();\n}\n\n}\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return enc;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2 ()\n\t\t", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += CDRSerializer.getMaxCdrSerializedSize(current_sum);\n\t    \n\t    return sum;\n\t}\n\t\n\t\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      String value = java.GetValue(\"JavaHome\");\n      if (value == null)\n        return null;\n      return value.ToString();\n    }\n    private static String GetJreHome(String javaExe)\n    {\n      String home = null", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l.strip()\n                if comment == name:\n                    return [comment, l]\n                else:\n                    comment = None\n        # attempt to find job by name\n        if job is not None:\n            for l in self.lines:\n                if l.", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "mesh = bpy.data.meshes.new('Mesh')\nmesh.from_pydata(data)\n```\nPlease complete the code by filling in the missing parts.\n\nNote:\n\n* `MeshModifierCommon` is a base class for all mesh modifiers", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n    private static int peptideLengthIndex(int peptideLength) {\n    // ...\n}\n\n    private static int peptideLengthFromIndex(int index) {\n    // ...\n}\n\n    private static void buildAllelePeptideLikelihoods", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.contains(1));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, choice):\n        pass\n\nI have a question regarding the code. How do I make the `iface` variable a command-line argument?\n\nI have tried adding `iface = sys.argv[1]` inside the `main` function, but it gives me", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If the type is not found in the cache, check if it is a global type\n                // and if it is, add it to the cache\n                if (isReturnAllTypes()) {\n                    QName qname = new QName(targetNamespace, sdoTypeName);\n                ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': False})\n    def holidays_first_validate_notificate(self", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #region IGridBase Members\n        private void DoubleClickHandler(object sender, MouseButtonEventArgs e)\n        {\n            if (e.Button == MouseButton.Right)\n            {\n                var row = this.", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0}: {1}\", mixerLine.dwLineID, Name);\n        }\n    }\n}\n\n", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainObject.getCareContext();\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\treturn domainObject;\n\t}\n}", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", *opts],\n            env=env,\n            verbose=verbose)\n        build_end = time()\n        elapsed = build_end - build_start\n        if elapsed > 30:\n            notify_build_done(elapsed", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tif (estP > 0) {\n\t\t\t\t// For positive rules: discard all negatives, which are\n\t\t\t\t// at the same time considered to be positives with confidence of 1\n\t", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, Module.GetStashDiffFiles(gitStash.Name));\n            }\n        }\n        private void ResizeStashesWidth()\n        {\n            var stashesWidth = Stashes.Width;", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   print(st_ARCH_STATUS_SUCCESS)\n    print(st_ARCH_ILLEGAL_BUFFER_ID)\n    print(st_ARCH_BEAM_ELEMENTS_BUFFER_ID)\n    print(st_ARCH_BU", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\n        if (o instanceof AuthScope) {\n            final AuthScope that = (AuthScope) o;\n            return match(that);\n        }\n        return false;\n    }\n    @Override\n    public", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(asyncResult);\n            return ((int)(results[0]));\n        }\n    }\n}\n```", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static BigDecimal[] erstelleMengenAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto>", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "eai = EncryptedArchiveIndex(path)\n\nExplanation:\nThe code is a Python script that provides a command-line interface for encrypting and decrypting archives using the Cryptostasis library. The script takes various arguments to specify the archive index file, input and output files", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.bit_ss, self.bit_es = self.miso_bits[7][1], self.miso_bits[0][2]\n    self.putx([65, ['R1: 0x%02x' % res]])\n    def put", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    }\n}\n```\n\n\n\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance(new Object[0]);\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                cd.last = o;\n                cd.viewerFrame.", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "- name: Get information on the certificate\n  openssl_certificate:\n    path: /etc/ssl/crt/ansible.com.crt\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n    csr_path: /", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (%sSlots::iterator i = s.begin(); i != s.end(); ++i) {\" % typename, file=f)\n\nI hope this helps! Let me know if you have any questions.", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # Split the interval into a range below and above 0xFFFF. This corresponds\n    # to the number of bytes required to represent the first and the last character\n    # of the number set.\n    interval_1word, intervals_2word = get_contigous_intervals(", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t\tExpect(29);\n\t\t\tif (t.pos > la.pos)\n\t\t\t sym.attrPos = new Position(la.pos, t.pos, la.col);\n\t\t} else SemErr(\"bad attribute\");\n\t}\n\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc_list.append(edi_doc)\n        return edi_doc_list\n    def _edi_get_product(self, cr, uid, product_id, context=None):\n        # todo: refactor into common place for purchase/sale, e", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n                nameMap.put(name, permissions);\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private void assertNotNull(Object obj)\n    {\n        assertTrue(\"Expected object not", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   dev = Device(deviceToken)\n    dev.check_inspection()\n    dev.notification_postDevicetoken(loginId, password)\n    dev.newUser(loginId, password)\n    print dev.mainmenu()\n    print dev.endTutorial()\n", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "```\nusage: python [options] <dataset>\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c, --calibrator CAL   the name of the calibrator [default: 1934-638]\n ", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (Parent is Mobile)\n            {\n                (Mobile)Parent.AddItem(this);\n            }\n            else\n            {\n                Parent.AddItem(this);\n            }\n        }\n    }\n}\n\\end{code}\n\nPlease help me to complete", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices) {\n            // Check if device is already in the list\n            Tuner tuner = tuners.get(device);\n            if (tuner != null) {\n                // If the tuner is already in the list, check if it's live", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    if (lastSeenVersion < Version.DAY_BY_DAY_STICKERS) {", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 4) {\n        throw new RuntimeIOException(\"Bad line \" + lineCount + \" in \" + mapping + \": \" + line);\n      }\n      Entry entry = new Entry();\n      entry.regex = Arrays.asList(split[1], split", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       env = SCons.Util.Environment()\n        env['ENV'] = {'TEXINPUTS': ['-interaction=nonstopmode'],}\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n       ", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   from mapnik import *\n    from paths import inputpluginspath\n    from paths import fontscollectionpath\n    import printing\n    print(bootstrap_env())\n    print(inputpluginspath())\n    print(fontscollectionpath())\n    print(printing.renderer)\n   ", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   if self.want.description != self.have.description:\n        raise F5ModuleError(\n            \"The description of the monitor cannot be changed\"\n        )\n    if self.want.security != self.have.security:\n        raise F5ModuleError(\n           ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   class MethodAddView(AutomateExplorerView):\n        title = Text('#explorer_title_text')\n        location = BootstrapSelect('cls_method_location', can_hide_on_select=True)\n        inline_name = Input(name='cls_method_name')", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           result = null;\n        }\n        return result;\n    }\n    public void addEventListener(IEventSubscriber subscriber) {\n        // do nothing\n    }\n    public void removeEventListener(IEventSubscriber subscriber) {\n        // do nothing\n    }", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\", \"title\": \" \"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self, mock_request", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           env['MT_EMBED_MANIFEST'] = 1\n            return True\n        else:\n            return False\n    else:\n        return False\ndef embedManifestExeCheck(target, source, env):\n    \"\"\"Function run by embedManifestExeCheck", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           // 1FTIMQN: ITPCORE:WIN - clients required to do too much iteration work\n            if (shouldPerformResourcePruning()) {\n                resources = pruneResources(resources);\n            }\n            // 1FV0B3Y: ITP", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\tsuper.init(smi, sdi);\n\t\t\n\t\treturn true;\n\t}\n}\n\n\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('1230+5', last) == (d(2014,1,30, 22,30), d(2014,1,31, 12,30))\n    assert f('1230-5", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\") || swalkingrange.Contains(\"m\") || swalkingrange.Contains(\"h\"))\n                swalkingrange = swalkingrange.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestError(\"Guest doesn't support suspend.\")\n    def verify_guest_suspend_log(self, **args", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n        service.shutdown();\n    }\n}\n\nPlease help me complete the code.\n\nAnswer:\n\nHere is the completed code:\n\npackage org.zeromq;\n\nimport static org.hamcrest.CoreMatchers.is", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value & 0x7F) | 0x80);\n\t\t}\n\t}\n}\n```\nThis code is a custom task in a build project that takes a few parameters and modifies the assembly files to make the public key visible to the", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.status.append(descr)\n        self.fm.env.status.append(\"Extracting...\")\n        self.fm.env.status.append(\"\")\n        self.fm.env.status.append(\"\")\n        self.fm.env", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringType ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, typeof (COMTest));\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t\t\tobjCOMTest.", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       repo = self._setup(da, Action.ACCEPTED, Action.PENDING)\n        self.assertEqual(repo.changesets.count(), 3)\n        avs = AppVersion.objects.all()\n        flagdata = flags4appversions(avs)", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       return highlight(\n            [\n                (Token.Literal, \"TokenListJoin\"),\n                (Token.Literal, str(len(self.toks))),\n                (Token.Literal, str(len(self.cols))),\n            ],\n            formatter,\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn super.doStartTag();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    string text = n.Inner", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                   m_key[i] = new ExodusActivation();\n                    else\n                    m_key[i] = new KeyActivation();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void RemoveKey( Mobile from )\n\t\t", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((ChangeOfServiceVo)beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n            new Version(1, new int[]{0, 0, 0, 0}, new ECBlocks[]{new ECBlocks(2, new ECB[]{new ECB(3, 1), new ECB(3, 2)}}, new ECBlocks(3, new", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tIManaItem manaItem = player.getItemStack().getItem();\n\t\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n\nPlease provide the file path where you want to save the code, and I will update the code accordingly.", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but was given {1})\",\n\t\t\t\t\tLightCount, NextFrame.PixelCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = p.readInt();\n            response.add(dc);\n        }\n        return response;\n    }\n}\n\nThe code above is a custom RIL implementation for Samsung BCM devices, which handles", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Calculate vertex position\n                Vector3 vertex = new Vector3(x * xPixelsPerTile, 0f, (y * yPixelsPerTile) * ", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\tclient.call(API_METHOD_ADD, new Object[] {testInt1});\n\t\t\t\n\t\t\trawResult = client.getResult();\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\nNext line of code:\n\t\t\t\treturn new int[0];\n\t\t\t}\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        }\n        else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException e) {\n", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\ndrawgfx(bitmap, Machine.gfx[5],\n        16 + (~stactics_display_buffer.read(i) & 0x0f),\n        16,\n        0, 0,\n         pixel_x, pixel_y,\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(spell.From.To2D()) <= spell.Range &&\n                                    minionPrediction.Hitchance >= spell.MinHitChance)\n                                    result.Add(target);\n                                }\n                            break;\n                        case", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(y)) {\n            if (z.getNodeType() == NodeType.MEASURED) {\n                path.add(z);", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is Drawable)\n                    {\n                        var found = child as Drawable;\n                        if (found != null)\n                        {\n                            return found;\n                        }\n                    }\n                }", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        FinancialEntityAttachment other = (FinancialEntityAttachment) other;\n        if (description == null) {\n            if (other.description != null) {\n                return", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] != from)\n                        {\n                            mobiles[i].RevealingAction();\n                            Effects.SendMovingEffect(from, mobiles[i], 0xF0D, 7, 0, false, false", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, user);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Kick(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tuser.SendMessage(\"You have been kicked", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n}", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(m", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n        this.j.writeLock().lock();\n        try {\n            this.i.add(new NetworkManager.QueuedPacket(packet, (GenericFutureListener[]) null));\n        } finally {\n            this.j.writeLock().unlock();\n        }\n   ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n    def read_header(self):\n        \"\"\"\n        read the header of the j-file\n        \"\"\"\n        self.nper = 0\n        self.nz = 0\n        self.nf = 0\n        self.nfinc = 0\n       ", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      String names = recipients.stream().map(Recipient::toShortString).collect(Collectors.joining(\", \"));\n      return context.getString(resourceMany, names);\n    }\n  }", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GOONK_BUILD_ID\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in sorted(iteritems(type_paths)):\n                for test in tests:\n                    source_files[path] = test_cls(tests_root, path, test)\n        return self\n    def __str__(self):\n        return json.dumps(", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.clearCache();\n        }\n    }\n    private CompileTimeStrategy createCompileTimeStrategy(File script) {\n        return new CompileTimeStrategy(script);\n    }\n    private CompilerConfiguration createCompilerConfiguration", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           }\n        }\n    }\n}\n\nThis code is a base class for a network layer, it provides a way to wrap a network layer with a simpler dynamic base class, making it easier to implement in a class and for python. It also provides a way to override the read, write, close", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tif (this.getClass().equals(obj.getClass()))\n\t\t{\n\t\t\tOrderInvestigationForStatusChangeVo other = (OrderInvestigationForStatusChangeVo)obj;\n\t\t\treturn compareValues(other.getOrdInvCurrentStatus(),", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 3);\n    }\n    private void updateAll() {\n        stackDao.updateAll(asList(stacks));\n    }\n}", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new Parameter();\n        parameter.setName(\"depth\");\n        parameter.setValue(depth);\n        pf.addParameter(parameter);\n        crawlParameters.add(parameter);\n        //EXCLUSION REGEXP\n        parameter = new Parameter();\n", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tswitch (kind)\n\t\t\t{\n\t\t\tcase LNodeKind.Node:\n\t\t\t\t// [$capture] (...)\n\t\t\t\tif (!AttributesMatch(candidate, pattern, ref captures, out unmatchedAttrs))\n", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   extendedWillHit += MinionManager.GetMinions(objAiBase.Position, q.Range).Count();\n                    extendedFarmLocation = objAiBase.Position;\n                }\n                int shortenWillHit = MinionManager.GetMinions(q", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(new GPContractMenu(loader, form, appForm, factory, context, runtimeSize));\n\t}\n\tpublic void hide()\n\t{\n\t\tif(form == null)\n\t\t\tthrow new RuntimeException(\"Invalid form\");\n\t\t", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        match = re.search(pattern, line)\n        if match:\n            return package_name\n    return False\ndef compute_python_version():\n    \"\"\"\n    Compute the Python version.\n    \"\"\"\n    python", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': (('name', 'value', 'v'),)\n        })\n        f = Form(r)\n        with f.subs.new() as sub:\n            sub.value = 5\n        self.assertEqual(sub.v, 5)\n       ", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b))) == Sum(x, (x, a, b))\n    assert simplify(Sum(x, (x, a, b))) == Sum(x, (x, a, b))\n    assert simplify(Sum(x,", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                this.InitializeRemove(action, changedItems, startingIndex);\n            }\n        }\n        private void InitializeMoveOrReplace(NotifyCollectionChangedAction action, IList", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           StringReader reader = new StringReader(writer.toString());\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n            writer.close();\n            reader.close();\n            objectToXMLDocumentTest(testDocument);\n       ", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                default:\n                    throw new QueryParserException($\"Invalid parameter {Token.Text}\");\n            }\n        }\n        private string ParamEnum(string param)\n        {\n            switch (param", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "#endif\n\t\t\t\tif (ide.width == 0 || ide.height == 0) {\n\t\t\t\t\tthrow new System.ArgumentException (\"Invalid Argument\", \"stream\");\n\t\t\t\t}\n\t\t\t\tif (ide.colorCount > 25", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR target to the successor of the RET blocks found\n                // in the subroutine\n                JSR.addToSuccessor(this);\n            }\n        }\n        // mark the current block as belonging to the given subroutine\n        addToSubroutine(", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of_this_method = (UnityEngine.Ray)typeof(UnityEngine.Ray).CheckCL", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       currImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImage", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   self.transport.gss_kex_used = True\n    self.transport._activate_outbound()\n    self.transport._send_message(Message())\n    self.transport._expect_packet(MSG_KEXGSS_CONTINUE,\n                                ", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setUserObject(overallNodeName);\n        }\n        if (connectionData != null) {\n            DatabaseNode databaseNode = nodeMap.get(connectionData);\n            if (databaseNode != null) {\n                databaseNode.setUserObject(connectionData.getConnection", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or (0.0, 0.0)\n        contract_ids = [payslip.contract_id.id]\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   cl1h, cl2h, cl = integrate_halo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zsarr", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 10;\n        d.height = font.getSize();\n        return d;\n    }\n}\n\n// $Log$\n// $Revision$\n// $Date$\n// $Author$\n// $Id$\n", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "f1=lambda x1,y1,z1,x2,y2,z2:np.array([[np.dot(x2,x1),np.dot(x2,y1),np.dot(x2,z1)],\\\n                                      [", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t}\n}\n\nI have a problem with the code, I am not sure how to handle the connection state changes, I am getting an error when I try to connect to the rithmic server, I am not sure if the error is caused", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "           if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[1]['low']", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\n\nPlease help me to complete the code.\n\nAnswer:\n\nHere is the completed code:\n\nimport android.util.Log;;\nimport protocol.Contact;\nimport protocol.Protocol", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (rsp.isOkey()) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t\trsp = tag.readRecord(sfi);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(UInt16(self, \"crc16\", \"Archive CRC16 (from byte 4 on)\"), hexadecimal)\n    yield filesizeHandler(UInt16(self, \"head_size\", \"Block size (from byte ", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n}\n\nPlease modify the code according to your requirements.", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   server = wsgi.Server(('0.0.0.0', 8070), my_crazy_app)\n    server.start()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model()\n\t\tmodel.loadmodel( sys.argv[ 1 ] )\n\t\tmodel.initialize()\n\t\tprint model.bic_score( 'field1' , 'field2' )\n\t\tprint model.score()\n\telse :\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        }\n        public static void CheckResult(ref", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_value, displayname, desc)\n        return entries\n    #---------------------------------------------------------------------------\n    def parse_integer(self, s: str) -> int:\n        \"\"\"\n        Parses an integer value", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No Modules found in the directory\");\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Unable to locate the FOG Service directory!\");\n            }\n        }\n        private void SubClassMenuItem_Click(object sender, EventArgs", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void AfterStoreAdd(Store item)\n        {\n            this.Items.Add(item", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int tri = 0, vi = 0, ci = 0, ti = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    beginTriangle(this.textureArray[textureHash]);\n                    insideBegin", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n    return response\ndef handle_404(request, template_name='404.html'):\n    \"\"\"\n    Decorator to handle ", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        Debug.Assert(d.ConnectionLifetimeExpired());\n                    }\n                   ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var] * len(var)\n    return var\ndef _round_shape(shape, radius, resolution):\n    \"\"\"Round shape to nearest integer.\"\"\"\n    # Round to nearest integer.\n    shape = np.round(shape * (resolution[1] /", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "qn = QUEST.qn\nst = player.getQuestState(qn)\nif not st : QUEST.onTalk(player)\nelse : QUEST.onEvent(player,st)\n```\n\n\n\n\n\n\n\n\n\n\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - (double)num * 60 + (double)num1) * 100);\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = -", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   def __str__(self):\n        return self.name if self.name is not None else \"\"\n\n    def __repr__(self):\n        return \"cobra.Model(\" + repr(self.name) + \")\"\n\n    def __eq__(self, other):\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.beans.TumourGroupListVoBean bean = (ims.clinicaladmin.vo.beans.TumourGroup", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setAnimationListener(new AnimationListener() {\n            public void onAnimationEnd(Animation animation) {\n                // animation ended, do something\n            }\n            public void onAnimationRepeat(Animation animation) {\n                // animation repeated, do something\n            }\n            public void", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (PartnerInterestRow.FieldKey > HighestNumber)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n        }\n        #endregion", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tthis.predict(pssm, scoresSol);\n\t}\n\t\n\t\n\tprivate void predict(Pssm pssm, int[] scoresSol)\n\t{\n\t\tif (this.isTrained)\n\t\t{\n\t\t\tthis.classifier.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
