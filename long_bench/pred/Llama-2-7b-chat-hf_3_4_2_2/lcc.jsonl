{"pred": "\t\t\t\tm_Participants[i].CloseGump( defs[i] );\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic void AddParticipant( Mobile participant )\n\t\t{\n\t\t\tm_Participants.", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tB, n, supernodes, exposed_nodes, A, C = self.contracting_phase(A, n, supernodes, exposed_nodes, A, C, B)\n\t\t\tif B:\n\t\t\t\tA, A = self.contracting", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        # Open the file for reading\n        # Check the file pointer\n        # Check the file pointer\n        # Check the file pointer\n        # Check the file pointer\n        # Check the file pointer\n        # Check the file pointer", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   unisubs_page = UnisubsPage()\n    unisubs_page.open_video_page(video_id)\n    unisubs_page.open_info_page()\n    unisubs_page.add_video_to_team(team_name)", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\twriter.addAttribute(\"value\", (OLValue) value);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (value instanceof OLStyleValue) {\n\t\t\t\t\twriter.addAttribute(\"value\", (OLStyleValue) value);", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for line:\n            ret += line\n        return ret\n    def __len__(self):\n        return len(self.question)\n    def __len__(self):\n        return len(self.question)\n    def __len__(self):\n        return len(self.question)", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Location = Location;\n                    break;\n                case 3:\n                    mob.SendMessage(\"Enter a name for the new runebook:\");\n                    mob.Prompt = new SR_NewRuneName();\n                    mob.Prompt.RuneName", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           s.println(\"Chain:\");\n            for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n                s.println(\"  \");\n            }\n            s.println(\"***\");\n            s.println(\"End of certificate chain...", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = (JESpace) spaceRegistar.get (name);\n            sp.init (path);\n            sp.sl = (SpaceListener) spaceRegistrar.register (name, SpaceListener.getSpaceListener ());\n            sp.sl.addListener (new SpaceListener", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@Override\n\tpublic void consumeAlchemize() {\n\t\tif (item != null) {\n\t\t\titem.", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       response = self.dispatcher.dispatch(environ, environ['REQUEST_METHOD'] == 'POST')\n        start_response('200 OK', [('Content-Type', 'text/xml')])\n        return [response]\nclass SimpleXMLElement(SimpleXML):", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeat('%s');'\";\n        self.webview.execute_javascript(mark)\n    def __reply_status(self, status):\n        self.webview.reply_status(status)\n    def __link_clicked(self,", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def run_subprocess(self, *args):\n        return subprocess.run(**args)\n    def run_subprocess(self, *args):\n        return subprocess.run(**args)\n    def run_subprocess(self, *args):\n        return sub", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.IsSubsetOf (b), \"IsSubset-Different\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, b), \"!ReferenceEquals\");\n\t\t}\n\t\t[Test]\n\t\n\t\tpublic", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return trust_managers = TrustManagerFactory.getTrustManager(trust_managers)\n    # FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME FIXME\n    #\n    #", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       List postmasterPasswordParameters = new ArrayList();\n        postmasterPasswordParameters.put(\n            \"postmasterPassword\", \"postmasterPassword\");\n        postmasterPasswordParameters.put(\n            \"postmasterPassword\", \"domain.postmaster.password\");\n        request.setAttribute(\"postmasterPassword", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n    async def __wait_for_datastream(self) -> None:\n        await self.__datastream_transport.wait_for_ready()\n```\n```\nasync def __wait_for_datastream_end(self) -> None:\n        await self.__", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t//store.SetValue (iter, columnBool1, option1);\n\t\t\t\t//store.SetValue (iter, columnBool2, option1);\n\t\t\t\t//store.SetValue (iter, columnBool1, option1);\n\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            argValues[i] = getMessage(defaultMessages, locale, args[i].getKey());\n        }\n        return argValues;", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\treturn getLoadedData().get(id).serialize();\n\t\t\t}\n\t\t}\n\t\t), TIMING(new ConfigFile<Long, TimedData>(TimedData.class)\n\t\t{\n\t\t\t@Override\n\t\t\tpublic", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tparent.getShell().display(mgr.createForm());\n\t}\n\tpublic void updateAccelerators() {\n\t\t// Update the accelerators\n\t\t// Update the accelerators\n\t\t// Update the accelerators\n\t\t// Update the accelerators\n\t\t//", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n                }\n            }\n        }\n    }\n}\n\nPlease let me know if you have any questions or need further clarification.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       # ...\n    def __init__(self, *args, **kwargs):\n        self.identity_map = _identity_cls()\n        self.mapper = _mapper_mapper()\n        self.object_map = object_mapper = _object_mapper(self", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(Map.Entry<String, List<IField>> entry : name2Field.entrySet()) {\n\t\t\tfinal List<IField> named = entry.get(shortName);\n\t\t\tfor(IField f : f) {\n\t\t\t\tfield2", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `r'/foo/*'` in conjunction with using the decorator.\n    \"\"\"\n    def wrapper(self, *args, **kwargs):\n        self.write(\"Hello, world!\")\n    return method(self, *args, **kwargs)\n    return None\nclass", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t\t\n\t\tprotected internal void AddView (View v)\n\t\t{\n\t\t\tif (Controls.Count > 0)\n\t\t\t\tControls.Add (Views [0]);\n\t\t\tViews.", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   WigleDownloader = WigleDownloader( WigleDownloader.wigle, *args )\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (i.SkillBonuses.GetBonus(0) > 0)\n                {\n                    return GetNameForAttribute(i.SkillBonuses.GetBonus(0));\n                }\n                }\n            }\n            return null;\n", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       # Gather data about the build for each platform\n        # and create a list of download links for each platform\n        # and create a list of download links for each platform\n        # and create a list of download links for each platform\n        # and create a list of download links for each platform\n", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (objectID!=null && objectID.equals(objectID.getObjectID())) {\n\t\t\t//TODO: check if the objectID is allowed in the context of the given project and issue type\n\t\t\t//      and return false if not\n\t\t\t//     ", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is MethodCallExpressionSyntax methodCall ) {\n                    ArgumentSyntax argumentNode = argument;\n                    MethodCallSyntax methodCallNode = (MethodCallSyntax) argument.Parent;\n                    MethodInfo method =", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(2, len(split_test.children))\n        # Change the user_partition_id.", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Add the font dictionary\n            // Add the font dictionary\n            // Add the font dictionary\n            // Add the font dictionary\n            // Add the font dictionary\n            // Add the font dictionary\n            // Add the font dictionary\n            // Add the font dictionary\n            // Add the font dictionary\n           ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = new GraphNode();\n\t\t\t\t\t\tcgn.depth = 0;\n\t\t\t\t\t\tcgn.x = (int) (lib.getX(cell) * xScale + xoff);\n\t\t\t", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(new ListenableFutureTask<Bitmap>(callable));\n        return;\n      }\n      return null;\n    }\n    private Bitmap loadPage() {\n      ListenableFutureTask<Bitmap> task = new ListenableFutureTask<Bitmap>();", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                    }\n                    down = down;\n                    msgTF", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   # ...\n```\nI's a lot of code, but I'll break it down for you:\n\n1. `from functools import partial`: This line imports the `partial` function from the `functools` module.\n2. `from widgetastic_managei", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n        protected void OnPreRender(object sender, EventArgs e)\n        {\n            base.OnPreRender(e);\n            if (!DesignMode)\n            {\n                base.OnPreRender(e);\n            }", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect[\" + getId() + \"]\";\n        return \"Effect[\" + getSpecification() + \"]\";\n        return \"Effect[\" + getSpecification() + \"]\";\n        return \"Effect[\" + getSpecification() + \"]\";\n        return \"Effect[\"", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   assert len(list(store.handle_indicators_search(token)))\n    assert len(list(store.handle_indicators_search(token, {'indicator': 'example.com'})\n    assert len(list(store.handle_indicators_search(", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   self.assertEqual(person.employer.owner)\n    self.assertEqual(person.employer)\n    self.assertEqual(person.employer.employer)\n    self.assertEqual(person.employer)\n    self.assertEqual(", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           else:\n                self.plot(x, y)\n        else:\n            self.plot(x, y)\n    def plot(self, x, y):\n        self.plot(x, y)\n    def plot_im(self, x, y):\n        self", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               toScan.Add(path);\n            }\n            foreach (var path in toScan)\n            {\n                if (ignoredPaths.Any(x => x.IsNotNullOrWhiteSpace()))\n                {\n                    _logger.Debug(\"Ignoring path: {0}\",", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic void putAll(Map<? extends K, ? extends E> m) {\n\t\tfor (Map.Entry<K, ? super E> entry : m.entrySet()) {\n\t\t\tput(", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       pdt = getToolByName(self.context, 'portal_membership', None)\n        query = {'UID':uid}\n        cat = getToolByName(self.context, 'uid_catalog')\n        cat = getToolByName(self.context, 'uid", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\t\t\treturn;\n\t\t}\n\t\tpublic void SetID( int x, int y, int z )\n\t\t{\n\t\t\tm_ID = x;\n\t\t\tm_Z = z;\n\t\t}\n\t\tpublic void SetZ(", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): Parcel voice channel: {3}\");\n                    //m_log.DebugFormat(\"[FreeSwitchV", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tMessageBox.Show(\"Invalid Date\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t\tClose();\n\t\t}\n\t\tprivate", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Skip the line after the column headings.\n        next(file_handle)\n        # Make a list of data lists to hold the data for each column.\n       ", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return {'success': False}\ndef _check_group_or_org_auth(context, data_dict):\n    # Check if the user has permission to create a group or org\n    # If the user has permission to create a group or org\n    # then the user has permission to", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\texample.setValue(predictedLabel, outcomes[parentIndex]);\n\t\t\t\t// updating depth\n\t\t\t\tdepths[parentIndex] = depth + 1;\n\t\t\t\t// updating confidences\n\t\t\t\tconfidences[parent", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new SearchResults[0];\n        }\n        #endregion // Methods\n        #region ITranslationProviderLanguageDirection Implementation\n        // ITranslationProviderLanguageDirection Implementation\n        // ITranslationProviderLanguageDirection Implementation\n        // ITranslationProviderLanguageDirection Implementation", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           return 1;\n         }\n         return -1;\n      }\n   }\n   static class Not extends AbstractCharNode {\n      private final boolean[] _notSet;\n      private final IntSet _range;\n      private final IntSet _range2;\n      private final boolean", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     if (accessionNumber.equals(accessionNumber.substring(INCREMENT_START, INCREMENT_END)) && existingRequired) {\n        return ValidationResults.SUCCESS;\n      } else {\n        return ValidationResults.FAIL;\n      }\n}\n}", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"InvalidPassword\".Translate(newConn.PlayerIndex.ToString(CultureInfo.InvariantCulture)))\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)((ims.core.vo.beans.CatsReferralP", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   advanced()\nelse:\n    advanced()\ndef main():\n    main()\nif __name__ == \"__main__:\n    main()\nif __name__ == \"__main__:\n    main()\n    main()\nif __name__ == \"__main__:\n", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret;\n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```\ndef getPlotData( self ):\n    try:\n      typeName = str( request.params[ 'typeName' ] )\n    except:\n      return S_ERROR( \"Missing or invalid type name!\" )\n    retVal = self.__getUniqueKeyValues(", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in bBuilders)\n\t\t\t\tb.SetRallyPoints(rallyPoints);\n\t\t}\n\t\tvoid IBotRespondToAttack.RespondToAttack(Actor self, Actor attacker, Actor attackerA", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       // compile the plan\n        // and return the final plan graph\n        return plan.getPlanNodeList();\n    }\n    public List<AbstractPlanNode> compile(String sql, int paramCount, String joinOrder) {\n        return compile(sql, paramCount, joinOrder, partition", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Windows.Forms.Size(200, 21);\n\t\t\tthis.comboBox1.Size = new System.Windows.Forms.Size(200, 21);\n\t\t\tthis.com", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.BitsPerSecond = baud_bits;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.Parity = parity;\n\t\t\t", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.assertEquals(page.context['biggest'].object_list[0],\n                          self.channel)\n        self.assertEquals(page.context['feed_page'].object_list[0],\n                          self.channel))\n        self.assertEquals(page.context", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args()\n    #pprint.pprint(sys.argv)\n    #pprint.pprint(sys.stdin)\n    #pprint.pprint(sys.stderr)\n    #pp", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\tself.oldlist = dict(self.oldlist.items())\n\t\tself.oldlist = None\n\t\tself.oldlist = None\n\t\tself.oldlistIndex = None\n\t\tself.newlist = None\n\t\tself.newlist = None\n\t", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(fontX, fontY, fontX + font.GetFontHeight(fontX, size) + fontY), fontY + font.GetFontHeight(fontX, size) + font.GetFontWidth(fontX, size);\n            }\n        }\n        ", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results = (String []) results;\n}\n}\n}", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       # Sample points on a grid of 100x100 longitude grid points\n        sample_points = np.meshgrid(np.meshgrid(x_points, np.linspace(-180, 180, 100), 1), ", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.Clear();\n            Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket p = GetCurrentPacket();\n            if", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   print 'Hello World'\n\nif __name__ == \"__main__\":\n    build_dataset(build_dataset_dir)\n    # build_dataset(build_dataset_dir)\n    # build_dataset(build_dataset_dir)\n    # build_dataset(build", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        public virtual void Remove(TK key)\n        {\n            if (key == null) {\n                throw new ArgumentNullException();\n            }\n            _refSet[key] = 0;\n        }\n        public void Add(TK key)\n        {\n           ", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.SuspendLayout();\n            this.treeView1.TreeNodeStyle = TreeNodeStyle.None;\n            this.treeView1.NodeTooltips = true;\n            this.treeView1.NodeTooltipText = \"\";\n            this.tree", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( self, *args, **kwargs):\n        \"\"\"Create a null function with no implementation...\n        \n        This is a no-op function that simply returns None.\n        \"\"\"\n        pass\n        ...\n    ...\n    \"\"\"\n\n    def __init__( self,", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           baos.writeInt(emptyStreams.size());\n            baos.writeInt(emptyStreams.size());\n            baos.write(emptyStreams.toByteArray());\n        }\n        baos.writeInt(emptyStreams.size());\n        baos.", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   for (int i = 0; i < ticker.length; i++)\n                    {\n                        ticker[i].transform(toCircle);\n                        ticker[i].setTransform(toCircle);\n                        ticker[i].repaint();\n", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            var item = Subject.GetItems().Single();\n            var item.CanBeRemoved.Should().BeTrue();\n            var item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n       ", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n            }\n        }\n        private static async Task RecycleItems(ISession session, CancellationToken cancellationToken, CancellationToken cancellationToken)\n        }\n        private static async Task RecycleItems(ISession session, CancellationToken cancellationToken)\n        {\n            var", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\ndef main():\n    global imagefile, imagefile\n    imagefile = 'O' + cutimage + '.fits'\n    imagefile = 'O' + 'GALFIT_' + ' ' + ' ' + ' ' + ' ' + ' ' + ' ' + '", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n            }\n            lo[0] = i;\n        }\n    };\n    public static void init() {\n        segar_mem = new UBytePtr;\n        segar_mem.setAddress(0x10000);\n        segar_mem.set", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_location = CourseKey(self._course_dict['org'], self._course_dict['number']).make_public()\n    def _install_course_outline(self, course_outline_as_json):\n        \"\"\"\n        Install course outline as", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tfor(int i = 0; i < 10; i++) {\n\t\t\tif(safariConfig.getConfigurationSection(\"safaris.\"+i+\".dropchance\").getInt(\"chance.\"+i).equals(splitNumber[i]) ) {", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   # If the meter does not exist, do nothing\n    # If the meter does not exist, do nothing\n    # If the meter does not exist, do nothing\n    # If the meter does not exist, do nothing\n    # If the meter does not exist, do nothing\n    # If the", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(209, 17", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n            except:\n                self.ui_log.error(\"\")\n                self.ui_log.error(\"Error while running plugin %s\" % plugname)\n                self.ui", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.name = \"roomFullName\"\n    def getRoomFullName(self):\n        \"\"\" Session Room Full Name \"\"\"\n    def getRoomFullName(self):\n        \"\"\" Session Room Full Name \"\"\"\n    getRoomFullName.name = \"room", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                       parent.mirthClient.disconnect();\n                        parent.disconnect();\n                        // ...\n                        }\n                    };\n                }\n            }\n        } catch (ClientException e) {\n            parent.mirthClient.disconnect();\n            parent.dis", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = value.intValue();\n\t\t\t\t\tif (value.getClass().equals(String.class)) {\n\t\t\t\t\t\tlayer = Integer.parseInt(value.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currently logged in user) {\n            userProfilePicID = userProfilePicID = user.getProperty(GraphUser.class).getField(NAME);\n            userProfilePicID = userProfilePicID.get();\n            userProfilePicID.get", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.influences[0][0] * emotion.influences[0] * emotion.influences[0] * emotion.influences[0] * emotion.", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n                }\n            }\n        ],\n        self.build.stages_to_list())\n    def test_to_dict(self):\n        \"\"\"Test converting to dictionary.\"\"\"\n        self.assertDict", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Long = phi1Rad*_deg2rad\n    Lat = phi1Rad*_deg2rad\n    return (phi1Rad*_deg2rad)\n#=================================================================\n#=================================================================\n#=================================================================\n#================================================", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       ReportUserForm(request.POST)\n        ReportUserForm(request.POST)\n        ReportUserForm(request.POST)\n        ReportUserForm(request.POST)\n        ReportUserForm(request.POST)\n        ReportUserForm(request.POST)\n        ReportUserForm", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   def get_series_error(self):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        super(ProductAddSeriesView, self).get_series_error())\n    def validate(self, data):\n        \"\"\"See `LaunchpadFormView`.\"\"\"\n        super(", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t\tform.RightToLeft = true;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t\tform.", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp = ID3Tags.getWholeNumber(value);\n                //keeps shifting the number downwards and masking the last 8 bits to get the value for the next byte\n                //to be written\n                //keeps shifting the number downwards and masking the last ", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags = [re.sub(regex, flag) for flag in pos]\n            return new_positional_tags\n    def compile_tag_regex(positional_tags):\n        if not positional_tags:\n            return positional_tags\n        else", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n        }\n    }\n}\n```\nThis code is a partial implementation of the `GenericParameter` class from the `Microsoft.Samples.CorApi2.CorApi` namespace. The `MethodGenericParameter` and `TypeGenericParameter` classes", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_PID01(packetizer)\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.sessions[].append(self.bus_name)\n\t\tself.bus_name = None\n\t\tself.bus_name.connect_to_signal(self, \"PropertiesChanged\", self.PropertiesChanged)\n\t\tself.bus_name.connect_to", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\tthis.ForceNonExceptional(index);\n\t\t\t\tthis.ForceNonExceptional(index);\n\t\t\t\tthis.ForceNonExceptional(index);\n\t\t\t\tthis.ForceNonExceptional(index);\n\t\t\t\t", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def pop(self, exc_type, exc_value, tb):\n        \"\"\"Pop the request context and unbind it.\n        \"\"\"\n        self.app.teardown_request(exc_value)\n        self.app.teardown_request(exc_", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, cluster_id)\ndef _search(session, q):\n    return session.query(func.count().label('total')).\\\n        filter(Delivery.id==Delivery.id).\\\n        filter(Delivery.id", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (result != null) {\n                result.add(r);\n            }\n            result.add(r);\n            if (r.getResourceEntityForRelease(r.getResourceGroup(), release) != null) {\n                result.add(r);\n            }\n           ", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute angles\n    # Compute", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           class NZBProvider(NZBProvider):\n                def __init__(self, name):\n                    NZBParser = NZBSearchResult\n                    NZBParser = NZBSearchResult\n                def makeID(self):\n                    return \"NZB", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn FontSize_Names[type];\n\t\t}\n\t\t\n\t\tpublic static string ToString (CultureInfo culture)\n\t\t{\n\t\t\treturn FontSize_Names[culture];\n\t\t}\n\t\t\n\t\tpublic override string ToString ()", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar outer = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(outer.Type, Is.EqualTo(TokenType.Object));\n\t\t\tvar inner = (JObject)outer.Properties[0];\n\t\t\tAssert.That", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++; w++) {\n                edges.add(new T2(w * (w + 1), w * (h + 1)));\n            }\n            }\n            return edges;\n        }\n        @Override\n        public", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = isoelastics.Isoelastics(ds)\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   ", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final String[] arg0 = args[0];\n        final String arg1 = args[1];\n        final String arg2 = args[2];\n        final String arg3 = args[3];\n        final String arg4 = args[4];\n        final String arg5 = args", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   assert not alert.lowest_spot_price(history, 'us-east-1b') is None, \"Lowest spot price for us-east-1b is 0.105200\"\n    assert not alert.lowest_spot_price(history,", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tdownloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\tperformInstallation();\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic void showError(Throwable e", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL_DestroyWindow(window);\n\t\t\tSDL_DestroyTexture(window.Texture);\n\t\t\tSDL_GetError();\n\t\t}\n\t\tpublic void DisposeTexture(Texture texture)\n\t\t{\n\t\t\tif (text", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self.x_data_cov_mat_inverse\n    def _get_x_data_error(self):\n        return self.x_data_error\n", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, true);\n    }\n}", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 } catch (AuthException e) {\n                    throw new AuthException(e.getMessage());\n                  }\n                  Exceptions.toUndeclared(e);\n                  throw new AuthException(e.getMessage());\n                  }\n            }\n            // Transfer the", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           get { return _selectedFolderChanged; }\n        }\n        }\n        #endregion\n        private void SelectFolder(FolderTreeNode node)\n       \t{\n\t\t\tif (node == null)\n\t\t\t\t_selectedTreeNode = null;\n\t\t\telse", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       assertNotNull(name);\n        assertFalse(isImportAsNewEntity);\n    }\n    Next line of code:\n        assertFalse(isImportAsNewEntity);\n    }\n    private void assertNotNull(Object object) {\n        assertNotNull(object, \"template", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.vbox2.Add (this.vbox2);\n\t\t\tthis.vbox2.Expand (true);\n\t\t\tthis.vbox2.Fill (true);\n\t\t\tthis.vbox2.Pack (true, 0.5F", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.system['TOTALSTATUS'] = self.totalstatus\n        if self.scriptstatus is not None:\n            self.scriptstatus = self.scriptstatus\n        if self.scriptstatus is not None:\n            self.scriptstatus = self.scriptstatus\n        # self.", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\tILGenerator il = mb.GetILGenerator();\n\t\t\til.Emit(OpCodes.Ldtoken(this);\n\t\t\til.Emit(OpCodes.Newobj(typeof(ConstructorInfo));\n\t\t\til.Emit(Op", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     }\n    }\n    public class Builder {\n      private BuilderResult _builderResult;\n      public BuilderResult BuilderResult {\n        get { return _builderResult; }\n      }\n      public BuilderResultBuilder {\n        set { _builderResult = _builderResult", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = quads[vertices[x]];\n                else\n                    vertices[x] = quads[vertices[x]];\n            }\n        }\n    }\n    public void write(JmeExporter exporter) throws JmeException {\n        exp", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.addAll(Arrays.asList(result));\n        result.addAll(Arrays.asList(result));\n        result.addAll(Arrays.asList(result));\n        // backward compatibility: check for property \"categoryDateCreated\"\n        // backward", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t}\n\t\tvoid OnApplicationQuit ()\n\t\t{\n\t\t\tif (inputField.text.Length == 0)\n\t\t\t{\n\t\t\t\tinputField.text = \"\";\n\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r.IsNull(\"DateCreated\") ? r.OwnerDocument.Creator.ToString() : r.Creator.ToString();\n                    lastUser = lastUser + \", \" + r.OwnerDocument.LastUser;\n                    Users.Add(lastUser);\n                ", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\tif (edgeDirections != ScrollDirection.None)\n\t\t\t\t\tedgeDirections = ScrollDirection.None;\n\t\t\t\treturn ScrollDirection.None;\n\t\t\t}\n\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // check if discount is valid\n            // check if discount is valid\n            // check if discount is valid\n            // check if discount is valid\n            // check if discount is valid\n            // check if discount is valid\n            // check if discount is valid\n           ", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               // Adding file content as blob.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n */\n\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements\"\n\nI's not sure what you are trying to do, but the code you provided does not make sense.\n\nIt seems that you are trying to define a class `PayloadRequirements` that inherits from", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyRange; }\t\n\t\t}\n\t\tpublic void CopyToClipboardInternal()\n\t\t{\n\t\t\tif (CopyRange)\n\t\t\t{\n\t\t\t\tCopyToClipboardInternal();\n\t\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\treturn dataDir;\n\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\treturn confDir;\n\t\t}\n\t\t\n\t\tpublic string CacheDirectory {\nNext line of code:\n\t\t\treturn cacheDir", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n            if (bugAnnotation.getType() == BugAnnotation.Type.ERROR) {\n                BugInstance bugInstance = bugInstance;\n                if (bugInstance.getBugPattern() != null) {\n                    BugPattern bugPattern = bugInstance.getBugPattern();\n                   ", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t}\n", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                   }\n                    LaneClear();\n                }\n            }\n        }\n        private void JungleClear()\n        }\n        private void Q()\n        {\n            if (Menu.GetBool(\"LaneClearQ\") && Q.IsReady() && Me.IsInL", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, anchor);\n\t}\n}\n}\n}\nPlease complete the code above.", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       for frame in ['12', '36', '60']:\n            filename = \"gds/specials/pollen/tables/pollen_{}.csv'.format(region)\n            files = self._retr_file(filename)\n            for file in self.", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertTrue(\n            field_def['_model_based_field_name']\n            == field_def['_model_based_based_field_name'])\n        self.assertTrue(\n            Model_parser.model_based_field_name(\n                'test", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", \"E1\", \"10\", \"10\", \"10\"}});\n                // cleanup\n                env.UndeployAll();\n            }\n        }\n        internal class InfraMultiKey : RegressionExecution\n       ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def __itool__(self, other):\n        if not isinstance(other, Particle):\n            return NotImplemented\n        clibrebound.reb_particle_itool(byref(self), byref(other))\n        return self\n    \n    def __div", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view_obj = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view = view", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           // Create a new renderer for the given text.\n            // If the text is HTML, create a new renderer for the given text.\n            // If the text is HTML, create a new renderer for the given text.\n            // If the text is HTML, create a new renderer", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    assert s.content_is_testharness\n    assert s.content_is_testharness\n    assert s.content_is_testharness\n    assert s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.loader = namedQueryReference;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new ArgumentMultipleTimes(nameof(namedQueryReference));\n\t\t\t}\n\t\t}\n\t\tpublic void NamedQueryReference", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tforeach ( PlayerState ps in m_Members )\n\t\t\t{\n\t\t\t\tps.Serialize( writer );\n\t\t\t}\n\t\t\twriter.Write", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        assert graphQueue.size() > 0;\n        assert graphQueue.size() <= maxGraphs;\n        assert graphQueue.size() <= maxGraphs;\n        assert graphQueue.", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               print(\"  PYTEST: Running pytest with PR:\", pytest)\n            else:\n                print(\"  PYTEST: Running pytest with PR:\", pytest)\n        else:\n            print(\"  PYTEST: Running pytest with PR:\", pytest)", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               }\n                if (phi) {\n                    ValueNode phi = materializedPhis.get(value);\n                    phi.addPhi(value);\n                }\n            }\n        }\n    }\n}\n}\nPlease complete the code.\n\nI hope this", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       }\n}\n\nPlease help me with the code.\n\nThank you in advance.", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new InternalGump(from, EodonWallMap.EodonWallMapGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void OnGumpClick(Mobile m)\n\t\t{", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'Record',\n    'RecordMetadata',\n    'Bibxxx',\n    'Bibrec',\n    'BibrecBibxxx',\n    'BibrecBibxxx',\n    'Record',\n    'RecordMetadata',\n    'Record',\n    'Record", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user(self, username, domain):\n        # ...\n\ndef get_random_password():\n    # ...\n\ndef get_random_password(length=10):\n    # ...\n\ndef get_random_password(length=10):\n    #", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def __str__(self):\n        ret = ''\n        for entry in self:\n            ret += entry\n", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( res['Message'] )\n      return res\n    gLogger.info( \"-\" * 40 )\n    gLogger.info( \"Finalizing check\" )\n    gLogger.info( \"-\" * 40", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(baseURI != null) {\n\t\t\t\t// REDIR_ONLY: allow redirection to non-standard forms\n\t\t\t\t// but not for forms with a non-standard action\n\t\t\t\tif(action.equals(action)) {\n\t", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       d = self.check_summary_build(buildResults=[], finalResult=SUCCESS,\n                                     resultText=[\"succeeded\", \"succeeded\"])\n        yield self.run_fake_summary_build(self.master, buildResults=[],\n                ", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n\nif __name__ == '__main__':\n    # Do not run this file directly, see instead:\n    #   google-atom-test.py run_atom_tests.py\n    #   run_atom_tests.py\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            // Collect the mapping of immutability type variables\n            // and the corresponding qualifiers.\n            Map<String, AnnotationMirror> mapping = new HashSet<AnnotationMirror>();\n            for (String", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   # ...\n```\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n# ...\n#", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_IRQEnabled = map16.IRQEnabled;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMnuRoot.add(getOpenDocumentMenu(sTDocUrl));\n        }\n        private JMenuItem getInspectMenuItem(String _sTitle){\n            return new JMenuItem(sTTitle);\n        }\n        private JMenuItem getInspectMenuItem(String _s", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\t//----------------\n\t// End of Party Quest\n\t//----------------\n\t//----------------\n\t// Weapon Shop\n\t//----------------\n\t//----------------\n\t// End of Weapon Shop\n\t//----------------\n\t// End of Aranwen Shop\n\t//----------------", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn base.SizeHeight;\n\t\t}\n\t\tpublic override void RemoveView (View child)\n\t\t{\n\t\t\tbase.RemoveView (child);\n\t\t}\n\t\tpublic override void SetBackgroundColor (Color color)\n\t\t{\n\t\t", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return reverse('announcements:announcement_twitter_twitter_publication_twitter_publication_twitter_publication')\n", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```\n# Important:\n# * The following line is required to enable highlighting for PHP code\n# * The following line is required to enable highlighting for PHP code\n# * The following line is required to enable highlighting for PHP code\n# * The following line is required to enable highlighting for", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                   (i = i + 1)\n                    ''', (i,) )\n    # cursor.execute('''SELECT sdate, stime, stime, stime, stime, stime, stime, stime''')\n    # cursor.execute('''SELECT s", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\tcase \"sheep\":\n\t\t\tcase \"grass\":\n\t\t\tcase \"farm\":\n\t\t\tcase \"field\":\n\t\t\tcase \"manage\":\n\t\t\tcase \"managing\":\n\t\t\tcase \"manage\":\n\t\t", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\tvalue\t- vote value\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data.append(HostData(host_data)\n    def add_host_data(self):\n        pass\n    def add_host_data(self):\n        pass\n    def add_host_", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n        }\n    }\n}\n\\end{code}\n\nI'm trying to understand how the code works, but I'm having trouble understanding the code. I'm getting an error message when I try to run the code. Can someone please help me understand the", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   assert primary.keys() == []\n    return\n\nThis code is a Python script that defines a set of BDD (Behave) steps for testing the consistency of a repodata directory. The script uses the `behave` module to define a set of steps that can be executed using the", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            build_ext.get_outputs()\n        # Extension modules.\n        #\n        # The build_py and build_ext commands are used to build the Python\n        # source files and the", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\t\t// note that we do not need to check for non-initialized values here,\n\t\t\t// since the cache entry is only used for non-association entities\n\t\t\t// (i.e. the association entities are already loaded)\n\t\t\t// and the cache", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--job-name=' + job_name,\n        '--job-id=' + job_id,\n        '--job-state=running',\n        '--job-time=' + time.strftime('%Y-%m-%d_%H:%M')\n   ", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           ViewBag.ModelId = new int?(-1; // default(int?) -1: // default(int?) -1;\n            return ViewBag.ModelId = -1; // default(int?) -1;\n        }\n        // Add a relationship (EventDelegate) between Event", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                   var circle = (Circle) obj;\n                    var radius = (Circle) obj;\n                    var center = (Circle) obj;\n                    var centerX = (Circle) obj;\n                    var centerY = (Circle) obj;\n                   ", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def checkDownload(self, download=None):\n        self.doTimmer()\n        self.doCaptcha()\n        self.doCaptcha()\n        self.doTimmer()\n        self.doCaptcha()\n        self.doCaptcha()\n        self.do", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\tif (path.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tvar closest = ClosestHarvestablePos(self);\n\t\t\t\t\t// If the closest harvestable cell is too far away, search from the current cell:\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "           if rc = utils.subprocess_call(self.logger, \"dhcpd restart\", shell=True, args=(restart_dhcp,), log=True)\n            if rc != 0:\n                self.logger.error(\"dhcpd restart failed\")\n", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return new Event.Builder(Event.Builder.newBuilder());\n    }\n}\n}\nThis code is a simple implementation of an event producer that provides shortcut methods for sending messages of different severity types. It also provides a way to disable repeated event reduction.\n\nPlease complete the code by filling", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n            }\n           ", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        #endregion\n        #region Public Properties\n        #endregion\n        #region Public Methods\n        #region Public Methods\n        public static DicomVr(String name, Boolean isText, Boolean is", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[2]);\n\t\t}\n\t\t//now we have the list of tests to delete\n\t\t//now we have the list of tests to delete\n\t\t//now we have the list of tests to delete\n\t\t//now we have", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       self.failUnlessRaises(cdata.error, cdata.insert_bytes(o, 4, 0))\n        self.failUnlessRaises(cdata.insert_bytes(o, 4, 0))\n        self.failUnlessR", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <tr>\n      <td", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot([], [], 'o-')\n    ax.plot([], [], 'bo-')\n    ax.set_ylim([0, 100])\n    ax.set_yticklabels([])\n    ax.set_ylabel('Time (ms)')", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/GID switches when current effective GID is non-root.\n        \"\"\"\n        self.mockos.euid = 1\n        self.mockos.egid = 0\n        util.run", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}else{\n\t\t\t\t\tif(bDrawCross || bDrawCross || bDrawCross //draw a cross\n\t\t\t\t\t//draw a cross\n\t\t\t\t\tif(model.getState() == CROSSED) {", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " # ...\n\nI'm not sure what you're trying to do, but it seems like you're trying to write a test suite for testing the KNNClassifier. However, the code you provided doesn't seem to be a test, but rather a mix of code that doesn't", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       writeElement(mirror, kind, offset);\n    }\n    @INLINE\n    public final void writeElement(Object mirror, int offset) {\n        writeElement(mirror, Kind.REFERENCE, offset);\n    }\n    public void writeElement(Kind kind,", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || relativePath.Length == 0) {\n                return null;\n            }\n            // try to resolve relative path\n            return File.GetFullPath(relativePath);\n        }\n        protected virtual string ResolveAssemblyReference() {\n            return Resolve", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return _format_string(string, *args, **kwargs)\ndef _format_string(string, *args, **kwargs):\n    # Fill in the rest of the code\n    # ...\ndef main():\n    # Rest of the code ...\n    # ...\n    #", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dlasdq.dlasdq(\"U\", i1, i16 - 1 + paramInt23, paramInt8, paramInt8, paramArrayOfDouble1, paramInt7, paramInt8, paramInt8, paramInt9, paramInt10, param", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t\t\t- \" + (name + \"\").ToString() + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"\t\t\t- Current: \" + (name + \"\").ToString() + \"\\n\";\n\t\t\tstr += \"\t\t", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   MissileSpellName = \"LucianRMis\",\n                });\n                #region MissileSpellName = \"LucianRMis\",\n                #endregion\n                #region MissileSpellName = \"LucianRMis\",\n                #endregion\n               ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentTenantId()).thenReturn(\"test.tenant\");\n\t}\n\t@Test\n\tpublic void test() {\n\t\t// Tests the functionality of the model management component.\n\t\t// <editor-fold default=\"true\"\n\t\t", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.CalledProcessError)\n        with self.assertRaises(subprocess.CalledProcessError):\n            proc = subprocess.Popen(['/bin/sh', '-c', 'echo hello']),\n        self.assertEquals('", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertiesService.Startup();\n\t\t\tMessageService.Startup();\n\t\t\t\n\t\t\t// start the core services\n\t\t\tPropertiesService.Startup();\n\t\t\t\n\t\t\t// start the message box service\n\t\t\tMessageService.Start", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t\t//call once before adding a constraint to a collection\n\t\t\t//will throw an exception if a rule is broken\n\t\t\t//or if the table is already in the collection\n\t\t\t//or if the constraint collection is not a ConstraintCollection\n\t\t\t//or", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.setWindowTitle(self.windowTitle())\n        self.setWindowIcon(self.windowIcon())\n        self.setWindowTitle(self.windowTitle())\n        self.setWindowState(self.windowState())\n        self.setWindowModified(self.windowMod", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n            }\n            // ...\n            // ...\n            // ...\n            // ...\n\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tusing (ISession s = OpenSession())\n\t\t\t\t{\n\t\t\t\t\tIStatistics stats = Sfi.Statistics;\n\t\t\t\t\tstats.Clear();\n\t\t\t\t\tusing (ISession s = OpenSession())\n\t\t", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTChecksum = (uiCRCITTChecksum >> 8) ^ (uiCRCITTChecksum & 0xFF) ^ (uiCRCITTChecksum >> 8);\n                uiCRCITTChecksum ^= (uiByteValue", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\t}\n\tpublic void shoot(Entity target) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new ReferencesHyperlinkDetector();\n        }\n        return new ReferencesHyperlinkDetector();\n    }\n    public IInformationPresenter getInformationPresenter(\n            ISourceViewer sourceViewer) {\n        return new CeylonInformationPresenter(editor);\n", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.z = qt.QSpinBox(self)\n        self.z.setRange(0.0, 10.0, 0.1)\n        self.z.setDecimals(2)\n        self.z.setSuffix(\" meters", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSet = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    Object convertedValue = selectConverter.convert(value);\n                     result = selectConverter.convert(value);\n                     result = value;\n                     result = value;\n                     result = value;\n                     result = value;\n                     result = value;\n                     result", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (acceptableChange[i][j]) {\n\t\t\t\tsb.append(i+\"->\"+j+\"\\t\"+acceptableChange[i][j] +\"\\t\"+1.0*100.0+\"%\");\n\t\t\t}\n\t\t", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n```\n\n```\n\n\n", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t}\n\t}\n\tpublic class ClientOperationCollection : Collection<ClientOperation, string>\n\t{\n\t\tpublic ClientOperationCollection ()\n\t\t{\n\t\t\t// FIXME: implement me\n\t", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        final Account mockAccount = EasyMock.createMock(Account.class);\n        final Account mockAccount = EasyMock.createMock(Account.class);\n        final SecurityManager mockSecurityManager =", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X * viewport.Width, v.Y * viewport.Height);\n\t}\n\t}\n}\n}\n```\n\nThis code defines a set of utility functions that can be used in a game or game engine. It includes a set of", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "e = endpoint_key(vlan=1, mac_hi=0x123, mac_lo=0x456)\nprint(type(e))\nprint(type(e))\n\\end{code}\n\nI'm getting an error message that I don'", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t// check if the socket is still open\n\t\t\t\tif (workerSocket.Connected)\n\t\t\t\t{\n\t\t\t\t\t// if the socket is still open\n\t\t\t\t\tif (workerSocket.Connected)\n\t\t\t\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(list);\n            }\n            break;\n        }\n    }\n    }\n}\n}\n\\end{code}\n\nI'm getting an error in the `onConnectionFailed` method, specifically on", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " \"\"\"\n  # Generate the single-use version of the callback\n  PrintLongLine('template <typename ReturnType%s>\n  class SingleUseCallback%d: public BaseCallback<ReturnType%s%s> {' %\n                 (optional_comma, typenames, arg", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   Returns a JSON list of range items.\n    The order of items in the JSON list is:\n    1) 'id' (string, primary key)\n    2) 'title' (string, 'title' metadata)\n    3) 'start' (string, start time as UNIX", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(score), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                serviceGraphPattern.addChild(new StatementPatternNode(\n                        new VarNode(\"lit\"), new VarNode(\"lit\"),\n                        new ConstantNode(mike", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       self.object = self.object.get_object()\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        #", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #region IAssemblyReference Members\n    IAssemblyReference\n      IAssemblyReference.ResolvedAssembly {\n        get { return this.ResolvedAssembly; }\n      }\n    #endregion\n   ", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n            // Initialize the solver fields\n            // Set the convergence monitor\n            // Set the preconditioner\n            // Initialize the preconditioner\n            // Set the preconditioner\n            // Set the preconditioner\n            // Set the preconditioner\n            // Set the preconditioner\n", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[right];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\treturn new Apfloat[] {sortedNumbers[right].add(0.5)];\n\t\t}\n\t}\n}\n\nNote", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               parent[v] = edge.position\n                A[v] = v\n                L[v] = v\n            v = parent[v] = edge.parent\n            sample_count[v, K] = 1\n        for edge in edges_in:\n            edge.anc", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       client.indices.put_mapping(index=self.enrich_index, body=mapping_json)\n        for item in self.ocean_backend.fetch():\n            item = item['_source']\n            mapping = item['_source' if '__' in item else", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\tvar options.Add(new DropDownOption() { Text = slot.Name });\n\t\t\t\t\t\t\t\t\tslot.Value.Add(slot.Name);\n\t\t\t\t\t\t\t\t\tslot.Value.Add", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t\treturn base.ToString();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn base.ToString();\n\t\t\t}\n\t\t}\n\t}\n\t}\n}\n}\n}\n}\n// End of code\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header.serialize(frame_header.serialize() + frame_payload)\n    def __str__(self):\n        return repr(self).split('\\n')\n    def __str__(self).__str__(self):\n        return repr(repr(self).split", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var debugCurve = cluster.RectangularBoundary;\n            var debugCurve = cluster.RectangularBoundary;\n            var debugCurve = cluster.RectangularBoundary;\n            var debugCurve = cluster.RectangularBoundary;\n            var debugCurve = cluster.", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() > 0) {\n            for (int i = 0; i < initializers.size(); i++) {\n                ExpressionTree exp = initializers.get(i);\n                if (canBeLeaked(exp)) {\n                    checker.", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tnbttagcompound.setTag(\"display\", 10, 3);\n\t\t\tnbttagcompound.setTag(\"display\", 10, 3);\n\t\t\tstack.setTagCompound(new NBTTagCompound(this.", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ReturnType(Context.DefaultType, _returnType);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t// Properties\n\t\t//--------------------------------------------------------------------\n\t\t//--------------------------------------------------------------------\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t}\n\t\tprivate void AreEqual(int expected1, int expected2, int real, string name)\n\t\t{\n\t\t\t// This is needed since the default height vary between XP theme and W2K theme.\n\t\t\tif (real != expected1 && real !=", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isInitialized()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\treturn true;\n\t}\n\t\n\tpublic final boolean equals(UnitContainer other) {\n\t\tif (other == null)\n\t\t\treturn false;\n\t\t\n\t\tif (this.accessPath.equals(other.getAccessPath())\n\t\t\t\t", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.rightChild];\n            int min2 = narrowL;\n            int max1 = wideRExtent[end][r.rightChild];\n            int max2 = wideRExtent[end][r.rightChild];\n           ", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "```\n    def test_bwlimit_ssh_invocation(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(pipe_processor_loop, ret, out", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.Thread", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"g\", String.valueOf( g ) )\n\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, \"color\" );\n\t}\n\tprivate String writeMaterial( final String name", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat == null) || (this.hashCode() != proxyThat.hashCode()) ) {\n\t\t\treturn false;\n\t\t}\n\t\tif ( (proxyThat instanceof HibernateProxy) && (proxyThat instanceof Contact) ) {\n\t\t\tHibernate", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n_steps > 0:\n      read_input_file = read_input_file_\n      read_vertex_file = read_vertex_file_\n      read_clones_file = read_vertex_file_\n      read_slip_file =", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata:\n            subt = AdvancedIncSubtensor(node.inputs[0], node.inputs[0],\n                                         node.inputs[0], node.inputs[0],\n                                         node.inputs[0], node.inputs[0", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   class Meta:\n        model = CommunityPage\n        fields = ('slug', 'title', 'order', 'content')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_page' community.slug \" \\\n                             \"", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return None\n    \"\"\"\n    def __init__(self, *arg, **kw):\n        super(QueryEvents, self).__init__(*arg, **arg)\n        super(QueryEvents, self)._listen_fn = fn\n        super(QueryEvents, self)._", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           # Add the show tag\n            show_tag_list = [child.location.html_id() for child in self.get_children()]\n            for child in self.get_children():\n                show_tag_list.append(child.location.html_id())\n       ", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.get_adapter(data, self.bg_value)\n        return self.get_adapter(data, self.bg_value)\n    def get_adapter(self, data, data_type):\n        return self.get_adapter(data, self.get_adapter(", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t}\n\t\t}\n\t}\n\t[XmlType(\"ldc\")]\n\tpublic sealed class Ldtoken : Ldtoken\n\t{\n\t\tpublic Ldtoken() : base(OpCodes.Ldtoken)\n\t\t{\n\t\t}\n", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Text = \"Y:\";\n\t\t\tthis.objYLabel.Text = \"Y:\";\n\t\t\tthis.objYLabel.Text = \"Y:\";\n\t\t\tthis.objYLabel.Text = \"Y:\";\n", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"mail/syncmail.1\", \"mail/syncmail.2\", \"mail/sync", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap();\n        }\n        termData.put(csvData.get(csvData.keySet().nextElement()), csvData.get(csvData.get(csvData.keySet().nextElement()));\n", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn super.onWanded(player, wand);\n\t}\n}\n```\nPlease help me solve this problem, I'm stuck on this line of code.\n\nI's a bit of a long code, but I'll try my best to explain it as best as", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           float representativity = this.getRepresentativity(component, c);\n            //will probably need an optimization for not computing again values already computed\n            float intrinsicCohesion = this.getIntrinsicCohesion(c);\n            // ...\n        }\n        return", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        # Update the record\n        # Update the record\n        run_sql(\"UPDATE bibdoc set doctype=%%s, moreinfo=%%s where id_bibdoc=%s\" % (str(recid))\n    else:\n        raise Exception(\"", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//dispose of any resources being used\n\t\t\t//\n\t\t\t//dispose of any resources being used\n\t\t\t//\n\t\t\t//dispose of any resources being used\n\t\t\t//\n\t\t\t//dispose of any resources being used\n\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exDate : exDateList) {\n      exDateList.add(exDate);\n    }\n    return exDateList;\n  }\n  private DateList toDatable(DateList<Date> list) {\n    List<Date> list", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.DataTarget = new dfComponentMemberInfo() { Component = sourceComponent, MemberName = sourceProperty };\n\t\tsourceEventBinding.Bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding.DataTarget = new dfComponentMember", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           // Parse the JSON data from the request body\n            ObjectMapper mapper = new ObjectMapper();\n            // Parse the JSON data from the request body\n            mapper.parse(mapper.parse(jsonData));\n            // Create a new span config with the given span port\n            SpanConfig", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t}\n\t\t\tpublic static final ims.framework.utils.Image IMAGE = new ims.framework.images.ImageBuilder().createImage();\n\t\t\tpublic static final String IMAGES = new ims.framework.utils.Image IMAGE;\n", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size) + 1;\n    }\n}\n}\n\nPlease help me complete the code by adding the missing code to fill the missing methods and methods parameters.\n\nThank you in advance.\n\nRegards,\n\n[User]", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\n    def __init__(self):\n        self.project_uuid = 'A5DBEEA2-C39-43F9-985-33343412345'\n        self.source_id", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           }\n            buffer.Append(\"    .adltind = \")\n                .Append(StringUtil.ToHexString(AdltIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndentionIndention", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width katakana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int)(0xA1 + (ch - 0x0x6000)) * ", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "```\ndef tricore_branch(obj, off1, off2):\n    tricore_branch(obj, off1, off2, off2)\n```\n\n\nPlease complete the code with the given code snippet and the given mnemonic for each instruction.\n\nNote:", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tJRPropertiesMap properties = new JRPropertiesMap();\n\t\t\t// load the properties from the location\n\t\t\tproperties.load(location);\n\t\t\t\n\t\t\t//TODO: handle the case where the properties file is not found\n\t\t\t//     ", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n    }\n}\nPlease help me with the code.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor.PurgeDefaultDacl (csd);\n\t\t}\n\t\t[Test]\n\t\tpublic void GetBinaryForm_NoDefaultDacl ()\n\t\t{\nNext line of code:\n\t\t\tCommonSecurityDescriptor.GetBinaryForm", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def parse_acoustid_response(results):\n        for i, result in enumerate(results):\n            song = results[i]\n            releases = []\n            for artist in result.get(\"releases\", []):\n                release = result.get(\"releases\", [])[0", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       }\n    }\n}\n}\n}\n\npublic class Text\n{\n    public string windowTitle = \"\";\n    public string setupWizardTitle = \"\";\n    public string setupWizardMessage = \"\";\n    public string mainMenuButton = \"\";\n    public string connectButton = \"\";\n", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n        return rootLayout.findViewById(R.id.full_subj).findViewById(R.id.full_from_to).findViewById(R.id.full_from_to).findViewById(R.id.full_from_to).findViewById(R.id.full_echo).findViewById", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_p = np.dot(op_cc, op_cc.T)\n            op_p = op_p.T\n            op_p = op_p.dot(op_p.T)\n            op_p = op_p.T\n            op_p", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"Tolvan\", 255));\n        Response response = utkastController.createUtkast(inty", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tforeach (ILNode childNode in childNodes) {\n\t\t\t\t\tif (childNode is ILBasicBlock) {\n\t\t\t\t\t\tif (prevChildNode is ILBasicBlock) {\n\t\t\t\t\t\t\tif (prevChildNode.Next", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\t//do nothing\n\t\treturn;\n\t    }\n\t}\n\tpublic void UpdateRagdoll(float delay)\n\t{\n\t    //do nothing\n\t}\n\tpublic void UpdateRagdoll(", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, *args):\n        super().__init__(config={}).\n        self.top.interp_node_set = *(InterfaceNodeSet)()\n        self.top.interp_node_set_id = *(InterfaceNodeSet)()\n       ", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       System.arraycopy(ofbV, 0);\n    }\n}", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   return comments\ndef transform_value_xml_json_to_json(value_xml_json):\n    comments = []\n    value_json = collections.OrderedDict()\n    value_json['@type'] = 'Value'\n    value_json['unit'] = float\n", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           }\n      }\n      }\n      });\n      }\n  }\n  public final void remove(InternalFrame frame) {\n    try {\n      for(Enumeration<InternalFrame> e=buttons.keys();e.items();) {\n        InternalFrame f =", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   from client import *  # Import the functions\n    from client import *  # Import the functions\n    from client import *  # Import the functions\n    from client import *  # Import the functions\n    from client import *  # Import the functions\n    from client import *  # Import the", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.mm2px(offset.x, dpi), Util.mm2mm(dpi))\n    for (int y = 0; y < p.getRasterHeight(); y += toolDiameterInPx);\n    for (int x = ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, \"UPDATE \" + Db.Table1.COLUMN_ID + \" = \" + newId + \", \" + Db.Table1.COLUMN_GROUP_NAME + \" = \" + newId + \" WHERE \" + Db.", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.DestroyMemory(m_ptr);\n                }\n            }\n        }\n        #endregion\n        internal void Free()\n        {\n            Dispose(true);", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n```\n\n\n\n```\n\n    }\n    # ...rest of the code...\n```\n\n\n\n```\n\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n```\n", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Any(pi => pi.Item.Name == itemName))\n\t\t\t{\n\t\t\t\tvar cancelled = queue.Where(pi => pi.Item.Name == itemName);\n\t\t\t\tif (cancelled.Any())\n\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText += \" file(s)\"\n        infoText += \" file(s)\"\n        infoText += \" file(s)\"\n        infoText += \" file(s)\"\n        infoText += \" file(s)\"\n        infoText += \" file(s)\"\n        infoText +=", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4 = subst_pc(re.compile('@(\\w+@')\n        for x in re_m4.pattern():\n            yield x\n        yield '\\\\1'\n        yield '\\\\2'\n        yield '\\\\3'\n        yield '\\\\", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self.workOnPlan(listOfInput)\n        print \"this is the result of the action list\"\n        print \"this is the result of the action list\"\n        print \"this is the result of the action list\"\n        print \"this is the result of the action list", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t+ hdiv0 * ( ( float )( x - 1 ) * ( float )( y - 1 ) ) * k * dt * hdiv0 * 0.00000015625F * ( 1", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                TimestampFormat timestampFormat = TimestampFormat.of(timestampFormatFactory.get(pattern, timestampFormatFactory.get(timestampLocale));\n               ", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn base.ReceberAutoIncremento(qs, entity.obj_id);\n\t\t}\n\t}\n\t\n\tpublic abstract class ORC_ConteudoItem : ORC_ConteudoItemBase\n\t{\n\t\t\n\t\t\n\t}", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Replace(object value, object original, object target, ISessionImplementor session)\n\t\t{\n\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object Return", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       ce_ntp_auth = ce_ntp_auth_by_cli(self.key_id, self.auth_mode, self.auth_mode_txt, self.auth_pwd, self.auth_pwd_txt, self.key_id_txt, self", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           # Create a new version of the component\n            component = self.store.get_item(component.location, revision=component.revision)\n        # Check that the new version was created by the correct user\n        self.assertEqual(component.created_by, self.user_id", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (textCode & 0xff));\n        digest.update((byte) (textCode & 0xff));\n        updateWith(ch[0]);\n        updateWith(ch[1]);\n        updateWith(ch[2]);\n       ", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict.get('min', ' '))\ndef mkcomparison(data):\n    return aetypes.Comparison(data)\ndef mkobjectfrommodule(data, module_name):\n    return aetypes.Object(module_name, a", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           // Use the type of the action or the parameter\n            // Use the type of the action parameter or return value\n            // Use the type of the action return value or return value\n            // Use the type of the action return value or return value\n            // Use the type of the action return value or", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_text()\n            self.set_value(value)\n            return True\n        else:\n            return True\n    def on_key_up(self, path, column, value):\n        model = self.get_model()\n        column = self.", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.addBean(beanName);\n        }\n        return beanFactory.getBean(beanName);\n    }\n    }\n}", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           if f:\n                if create:\n                    # Create missing directories if necessary\n                    create_missing_directories(path)\n                    if create_directories(path):\n                        # Add file to existing users\n                        htpasswd = HtpasswdFile(", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n    }\n    #endregion\n}\n}\n\\end{code\n\nPlease help me to complete the code above.\n\nI have to implement the `IMFMediaEventGenerator", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var user = checkNotNull( Principals.getCurrentUser() );\n        var principal = checkNotNull( Principals.getCurrentUser() );\n        var spm = checkNotNull( spm );\n        var aclKey = checkNotNull( spm );\n       ", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       if element.find('..').find('..').find('..') is not None:\n            # Find the child elements\n            # ...\n            # ...\n        return False\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return operation(node)\n    # This code is not in the standard library, but it is used by the\n    # implementation of the DOM.\n    # The implementation of the code is in the implementation of the\n    # standard library.\n    # The code is in the implementation of the standard", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t\t\treturn EMSSceneSectionOperations.validateEMSSceneSectionMassCasualtyIndicator(\n\t\t\t\t\t\t(EMSSceneSection", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (endOffset == 0)\n\t\t\t\tthrow new Error(\"Unexpected end of stream\";\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            if(ActiveWeapons.get(i).getType().getCooldown() > 0)\n            {\n                Weapon a = ActiveWeapons.get(i).", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( colorValue );\n        action.setColor( colorValue );\n        // action.setColor( colorValue );\n        // action.setColor( colorValue );\n        // action.setColor( colorValue );\n        // action.setColor( colorValue );\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"Error downloading file, saving to file\")\n    with open(os.path.basename(url), \"wb\") as f:\n        total_len = int(r.headers.get(\"content-length\") or 0)\n        with open(os.path", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tservice.MergeOrder(request);\n\t\t\t\t\t\tresponse = service.GetMergedOrder(destinationOrderRef);\n\t\t\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\t\t\tmergedOrder.Accession", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   from .helpers import _get_reaction_coefficients\n\nfrom . import _get_reaction_coefficients\n\nfrom . import _get_reaction_coefficients\n\nfrom . import _get_reaction_coefficients\n\nfrom . import _get", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return Unit.objects.filter(store=Submission.objects.filter(\n            path=split_pootle_path(pootle_path),\n        )\n        )\n    def get_for_path(self, pootle_path, user)\n    def get", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='Subject',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.trafgen_ip = str(ip)\n    self.trafgen_ip = str(ip)\n    self.trafgen_ip = str(ip)\n    self.trafgen_ip = str(ip)\n    self.trafgen_ip", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n}\n\n  }\n  protected void addRecentItem(T item) {\n    m_RecentItems.add(item);\n  }\n  protected void removeRecentItem(T item) {\n    m_Recent", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           // Checked if target is in same guild as src\n            // Checked if target is in same guild as src\n            // Checked if target is in same party as src\n            // Checked if target is in same guild as src\n            // Checked if target is in same", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return getMaxTradePeriodDate();\n    }\n    public Date getTradeDate() {\n        return getTradeDate();\n    }\n    public Date getTradeDate() {\n        return getTradeDate();\n    }\n    public Date getTradeDate() {", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) a = LeadingAny(p.down);\n\t\t}\n\t\treturn a;\n\t}\n\t\n\tpublic static BitArray GetLeadingAny(Node p) {\n\t\treturn LeadingAny(p);\n\t}\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tDebug.WriteLine(\"Reading: \" + address);\n\t\t\t\tDebug.WriteLine(\"Size: \" + size);\n\t\t\t\tDebug.WriteLine(\"Address: \" + buff[0]);\n\t\t\t\tDebug.WriteLine(\"Rumble: \" + buff[1", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object obj)\n\t\t{\n\t\t\tMskJointVo result = (MskJointVo)obj;\n\t\t\tif(result == null", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (; i < N1 + N2 + N3 + N4; i++, k += 3)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n            _fakeUnitsStart = _fakeUnits", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   class AddComputeChargebackView(AddComputeChargebackView):\n    AddComputeChargebackView.title = Text('#explorer_title_text')\n    AddComputeChargebackView.table = Table(\n        class_='miq-data-table", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tOpenGLOES.BufferData( All.ElementArrayBuffer, new IntPtr( sizeInBytes ), offset, length );\n\t\t}\n\t}\n}\n}", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.list = []\n\t\tself.list.append(self.TerrestrialTransponders)\n\t\tself.list.append(self.TerrestrialTransponders.append(self. TerrestrialTransponders.choices[0]))\n\t\t", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           TcpAddress.TcpAddressMask filter;\n            //  Create a new filter\n            filter = new TcpAddress.TcpAddressMask(filterStr);\n            tcpAcceptFilters.add(filter);\n            return;\n        default:\n            throw new IllegalArgumentException(\"", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Save the row of data to the output stream\n                fout.Write(curr);\n                // Save the row of data to the output stream\n                fout.Write(fout.ToArray());\n                // Save the row of data to the output stream\n                fout.Write(", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('foo.bar'))\n        self.assertFalse(s", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   def massey_product_printout(self, filename):\n        output = \"\"\n        e2 = self.get_E_2_page()\n        for index in xrange(len(e2.get_dual_resolution(self.options).get_map_list", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           Assert.AreEqual(TestUtil.GetAllSet().ToTestUtil().GetAllSet(), TestUtil.GetAllSet());\n            Assert.AreEqual(TestUtil.GetAllSet(), TestUtil.GetAllSet);\n            Assert.AreEqual(TestUtil.GetAllSet(), Test", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\t// todo : is this a no-op?\n\t\t// todo : is this a no-op?\n\t\t// todo : is this a no-op?\n\t", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n}", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'message': action_message.get('attendance_change_message'\n                                                  'attendance_change_message')}\n        }\n        return {'message': action_message.get('attendance_change_message'\n                                                  'attendance_change", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tfor (int i = 0; i < parentRow.getRows().size(); i++) {\n\t\t\tif (parentRow.getRows().get(i).getRowIndex() == null) {\n\t\t\t\tparentRow.add(orderInvestigationLiteV", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               return new Point(c.ReadInt32(), c.ReadInt32());\n                // ...\n                c.Dispose();\n                return new Point(pt.X, pt.X);\n            }\n        }\n        internal static void Dispose(Object obj)\n        {", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "   def set_fullscreen(self, fullscreen):\n        self.set_fullscreen(fullscreen)\n        self.terminator.set_fullscreen(fullscreen)\n        self.set_maximised(fullscreen)\n        self.set_icon_name(icon_to", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( managedType, marshalAttribute, arraySize ) );\n                    toReturn.Add( managedType );\n                    toReturn.Add( managedType.MakeArrayType() );\n                    toReturn.Add( managedType );\n                   ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (HasLayoutInfo)\n\t\t\t\t\treturn true;\n\t\t\t\telse\n\t\t\t\t\treturn base.IsValueType;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpublic override void AcceptVisitor<T", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\n\n    }\n    public class ROM {\n        #region instance variables\n        // ...\n        #endregion\n        #region methods\n        // ...\n        #endregion\n        #region", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.context = protocol.context\n        self.context.set_options(self.get_options())\n        self.get_options()\n    def get_options(self):\n        return self.context.get_options()\n    def get_", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.LabelProp = global::Mono.Unix.Catalog.GetString (\"_Plural (msgid):\");\n\t\t\tthis.label8.UseUnderline = true", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   widgets[\"board\"].load_game(gamemodel)\n    gm = GameModel()\n    gm.load_game(gamemodel)\n    gm.load_game_data()\n    gm.load_game_data_done()\n    g", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Prev-Tab\": QKeySequence(Qt.Key_Tab),\n    \"Next-Tab\": QKeySequence(Qt.Key_Key_Tab),\n    \"Next-Tab-Reverse\": QKeySequence(Qt.Key_Key_Key),\n    \"Prev-", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"Spring's base implementation of the JPA PersistenceUnitInfo interface.\";\n\t}\n}", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return super.isFileReadOnly();\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(88, 65);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82,", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return enc = URLEncode.encode(string, \"UTF-8\");\n    }\n}\n\npublic class MarkedContent\n{\n    public String contentId;\n    public String contentTitle;\n    public String formId;\n    public String redirectUrl;\n}\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\t\tCheck (\"HMACSHA512-L-RFC4231-Legacy\", hmac, data, digest);\n\t\t\t\tCheck (\"HMACSHA512-L-RFC4231-Legacy-R-R", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += 4 + CDRSerializer.alignment(sum);\n\t    \n\t    // EnumSwitcher\n\t    sum += 4 + CDRSerializer.alignment(sum);\n\t    \n\t    // intVal\n\t    sum += 4;\n\t    ", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.ToString();\n    }\n    private static String GetJavaExe(String home)\n    {\n      String javaExe = GetJavaExe(home);\n      if (home.Contains(\"java.exe\"))\n        return home;", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               if comment:\n                    return [l]\n        if comment:\n            return [l]\n        else:\n            return None\n        return None\n    def find_env(self, name):\n        return self.find_env(name)\n    def find_env(self", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "mesh = bpy.data.meshes.new('MeshModifier')\nmodifier = MeshModifierCommon.from_json(modifier_json)\nmodifier_json = MeshModifierCommon.from_json(modifier_json)\n\n# Do something with the mesh and the", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n}\n\n\n\n\n\n\n\n\n\npublic static void main(String[] args) {\n\n}\n\npublic void run() {\n\n\n}\n\npublic void run() {\n\n\n}\n\npublic void run() {\n\n\n\n}\n\npublic void run", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (val neighbor : vertex.neighbors()) {\n            neighbors.add(neighbor);\n        }\n        assertEquals(3, neighbors.size());\n    }\n    @Test\n    @DisplayName(\"neighbors() should return an empty list when", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, choice, packet):\n        #Print packet summary\n        print(packet.summary())\n        print(self.packet_number + \"Packet Summary: \"+ self.packet_number + \"Packet Number: \" + str(packet.summary())", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 83);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);\n", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': \"Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               }\n            }\n            return false;\n        }\n        return false;\n    }\n    private boolean isReturnAllTypes() {\n        return false;\n    }\n    private void setReturnAllTypes() {\n        return true;\n    }\n    private void setProcessIm", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate(cr, uid, ids, context=context)\n        return True\n    def holidays_first_validate_notificate(self, cr, uid, ids, context=None):\n        obj_emp = self.pool.get", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #endregion\n        #region IBOColSelector Members\n        #region IBOColSelector\n        #region IBOColSelector\n        #region IBOColSelector\n        #region IBOColSelector\n        #region", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line: {0:D}\".\n                + \"Line ID: {1:D08}\".\n                + \"Line Type: {2:X}\".\n                + \"Line Name: {3:s}\".\n                + \"Line Short", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tvalue10 = new ims.core.admin.domain.CareContextRefVo(valueObject.getCareContext().getId(), valueObject.getCareContext().getVersion());\n\t\tdomainObject.setCareContext(value10);\n\t\tdom", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target\", \"--target", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble estP = estN;\n\t\t\tdouble estN = estN;\n\t\t\testN = estN;\n\t\t\testP = estP;\n\t\t\testP = estP;\n", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               var stashMessage = StashMessage.Text;\n            }\n            var stashMessage = StashMessage.Text;\n            StashMessage.Text = ResourceManager.Strings.StashDropConfirm;\n            var stashMessage = StashMessage.Text;\n            var index", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   # --------------------------------------------------------------------------\n    # finish assembly of assign items:\n    job.commit_address_addresses()\n    job.commit_address_items()\n    job.commit_beam_elements()\n    job.commit_beam_monitor_addresses", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       return super.equals(o);\n    }\n    private static final long serialVersionUID = -34837639748178939L;\n}", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, new object[0]);\n        }\n        public int EndAddInt(int a, int b) {\n            int result = 0;\n            try {\n                int result = (int)(object)(((long)(a) + (b))));\n            } catch", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic String getCSeriennrChargennr() {\n\t\treturn cSeriennrChargennr;\n\t}\n\tpublic void setCSeriennrCh", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGenericType)value;\n\t\t\t\t\tbreak;\n\t\t", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "eai = EncryptedArchiveIndex(path).load()\n\nI have tried to provide the code you provided, but I am unable to understand what you want me to do. Please provide more context or clarify what you want me to do.", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   def decode(self, data):\n        # ...\n    def handle_response_r1(self, res):\n        # ...\n    def handle_response_r1b(self, res):\n        # ...\n    def handle_response_r2(self, res):\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    }\n}\n}", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = new ObjectPanel.ObjectPanel(cd.name, cd.viewer, cd.viewerFrame, cd.viewerFrame.getSize().width(), cd.viewerFrame.getSize().height());\n            } catch (IOException e) {\n                e.printStackTrace();\n           ", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "- name: Get information on the certificate\n  openssl_certificate_info:\n    path: /path/to/cert.pem\n    provider: path\n  openssl_certificate_info_py:\n    path: /path/to/cert.pem\n  register", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\ts = _slots;\n\t\t\t}\n\t\t\tif (i.first.get ()->signal_going_away ()) {\n\t\t\t\tstill_there = true;\n\t\t\t}\n\t\t\tif (i.second.get", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # An interval [front, end) is split into two sub-intervals where the \n    # first value in the first word is the same as the first word of the \n    # first word of the first word of the first word.\n    # The first word of the first word is", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t}\n\t\tExpect(21);\n\t\tExpect(1);\n\t\tExpect(1);\n\t\tExpect(1);\n\t\tExpect(1);\n\t\tExpect(1);\n\t\tExpect(1);\n\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           # ... rest of the code ...\n            # ... rest of the code ...\n            # ... rest of the code ...\n            # ... rest of the code ...\n            # ... rest of the code ...\n            # ... rest of the code ...\n            # ... rest of the code ...\n           ", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"https\");\n\t\treturn new ServiceDescription(\"_openHAB-server._tcp.local", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name);\n            }\n            permissions.add(permissionEntry);\n            permissionEntry.setParent(permissionEntry);\n            permissionEntry.setParent(permissionEntry);\n            permissionEntry.setParent(permissionEntry);\n            permissionEntry.setParent(permissionEntry);", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', nomatch=True)\n        for device in devices:\n            assert device.subsystem == 'input'\n    def test_match_sys_name(self, context):\n        devices = list(context.list_devices(\n            subsystem='input',", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   dev = Device(deviceToken)\n    # dev.newUser(loginId, password)\n    # dev.check_inspection()\n    # dev.notification_post(token=None)\n    # dev.newUser(loginId, password)\n    # dev.mainmenu", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "```\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           InvalidateProperties();\n        }\n    }\n}\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String dev : devices) {\n            // Check if the device is already in the list of live devices\n            if (dev == null) continue; // skip the device that is not found in the live list\n            // Check if the device is not already in the list of live devices\n           ", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   // This migration only triggered a test we aren't interested in any more.\n    // if (lastSeenVersion < Version.TEST_ARGON2) {\n    // jobs.put(Version.TEST_ARGON2, new Argon2TestMigrationJob());\n   ", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split[0].equals(\"\")) continue; // skip empty lines\n      entries.add(new Entry(Arrays.asList(split[1].split(\",\")), lineCount));\n      entries.add(new Entry(Arrays.asList(split[1]), lineCount));", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       if os.path.exists(os.path.join(path, sub_path)):\n            return sub_path\n        # else, try the path in env[var]\n        for path = os.path.join(path, sub_path):\n            if os.path.exists", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def __init(self, *args, **kwargs):\n        _init_python_datasource(self, *args, **kwargs)\n\ndef __init(self, *args, **kwargs):\n    _init_python_datasource(self, *args, **kwargs)\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   if want.ip is None:\n        raise F5ModuleError(\n            \"Specifying an IP address is required\"\n        )\n    if want.port is None:\n        raise F5ModuleError(\n        \"Specifying a port number is required\"\n        )\n\n   ", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self):\n        return self.MethodAddView.fill()\n    def read(self):\n        return self.read()\n    def fill(self):\n        return self.read()\n    def read(self):\n        return self.read()\n    def fill(", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           // check if the class is annotated with @Elsu.EventPublisher\n            // if yes, then subscribe to its events\n            // else, do nothing\n            // check if the class is annotated with @Elsu.EventPublisher\n            // if yes, then sub", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           \"dummy\",\n            view_name=\"update_thread\",\n            data={\"body\": \"dummy\", \"title\": \"dummy\"})\n        self.client.post(reverse(\"update_thread\", args=(self.thread,)))\n        self.client.post(reverse", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           manifestSrc = source[0].abspath + '.manifest'\n            if os.path.exists(manifestSrc):\n                env.subst('$', manifestSrc)\n                env.subst('$', manifestSrc)\n                # Run the rest of the code below\n", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(errorStatus, new SubProgressMonitor(getShell().getDisplay().getProgressMonitor()).getProgressMonitor());\n        } catch (CoreException e) {\n            recordError(errorStatus, error);\n            displayError(error.getStatus());\n        }\n    }", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\n\t\treturn super.init(smi, sdi);\n\t\t\n\t\t// End of the method\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('12:30..+5', last) == (d(2014,1,30, 12,30), d(2014,1,30, 13,50))\n    assert f('12:3", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           }\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n            //Add spawn\n           ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       session = self.vm.wait_for_login(self.params.get(\"login_timeout\"))\n        if not self.vm.is_dead:\n            raise exceptions.TestFail(\"VM is not dead after login timeout\")\n    def check_guest_suspend(", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       // ...\n        // ...\n        // ...\n        // sub.close();\n        // ...\n        // service.term();\n        // ...\n        // rc.get();\n        // ...\n        // received = rc.get();\n        // System.out.println(", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n                // this is the decorator of the FTDecorator\n                // the decorator of the FTDecorator\n            }\n            this.owner.getDecorator().onSend", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value & 0xFF) | (value << 24));\n\t\t\t}\n\t\t}\n\t}\n}\n\nThis code is a partial implementation of the MakeEverythingPublic task, which is a part of the dnSpy plugin", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.cwd = cwd\n        self.fm.env.directory = cwd\n        self.fm.env.file = one_file\n        self.fm.env.cut = True\n        au_flags.append('-A')\n        au_flags", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.COMTest\");\n\t\t\tAssert.AreEqual (typeof (COMTest), typeof (COMTest", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       OtherLocale = Locale.objects.get(code='en-US')\n        self.assertEqual(da, OtherLocale)\n        self.assertNotEqual(da, NextLineLocale)\n        self.assertNotEqual(da, NextLineLocale)\n        self", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            self.commands.answer(cmd)", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        group.onEvent(new PlayerGroup2.onEvent(player, player.getPlayerGroup2(), player.getObjectId(), player.getGroupMembers(), player.getGroupMembers(), player.getGroupMembers(), player", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       return highlight(\n            [\n                (Token.Literal, s)\n                for s in formatter(toks)\n            ],\n            formatter,\n            outfile,\n            outfile,\n            **params\n            )\n    def show(self, *toks):", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       self.assertEqual(self.test_update_cell_based_on_data_does_not_clear_cell_when_row_has_no_children, False)\n    def test_update_cell_based_on_data_clears_cell_when_row_", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\t// call super\n\ttry {\n\t    return super.doStartTag();\n\t} catch (PageException pe) {\n\t    throw new PageException(\"Invalid tag\", \"InvalidTag\");\n\t}\n\t// check if there is an error", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                if (nl != null && nl.Count > 0) {\n                    string[] lines = new string[nl.Count];\n                    for (int j = 0; j < nl.Count;", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                   m_key[i] = new ExodusSummoningTomeActivation();\n                    //m_key[i] = new ExodusSummoningTomeActivation();\n                    //m_key[i] = new ExodusSummoningTome", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(new ChangeOfServiceVo(beans[i].getId(), beans[i.getId()]));\n\t\t}\n\t\t\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n        Version[] versions = new Version[Version.values().length];\n        for (int i = 0; i < Version.values().length; i++) {\n            Version v = Version.values()[i];\n            v.alignmentPatternCenters = new int[AlignmentPattern.", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\tif(requestManaExact(stack, player, cost, remove) == cost)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\treturn 0F;\n\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n```\nThis code is a copy of the file `settings.py.template` in the `django-agfk` project`s default settings. It is a Django 1.11.11.11.11.11.11.11.11", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but was given {1} instead.\",\n\t\t\t\t\t\tLightCount, NextFrame.PixelCount));\n\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t}\n\t\tpublic void Clear ()\n\t\t{\n\t\t\tOutput", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        return true;\n        return true;\n        return false;\n        return true;\n        return true;\n        return true;\n        return true;\n        return true;\n", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = p.readInt();\n            dc.status = p.readInt();\n            dc.time = p.readInt();\n            dc.duration = p.readInt();\n            dc.", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.getLicenceType().equals(LicenceImpl.LICENCE_TYPE_APPLICATION)) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSize; x++)\n            {\n                // Calculate vertices\n                for (int xTile = 0; x < xSize; x += xPixelsPerTile; xTiles = (xSizeP - 1));", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\t// Call the \"add\" method from the PyBitmessage API\n\t\t\tclient.call(API_METHOD_ADD, null);\n\t\t\t\n\t\t\trawResult = client.call(API_METHOD_ADD, null);\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int i, @Nullable VisualPosition i1)\n\t\t\t{\n\t\t\t}\n\t\t\tpublic void setBlockSelection(final int i, @Nullable Visual", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n            out.writeUTF(\"Not found: \" + name);\n        }\n        else\n            out.writeBoolean(false);\n            out.writeUTF(name);\n            out.writeUTF(name);", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n        }\n\n    }\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n}\n", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .IsValid() && !minionPrediction.Aoe.AoeTargetsHitCount > 0)\n                                {\n                                    result.Add(minion);\n                                    }\n                                }\n                            }\n                        case CollisionableObjects", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       final List<Node> path = new ArrayList<>();\n        final List<Node> path2 = new ArrayList<>();\n        final List<Edge> edges = new ArrayList<>();\n        final List<Edge> edges2 = new ArrayList<>();\n        final List<Node> ancestors = dag.getAnc", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop.GetChild(i);\n                    if (child is Drawable)\n                        continue;\n                    if (child is PlaceBase)\n                        continue;\n                    break;\n                    // ...\n                    // Find the element with the specified name\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       return super.equals(obj);\n    }\n    }\n    @Override\n    public String toString() {\n        return \"FinancialEntityAttachment [attachmentId=\" + attachmentId + \", fileId=\" + fileId + \", file=\" + file + \"]\n    }", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                        {\n                            // AddDelay(mobiles[i]);\n                            AddDelay(mobiles[i]);\n                        }\n                        // AddDelay(mobiles[i]);\n                        // Add", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(msg, formatted);\n\t\t}\n\t\t}\n\t\tpublic virtual void Kick(PlayerMobile user, bool kick = true)\n\t\t{\n\t\t\tif (IsBanned(user))\n\t\t\t{\n\t\t\t\tB", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n  @Override\n  public String[] getComponentsIds(String[] asComponentsIds) {\n    return mock.getComponentsIds(asComponentsIds);\n  }\n  @Override\n", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                            files[++index] = (String]\n                    at line 100);\n                    }\n                    FilePropertiesDialog.instantiate(new File(files[i", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n        Channel channel = this.channel;\n        this.m = null;\n        this.j.writeLock().lock();\n        this.i.clear();\n        this.j.writeLock().lock();\n        this.i.clear();\n        this.m = null;\n", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n        z_key = sorted(sorted(z_dict[z_key])[0])\n\n        # get the period value\n        z_value = z_dict[z_key]\n        \n        # get the period value\n        z_value = z_dict[z_", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne) + \" \" + name;\n    } else {\n      return context.getString(resourceTwo) + \" \".repeat(recipients.size());\n    }\n  }\n}\n}\n}\n\nI have this code:\n\npublic class", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"RUST_PATH\"] = extra_path\n        if gonk:\n            env[\"RUSTC_HOME\"] = self.config[\"tools\"][\"rust-root\"]\n        if gonk:\n            env[\"CARGO_BUILD_ID\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_tests):\n                source_file = source_file_items(tests_root, rel_path_to_url(path, type_tests.rel_path))\n                source_file_items = source_file_items(tests_root", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compileTimeStrategy.canUseOldCompiledScript()) {\n            removeOldScript();\n        }\n        if (script instanceof Script) {\n            script = (Script) script;\n        } else {\n            script = (File script);\n        }\n        if (script instanceof", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           throw new NotSupportedException();\n        }\n        }\n    }\n}\n\nNote: This code snippet is not complete and does not compile.\n\nYou can use the code to create a dynamic network layer for a specific type of configuration.\n\nYou can also use the code to create", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(self.y_means.shape[0]):\n        Etf = tasks[:,0]\n        grad_Etf = np.reshape(grad_var*self.ydely_means[1:], (1,3))\n        transformed_", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tint compare = this.getClass().getName().compareTo(obj);\n\t\t\n\t\treturn compare;\n\t}\n}", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(stacks[0].getTags().get(0), \"search-tag1\");\n        assertEquals(stacks[1].getTags().get(0), \"search-tag1\");\n        assertEquals(stacks[2].getTags().get(0), \"non", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       crawlParameters.add(new Parameter(CrawlerService.DEPTH_PARAM, depth));\n        //EXCLUSION REGEX\n        pf.addParameter(new Parameter(CrawlerService.EXCLUSION_REGEX_PARAM, exclusion", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// [$captures] (...)\n\t\t\t// [$captures] (...)\n\t\t\t// [$captures] (...)\n\t\t\t// [$captures] (...)\n\t\t\t// [$captures] (...)\n\t\t\t//", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (extendedWillHit > 0)\n                    {\n                        extendedWillHit = 0;\n                        extendedFarmLocation = new Vector3(extendedWillHit);\n                    }\n                    extendedWillHit = 0;\n                   ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setFormOpened(form);\n\t\tsuper.setFormModal(form);\n\t\tsuper.setFormOpened(form);\n\t\tsuper.setFormModal(form);\n\t\t\n\t\tsuper.setFormContext(form);\n\t\tsuper.", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   match = re.search(pattern, frozen_output)\n    if match:\n        return match.group()\n    return None\ndef compute_prereqs_hash():\n    # Compute the hash of the prereqs_cache_dir.\n    # If the", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': (1, 2, 3)\n        })\n        with self.assertRaises(AssertionError):\n            f.subs.add(r.subs)\n        self.assertEqual(f.subs, r)\n        self.assert", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x**2, (x, a, b)) * Sum(x**2, (x, a, b))) == \\\n        Sum(x**2, (x, a, b)) * Sum(x**2, (x, a, b))\n   ", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tvar ret=UnityEngine.WWW.EscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue(", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, this._newStartingIndex);\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\n                this.InitializeRemove(action, this._oldStartingIndex);\n            }\n            else\n            {\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           XMLStreamWriter writer = (XMLStreamWriter)result;\n            XMLStreamWriter writer = (XMLStreamWriter)streamWriter;\n            XMLStreamWriter writer = (XMLStreamWriter)streamWriter;\n            XMLStreamWriter writer = (XMLStreamWriter)streamWriter;\n            XMLStreamWriter writer", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n            }\n            NextToken(TokenType.And, TokenType.Or, TokenType.RParen);\n        }\n        private string Param(string param)\n        {\n            return Token2C", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "#endif\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // ...\n            }\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n            // ...\n           ", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILRuntime.GetObjectType(typeof(UnityEngine.Ray));\n            __intp.Free(ptr_of_this_method);\n            return ILIntepreter.Minus(__esp, 1);\n        }\n        static", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       self.assertEqual( int(lastImageValue), int(lastChannelValue)-1)\n        # Check that the image value is one less than the last frame value\n        self.assertEqual( int(lastImageValue), int(lastValue))\n        # Close the browser\n        self.", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   class KexGSSGroup1(KexGSSGroup1):\n        def __init__(self, transport):\n            super().__init__(transport)\n            self.kexgss = self.transport.kexgss_ctxt\n            self.kexgss_", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setUserObject(overallNodeName);\n            tree.setExpandable(overallNodeName + \"\");\n            tree.expandPath(overallNodeName);\n            tree.setExpanded(true);\n            tree.setSelectionPath(overallNodeName);\n           ", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.cr.cr.execute, to_date)\n                           [to_date]\n                           [from_date]\n                           [from_date]\n                           [to_date]\n                           [to_date]\n                           [to_date]\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   #Integrate the WL X tSZ halomodel for a given source redshift distribution\n    #zl = lnzarr[i]\n    #zarr[i] = zarr[i]\n    #zint = np.exp(lnzarr[i])", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = Math.max(bounds.width, 100),\n        // calculate the minimum width of the text\n        // assuming the text is centered, and the width is\n        // measured from the left edge of the text\n        int textWidth = getText().getWidth()", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "f1=lambda x1,y1,z1,x2,y2,z2,x2_v,z2_v=np.array([0.653,0.945,0.847,0.306,0.84", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void CloseButtonClick(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tthis.Close();\n\t\t}\n\t\tprivate void ExitButtonClick(object sender, RoutedEventArgs e)\n\t\t", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "           if params[1]['bins'] is None:\n                ObjectProxy(self, *args)\n            else:\n                ObjectProxy(self, *args)\n            if params[0]['bins'] is None:\n                ObjectProxy(self, *args)\n            else:\n", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getXmpp().getStorage().removeItem(contact);\n        }\n    }\n}\n}\n\\end{code}\n\nI am trying to understand how this code works, but I am having trouble understanding how it works. I am getting an error in the line:\n", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", PIL.Image.convert(\"L\", PIL.Image.fromarray(im1)) )\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", PIL.Image.fromarray(im1", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tret.add(Arrays.asList(DFI_MF));\n\t\t\tret.add(Arrays.asList(DFI_MF));\n\t\t\taddLog24(rsp, ret);\n\t\t}\n\t\treturn ret;\n", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   if self.body_size > 0:\n        yield RawBytes(self, \"body_size\", \"Body size\", self.body_size)\n        return self.body_size\n    else:\n        yield BaseFlags(self, \"body_size\", \"Body size\", self", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t\tsocketAdapter.disconnect();\n\t\t// // tidy\n\t\t// tidy();\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   class Server(http.server.HTTPServer):\n        \"\"\"A WSGI server class for serving PathInfoDispatcher.\"\"\"\n        def __init__(self):\n            self.app = Path_info_dispatcher\n        def handle_request(self, environ, environ_status):\n           ", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t#print \"Loading model.data\"\n\t\t#print \"Loading model.data\"\n\t\t#print \"Loading model.data\"\n\t\t#print \"Loading model.data\"\n\t\t#print \"Loading model.data\"\n\t\t#print \"Loading model.data", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(100) < chance)\n            {\n                res = EnhanceResult.Success;\n                resMessage = resMessage = \"You successfully enhance the item!\";\n            }\n            else\n            {\n                res = EnhanceResult.", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Check for required values\n            if displayname:\n                entry_name = d['name'] = get_text(enumeratedValue).strip()\n            else:\n                entry_name = get_text(enumeratedValue).strip()\n            if entry_name == '':", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   arChkBx = new CheckBox[0];\n                    pnlServices.Controls.Clear();\n                }\n            }\n        }\n        private void FrmSetup_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            if (", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private Ext.Net.Extenders.MultiSelectBase multiSelect;\n        private Ext.Net.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int i = 0; i < this.trianglesUsed[textureHash];\n                     tri++)\n                {\n                    for(int j = 0; j < 3; j++)\n                    {\n                        float x = this.vertexArray[", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response.setdefault(exposedHeaders, []).append(header)\n    return response\ndef expose_header(response):\n    # ...\n    # ...\n    # ...\n    return response\ndef expose_header(response):\n    # ...\n    # ...\n    # ...", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   // remove the oldest driver from the idle pool\n                    oldDrivers.Add(idlePool.Dequeue());\n                    // remove the oldest driver from the idle pool\n                    // and return it to the caller\n                    // remove the oldest driver from the idle pool\n                ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\ndef _round_shape(shape):\n    \"\"\"Round the shape to the nearest integer.\n    Args:\n        shape (list): shape of the area\n    Returns:\n        shape (list): rounded shape\n    \"\"\"\n    #", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "qst = QuestState(qst)\nqst.set(\"cond\",\"0\")\nqst.set(\"cond_2\",\"0\")\nqst.set(\"cond_3\",\"0\")\nqst.set(\"chosen\",\"\")\nqst.set(\"grid\",\"\")\n", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tstring[] str = new string[] { \"[\", num.ToString(\"D2\", \"D2\", \"D2\", \"D2\", \"D2\", \"D2\", \"D2\", \"D2\", \"D2\", \"D2\", \"D2\", \"D", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _sCurProgram = new ShaderProgram();\n            _sCurProgram = this;\n            _Attributes = new AttributeCollection(this);\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Attributes =", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   self.name = \"MyModel\"\n    self.description = \"MyModel\"\n    self.solve = DictList()\n    self.solve.append(1)\n    self.solve.append(1)\n    self.solve.append(1)\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.TumourGroupListVoBean bean = (ims.clinicaladmin.vo.TumourGroupListVoBean", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.setAnimation(set);\n        view.startAnimation(animation);\n    }\n\t\n\tprivate void doNavigationBack() {\n\t\tIntent intent = new Intent(WeaveBookmarksListActivity.this);\n\t\tstartActivity(intent);\n\t}\n\t\n\t", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (HighestNumber.Equals(0))\n                {\n                    HighestNumber = ARow.FieldKey = HighestNumber + 1;\n                }\n                else\n                {\n                    HighestNumber = ARow.FieldKey = HighestNumber + 1;\n", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tthis.predictions(pssm, scoresSol);\n\t}\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
