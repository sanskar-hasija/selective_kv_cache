{"pred": "\t\t\t\tGump g = (Gump)(m_Participants[i]);\n\t\t\t\tif ( g is Gump )\n\t\t\t\t{\n\t\t\t\t\tGump g2 = (Gump)(m_Participants[i]);\n\t\t", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        # Open the file for writing\n        format = Format('wav', 'pcm16')\n        b = Sndfile(ofilename, 'w', format, 1, 11025)", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   unisubs_page = UnisubsPage()\n    unisubs_page.open_video_page(\"video_id\")\n    print(unisubs_page.video_title())\n    print(unisubs_page.add_translation())\n    print(un", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"current\", styleValue.getCurrent());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += \"Hint: \" + str(a) + \"\\n\"\n        return ret\n    def is_correct(self, answer):\n        return False\nclass _AnswerData(_QAData):\n    def __init__(self, answer", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"Certificate:  \" + btoa(cert.getEncoded()));\n            }\n            s.println(\"***\");\n            }\n        }\n    }\n}\n/*\n * Certificate", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public void setListener (SpaceListener listener) {\n        sl = listener;\n    }\n}\n\n\n\n\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpublic static class AlchemicalCatalyst extends Item {\n\t\tpublic static final int COST = 1;\n\t\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = SimpleXMLElement(environ['CONTENT_TYPE'] = \"text/xml; charset=utf-erson\",\n                                  content=environ['CONTENT_LENGTH'])\n        response = self.dispatcher.dispatch(request)\n        start_response('200 OK", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\nNext line of code:\n        mark = \"unsetRe", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   self.action_new_file(login, password, path, session)\n\nPlease help me resolve this issue.\n\nI have tried the following:\n\n1. Checked the spelling of the functions and parameters.\n2. Checked the spelling of the function and parameters in the", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsFalse (a.Union (b).IsSubsetOf (a), \"!Subset-DifferentIdentities\");\n\t\t}\n\t}\n}\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   return self.trust_managers\n\nclass TrustManagerFactory(TrustManagerFactory):\n    def getTrustManagers(self, type):\n        return [self.createTrustManager(type)]\n    def createTrustManager(self, type):\n        return Composite", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomain(domain);\n        request.setAttribute(\"domain\", domainInfo);\n        DomainConfigForm dcf = new DomainConfigForm();\n        dcf.setDomain(domain);\n        request.setAttribute(\"domainConfigForm\", dcf);\n    }\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\nThe code above defines a class `Renderer` that inherits from `asyncio.Task`. It contains methods for setting up the rendering process, creating an encoder, and setting up a data stream pipe. The `data_queue` and `datastream_address` attributes are used to communicate", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\t//get the weight percentage\n\t\t\t\t\tdouble weightPercent = (double) store.GetValue (iter, columnBool2);\n\t\t\t\t\t//calculate the weight percentage new value\n\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] != null) {\n                argValues[i] = args[i].getArgument(request, locale);\n", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms.put(id, loadFromFile());\n\t\t\t}\n\t\t}), TIMED_DATA(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\taddNode(playbackNode);\n\t\taddNode(shortcutsNode);\n\t\taddNode(generalNode);\n\t\tparent.setBlockOnOpen(true);\n\t\tparent.open();\n\t}\n\tpublic void updateAccelerators() {\n\t\t", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n                m_Owner.FinishSequence();\n            }\n        }\n    }\n}\n\nPlease let me know if you need any further help.", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n    def _init_identity_map(self):\n        self.identity_map = self._identity_cls()\n        self.identity_map.init()", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tString name = field.getDeclaringClass().getName();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `r'/foo/*'`` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs:\n        if not self.request.path.endswith(\"/\"):\n", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n}\n```\n\nPlease modify the code to add a `View` control to the `MultiView` control.\n\nPlease note that the code is quite complex and there are many methods and properties that are not modified", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n\nHowever, when I run the script, I get the following error message:\n\nTraceback (most recent call last):\nFile \"download_wigle.py\", line", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = android_builds(build, builds)\n    # Check if the user is on an old version of Firefox\n    # and, if so, display a message to update\n    if check_old_fx:\n        # Check if the user is on an old version of Firefox\n       ", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (objectID==null) {\n\t\t\treturn false;\n\t\t}\n\t\tTStateBean stateBean = LookupContainer.getStateBean(objectID);\n\t\tif (stateBean==null) {\n\t\t\treturn false;\n\t\t}\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is InvocationExpressionSyntax) {\n                    var invocation = (InvocationExpressionSyntax)argument.Parent;\n                    var methodName = invocation.Expression.Value.ToString();\n                    if (method", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_draft=True)\n        self.assertEqual(0, split_test.user_partition_id)\n        # Update to second group configuration.", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           WriteFont(writer, piref, parms);\n            // Create the CIDFontType2 dictionary\n            PdfIndirectReference fontDescriptor = new PdfIndirectReference(fontFile);\n            PdfStream stream = new PdfStream(PdfEncodings.ConvertTo", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.x = (int)(xScale * (graphCell.getX() - cell.getX()));\n\t\t\t\t\t\tcgn.y = (int)(", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        task.addListener(new ListenableFutureTaskListener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            bitmapReference = new SoftReference<Bitmap>(result);\n          }\n          @", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   @navigator.register(Node, 'ManagePolicies')\n    class ManagePolicies(CFMENavigateStep):\n        VIEW = NodeManagePoliciesForm\n        prerequisite = NavigateToSibling('EditTags')\n", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \"probability=\" + probability\n            + (getScopes() != null ? \" scopes=\" + getScopes() : \"\");\n    }\n}\n\nNote: This is just an example implementation of the Effect class, and you may need to modify", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_search(token, {'itype': 'fqdn', 'groups': 'private'})\n    i = json.loads(i)\n    i = [i['_source'] for i in i['hits']['hits']]\n", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   self.assertEqual(person.name, 'owner')\n    self.assertEqual(organization.name, 'company')\n    self.assertEqual(employee.name, 'employee')\n    self.assertEqual(employee.employer, organization)\n    self.assertEqual(", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           else:\n                self.plot_line(x, y)\n        else:\n            self.plot_line(x, y)\n    def plot_line(self, x, y):\n        self._plot.plot(self._inspector.echo_sample_ind,", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                var watcher = _fileSystemWatchers.GetOrAdd(path, new FileSystemWatch", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic Set<K> keySet() {\n\t\treturn internalMap.keySet();\n\t}\n\t@Override\n\tpublic Collection<E> values() {\n\t\treturn new TransformingCollection<", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) > 0:\n            contobj = resbrains[0].getObject()\n            if contobj.", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset\n\t\t\t{\n\t\t\t\tm_ID = value;\n\t\t\t}\n\t\t}\n\t\tinternal byte m_X;\n\t\tinternal byte m_Y;\n\t\tinternal byte m_Z;\n\t\tpublic Tile( int", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": Parcel voice channel: {4}\",\n                    //                  scene.Region", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriodCur.DateStart=new System.DateTime(textDateStart.Text);\n\t\t\tPayPeriodCur.DateStop=new System.DateTime(textDate", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_create', context, data_dict)\n```\nYou can see that there are several functions that have an `auth_allow_anonymous_access` decorator. These are the functions that are accessible to anonymous users without any authentication.\n\nPlease complete", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tNode childNode = node.getChild(example.getValue(predictionAttribute));\n\t\t\t\t// assigning child node\n\t\t\t\toutcomes[parentIndex] = childNode.getPartitionId();\n\t\t\t\t// updating depths\n\t\t\t\t", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        #endregion // Methods\n        #region Overridden Methods\n        #region ITranslationProviderLanguageDirection\n        #region ITranslationProvider", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           ch = string.charAt(offset);\n            if (codePoint <= 0x7F) {\n               return _asciiSet[ch] ? offset : -1;\n            }\n            codePoint = codePoint - 0x10000;\n            if (", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     ValidationResults results = ValidationResults.SUCCESS;\n      if (accessionNumber != null && accessionNumber.length() > 0) {\n        // check if the accession number is already in use\n        SampleDAO sampleDAO = new SampleDAOImpl();\n       ", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Version != ModData.Manifest", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor (int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add(beans[x]);\n\t\t}\n\t\treturn coll;\n\t}\n}\n\n\n\npublic class CatsReferralPendingE", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   if prnum == 'advanced':\n        advanced()\n    elif prnum == 'viewsdb':\n        viewsdb()\n    elif prnum == 'date':\n        date()\n    elif prnum == 'donate':\n        donate()\n    else:\n        notify(\"", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```\nI'm not sure what you're trying to do, but I can tell you that the code you provided is not a complete DIRAC script, and it's not a working script either.\n\nFirst of all, the script is missing a `from dirac.lib import *`", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot.World.WorldActor.Trait<IResourceLayer>().GetRallyPoints());\n\t\t}\n\t\tvoid IBotResumeProduction.ResumeProduction()", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlanGraph();\n    }\n    public void compileAndCache(String sql, int paramCount, String joinOrder, Object partitionParameter, boolean inferSP, boolean lockInSP, DeterminismMode detMode) {\n        compile(sql, paramCount, joinOrder,", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.Tab", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Bits = (word)data_bits;\n\t\t\tdcb.Parity = (BaudParity)parity;\n\t\t\tdcb.StopBits = (word", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=self.user)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n        self.assertEquals(page.context", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   _keep_tempdir = parser.parse_args().keep_tempdir\n    #print \"keep_tempdir is\", _keep_tempdir\n    unittest.main()\n    #print \"Finished!\"\n\nif __name__ == \"__main__\":\n    # This", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.append(self.newAPList[i])\n\t\t\ti += 1\n\t\t\tif i >= len(self.newAPList):\n\t\t\t\ti = 0\n\t\t\tself.list.append(self.key_", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               int w = fontX + (n * size);\n                int h = n * size;\n                return new Rectangle(0, 0, w, h);\n            }\n        }\n    }\n}\n```\n\nPlease note that this code is just a sample, you will", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n}", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       x_points = np.meshgrid(x_points, np.linspace(-90, 90, 100))\n        # Check the interpolated values against a known result.\n        sample_points = [\n            (\"longitude\", x_points.flatten", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket p = GetCurrentPacket();\n            if (p == null)\n            {", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;32;40m'\n    else:\n        print 'color'\n    print\n\ndef main():\n    # load the data\n    # build the dataset\n    # slice the wav files\n   ", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        }\n    }\n}\n\\end{code}\n\nThe code is a reference counting set implementation in C# using the `System.Collections.Generic` namespace. The `RefCountedSet` class provides a way to store a collection of unique keys and a reference counter for each key.", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {\n            treeNode1,\n            treeNode28,\n            treeNode63});\n            this.treeView1.SelectedImageIndex = 0;\n            this.treeView", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( self, functionName, *argTypes, **kwds):\n        \"\"\"Create a function pointer to a no-op function\"\"\"\n        from OpenGL import error\n        return error.noopFunction( functionName, *argTypes, **kwds)\n    def getGL", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(header, emptyStreams.size());\n            baos.write(emptyStreams.toByteArray());\n            baos.write(NID.kEnd);\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   for (int i = 0; i < ticker.length; i++)\n                    {\n                        ticker[i].setAlpha(Math.min(alphaLevel, alphaLevel *= fps));\n                        ticker[i].setPaint(getBackground());\n                ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_not", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n            }\n        }\n    }\n}\n```\nPlease note that the code is not fully tested and may contain errors. Also, the `RecyclePotion` method is not implemented.\n\nPlease let me know if you have any questions or need further assistance.", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n    }\n}\n\\end{code}\n\nPlease note that this code is a partial implementation of the Sega G80 security chip, and it's not a complete implementation. Also, it's not a working code, it's just a proof of concept.\n\nPlease let", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self._course_dict['org'] + '/' + self._course_dict['number'] + '/' + self._course_dict['run']\n    def _create_course(self):\n        \"\"\"\n        Create the course in the course fixture.\n        \"\"\"\n        self", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length>1) {\n\t\t\tchance=Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\t\n\t\tint result = (int)(chance*100);\n\t\treturn result;\n\t}\n}\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   return 0, \"Meter \" + name + \" deleted\"\n    # If the meter does not exist, do nothing\n    return 0, \"Meter \" + name + \" does not exist\"\n    # If the meter does not exist, do nothing\n    return 0, \"", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.Location = new System.Drawing.Point(6, 33);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(209, 1", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for (plugname, plug) in self.loaded_plugins:\n            try:\n                pl_log = self.archive.new_file(\"plug_%s.log\" % plugname)\n                pl_log.new_line()\n                pl_log.new_", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   s = ICategoryFossil()\n    s.setId(123)\n    s.setName(\"Test Category\")\n    print s\nNext line of code:\n    s = IConferenceFossil()\n    s.setId(123)\n   ", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                       parent.mirthClient.importMessage(channelId, message);\n                        }\n                        return true;\n                    }\n                };\n                result = messageImporter = new MessageImporter(messageBrowser, messageWriter);\n            } else {\n                result = messageImporter", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = ((Scriptable) value).getInt(LAYER, -1);\n\t\t\t\t\tif (layer == -1) {\n\t\t\t\t\t\tthrow new Exception(\"Layer not found\");\n\t\t\t\t\t}\n\t\t\t\t}", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && !currentSession.equals(Session.getActiveSession())) {\n            userProfilePicID = userProfilePicID != null ? userProfilePicID : currentSession.getUser().getId();\n            userProfilePic = userProfilePicID", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.strength /= sum;\n\t\t}\n\t}\n", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }\n        ], self.build.stages_to_list())\n    def test_to_xml(self):\n        \"\"\"Test converting BuildJob to XML.\"\"\"\n        # test empty build\n        self", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LongRad = (LongOrigin + (Long-LongOrigin)*6 + 180) % 360\n    LatRad = (phi1 - (eccSquared/4 + 3*eccSquared*eccSquared/64 + 5", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       ReportUserForm(request.POST, instance=user).save()\n        messages.success(request, \"Reported user!\")\n        return HttpResponseRedirect(reverse('profile'))\n    else:\n        form = ReportUserForm(instance=user)\n    return render_to_response", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   field_names = ['name']\n    label = \"Add new series\"\n    @property\n    def page_title(self):\n        \"\"\"The HTML page title.\"\"\"\n        return 'Add new series'\n    def validate(self, data):\n        \"\"\"See `LaunchpadForm", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n    public void writeToFile(File file) throws IOException\n    {\n        //TODO Auto-generated method stub\n    }\n    public void writeToFile(File file, boolean append)", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, re.compile(regex)))\n            return new_positional_tags_list\n    def compile_tag_regex_from_file(file_tags):\n        with open(file_tags, 'r') as f:\n", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n        }\n    }\n}\n\nI am trying to implement the GenericParameter class, but I am getting an error saying that the method \"GetCustomAttributes\" is not implemented.\n\nI have implemented the other methods, but I am not sure", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_PID00(data=b''.join(supported_pids))\n\nPlease provide the complete code with the above code as the starting point.", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.add_standard_objects()\n\ndef main():\n\tglobal ready_pipe\n\tbus = dbus.SessionBus()\n\tbus.add_signal_receiver(on_name_owner_changed,\n\t                        'NameOwnerChanged',\n\t                        '", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\t\n\t\t\t\tthis.AddSpell(typeof(ManaVampireScroll), Reg.BlackPearl, Reg.Bloodmoss, Reg.MandrakeRoot, Reg.SpidersSilk);\n\t\t\t\t\n\t\t\t\t\n", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def __enter__(self):\n        self.push()\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if exc_type is None:\n            exc_type = sys.", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, needs_columns=needs_columns)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ###################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(r);\n            }\n        }\n        return result;\n    }\n}\n */\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # ...\n\nThe code is a Python script that defines functions for computing various\nparameters", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           return regx\n        else:\n            return regx\n    def _getUrl(self, url):\n        \"\"\" Return the Proxyfied URL of the page \"\"\"\n        if self.isEnabled():\n            return self.getProxyURL() + self.param + urllib.quote", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\tif (type == FontSize.AsUnit) {\n\t\t\t\treturn unit.ToString (fmt);\n\t\t\t} else {\n\t\t\t\treturn font_size_names [type];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar inner = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(inner.Properties.Count, Is.EqualTo(2));\n\t\t\tAssert.That(inner[\"The outermost value\"].Type, Is.EqualTo(TokenType.", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\nT2 edge = new T2(w, h);\nedges.add(edge);\n}\n            }\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices()", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = isoelastics.Isoelastics(ds)\n    iso.get(col1=col1, col2=col2, add_px_err=add_px_err, px_um=px_um)\n    # ...\n   ", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final String[] arg = args;\n        final String filename = arg[0];\n        final String namespace = arg[1];\n        final int mode = Integer.parseInt(arg[2]);\n        final int maxDiff = Integer.parseInt(arg[3]);\n        final int maxDiff", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   assert alert.lowest_spot_price(history) == 0.105200\n    def test_check_for_alert_with_no_history(self):\n        \"\"\"If there are no history, there should be no alert.\"\"\"\n        history = []\n", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t\t}\n\tpublic String getErrorMessage()", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t\twindow.OnGraphicsContextDisposed();\n\t\t}\n\t}\n}\n\";\n\nNote that this code is just an example and may not work as-is", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n    @Override\n    public String toString() {\n        if (m_toStringRepr == null) {\n            m_", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                   adminUser = getEucalyptusAdmin();\n                  }\n                }\n              } catch (AuthException e) {\n                // ignore\n              }\n            }\n            // Transfer the ownership of the object to the owning account\n            // Transfer the ownership of Snapshot", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           get { return _selectedFolderChanged; }\n        }\n        void IApplicationComponent.OnComponentStateChanged(IApplicationComponent component, ApplicationComponentState state, ApplicationComponentState previousState)\n        {\n            if (component == this)\n            {\n                if (state == ApplicationComponentState", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(parameters);\n        assertEquals(isImportAsNewEntity, command.canDoAction());\n        if (isImportAsNewEntity) {\n            assertEquals(name, command.getTemplateName());\n        } else {\n", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.push('ANOTHER_KEY', 'ANOTHER_VALUE')\n\nI'm trying to understand how to use this code and how to implement my own script. Can someone please help me understand how to use this code and how to implement my own script?\n\nI have a script", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)\n\t\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    public Builder Builder() { return CreateBuilder(defaultInstance); }\n    public Builder CreateBuilder(SendInvitationRequest prototype) {\n      prototype_ = prototype;\n      Buiilder builder = new Builder();\n      return", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(i, x);\n                }\n            }\n        }\n    }\n    protected void writeObject(JMEExporter exporter) throws IOException {\n        super.writeObject(exporter);\n        exporter.writeFloatBuffer(indexBuffer", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.addAll(Arrays.asList(0, 1, 2));\n        return result;\n    }\n    public void getInitializedColumns(String pageType) {\n        m_pageType = pageType;\n        initSort();\n    }\n    public void", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForEndOfFrame();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!Users.Contains(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            if (Users.Count > 0)\n            {\n                // send email", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\t\n\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeCornerScrollThreshold)\n\t\t\t\tdirections |= ScrollDirection.Down;\n", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // check if discounts are valid\n            if (VerificationResultCollection.HasAny(TVerificationResult.HasAny(ValidationControl)))\n            {\n                // save data\n                TSubmitChangesResult submitChangesResult = ASubmitChanges.SubmitChanges(ref AVerificationResult);", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n */\n\n", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(id=...)\"\n    def __repr__(self):\n        return 'PayloadRequirements(id=...)'\n\nI have completed the code given above. Please let me know if there are any errors or", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\t\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value != _customRange)", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThis code is a `GnomeApplication` class that", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n            if (bugAnnotation.getType() == BugAnnotation.BAD_PATTERN) {\n                BugPattern pattern = bugAnnotation.getBugPattern();\n                if (pattern != null) {\n                    if (pattern.getCategory() == null) {\n                        System", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void OnDoubleClick( Mobile from )\n\t\t{\n\t\t\tif ( !Movable )\n\t\t\t\treturn;\n\t\t\tif ( from.InRange( this.GetWorldLocation(), 1 ) )\n\t\t\t{\n\t\t\t\t", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.Count > 0)\n                        {\n                            E.Cast(eFarm.FirstOrDefault());\n                        }\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        }", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, getAnchor(anchor), anchor);\n\t}\n}\n}\n\nThis code is a small utility class that provides a more readable way of creating GridBagConstraints objects. Instead of having to specify", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(\n            field_def['field_name'], field_model_def['field_name'])\n        self.assertEquals(\n            field_def['field_name'], field_def['field_name'])\n        clean_field_model_definitions()\n   ", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L, \"10\"}}});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraMultikeyIndex : RegressionExecution\n        {\n            private readonly bool namedWindow;\n           ", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def __itruenoise__(self):\n        \"\"\"\n        Noise function for particles.\n        \"\"\"\n        return NotImplemented", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view = super(view, self).save(cr, uid, res_id, value, xpath=xpath, context=context)\n\nPlease help me to complete the code.\n\nThank you in advance.", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = BasicHTML.createHTMLView(c, text);\n            c.setClientProperty(propertyKey, value);\n        }\n        if (oldValue != value) {\n            c.removeClientProperty(propertyKey);\n            c.addClientProperty(propertyKey, value);", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, content=content)\n    assert not s.name_is_non_test\n    assert s.name_is_testharness\n    assert not s.name_is_worker\n    assert not s.name_is_window\n    assert not s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.loader = new HbmLoader();\n\t\t\t}\n\t\t\tvar loader = new Loader(namedQueryReference);\n\t\t\tloader.Load(mapping.loader);\n\t\t}\n\t\tpublic void NamedQueryReference(string namedQueryReference)", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl = m_Members[i", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.pop();\n    }\n    private void moveForward() {\n        assert graphQueue.size() > 0;\n        assert !graphQueue.peek().isRoot();\n        CallsiteHolderExplorable callsite = (CallsiteHolderExplorable", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               print(\"  Running py.test with arguments:\", pytest)\n                os.environ['PYTEST_ARGS'] = pytest\n                subprocess.check_call(['python', 'setup.py', 'test', '--test-name', 'pytest', '--']\n                ", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode newValue = getCachedPhi(value, value.getStamp());\n                    if (newValue != null) {\n                        entry.setValue(newValue);\n                    }\n                    if (value != null) {\n", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n\nPlease help me complete the code.\n\nNote: I have provided the code", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonWallMapGump(from));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfrom.SendGump(new EodonWallMapGump(from, GetWorldLocation()));\n\t", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   Record.id_bibrec,\n    Record.id_bibxxx\n\nI want to create a property in Record class that will return the ID of the record merged with the record with the given ID.\nI want to create a property in Record class that will return the ID of the record that is", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user(self, username, domain):\n        user = '%s@%s' % (username, domain)\n        log.debug('Remove user: %s', user)\n        data = self.module.get(user)\n        if data is None:\n            raise", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine problematics for transformation\", res['Message' ] )\n    else:\n      self.am_setOption( 'shifterProxy', 'DataManager' )\n    return res\n    gLogger.", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(strippedBaseURI.getScheme() != null) {\n\t\t\t\taction = PLUGINS_PREFIX + action;\n\t\t\t}\n\t\t\treturn processURI(action);\n\t\t} catch (URISyntaxException e) {", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        d = yield self.run_fake_single_build(gsp, buildResults=[SUCCESS, SUCCESS],\n                                             finalResult=SUCCESS,\n                                             result", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'category'\n    self.category.scheme = 'http://example.com/categories'\n    self.assert_(self.category.term == 'category", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>(r1);\n            r2.forEach(r::putAll);\n            return r;\n        }\n", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   # Add the menu items\n    menu.menu(\"Materials\", \"Material\", \"MATERAL_MT_sss_presets\")\n    menu.menu(\"Materials\", \"Material\", \"MATERAL_MT_specials\")\n    menu.menu(\"Materials", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_IRQEnabled = map16.IRQEnabled;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMnuRoot.add(new JMenu(\"Open Document\");\n            _jMnuRoot.add(new JMenu(\"Open Document\");\n            _jMnuRoot.add(new JMenu(\"Open Document\");\n            _jMnuRoot.add(new JMenu(\"", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\n\t\t//----------------\n\t\t// Weapons\n\t\t//----------------\n\t\t// Add weapon\n\t\tAdd(\"Weapon\", 10", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn Frame.H;\n\t\t}\n\t}\n}\n}\n\nPlease help me to complete the code.\n\nAnswer:\n\nThe code you provided is a `UIView` class in an Android project. It appears that you have a `UIView` class that inherits from", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```\n# Import the sphinx-material theme\nimport sphinx_material\n\n# Add the theme to Sphinx\nhtml_theme = 'sphinx_material'\n\n# Add the theme path to Sphinx\nhtml_theme_path = sphinx_material.", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                    FOR EACH ROW AS (row)\n                     DO\n                         # Process row\n                         # Process row\n                         # Process row\n                         # Process row\n                         # Process row\n                         # Process row\n                         # Process row\n                         # Process row", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       try:\n            # Update the last_snapshot field of the project with the given id\n            # (in the projects table) to the given timestamp.\n            projects = conn.table('projects')\n            project = projects.get(project_id)\n            project.set('last_", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tbreak;\n\t\t}\n\t}\n\tpublic override void OnLoad()\n\t{\n\t\tbase.OnLoad();\n\t\tSetRace(10002);\n\t\tSetName(\"Deian\");\n\t\tSetDescription(\"A young sheph", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.name] = host_data\n    def add_host_status(self, host_data):\n        self.host_data[host_data.name] = host_data\n", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n\\end{code}\n\nThis is an Android app that uses the `HttpURLConnection` class to resolve URLs and unshorten them using the `unshorten.it` API. It also has a `CookieManager` to store cookies and avoid", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if primary.keys():\n        raise AssertionError(\"Primary.xml contains packages: \\n\\t\" + str(primary))\n    else:\n        print(\"Primary.xml does not contain any packages\")\n        return\n\nThis code is a Python 3.8 code that defines a", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           build_ext = self.get_finalized_command('build_ext')\n            inputs.extend(build_ext.get_outputs())\n        return inputs\n    # get_inputs ()\n    def run_command (self, cmd, *args):\n        # Get the", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--job-name=' + job_name,\n        '--log-file=' + log_name,\n        '--job-id=' + str(request['job_id']),\n        '--accounting-file=/data/project/.system/accounting']\n    return", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(EventViewModel", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                   var circle = (Circle) obj;\n                    return string.Format(\"({0},{1},{2})\", circle.Cx, circle.Cycle, circle.Radius);\n                    }\n                    return string.Format(\"{0}\", obj);\n                }\n            }", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def checkDownload(self, *args):\n        return self.doTimmer()\n    def doTimmer(self):\n        self.doLongWait(self.lastCheck)\n    def doCaptcha(self):\n        self.doLongWait(self.lastCheck)\n", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\t// If we found a path, try to harvest the closest cell.\n\t\t\t\tvar closestCell = path[0];\n\t\t\t\tif (closestCell != null && har", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "           pass\n\nI'm trying to understand how the code is trying to work, but I'm having trouble following the code. Can someone please explain what the code is doing and what the purpose of each function is?\n\nHere is a breakdown of the code:\n\n1. The code is", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n}\n\nPlease complete the code by implementing the `sendEvent(Event e)` method.\n\nNote: The `sendEvent(Event e)` method is called in the `sendMessage(EventSeverity severity, String type, String", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           for (; stateIndex < 256; stateIndex++)\n            {\n                state = state.Successor;\n                if (state.Symbol == symbol)\n                {\n                    goto Loop;\n                }\n                if (state.Symbol == _binaryStatistics[IN", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Integer VR.\n        /// </summary>\n        public static readonly DicomVr Svr = new DicomVr(\"SV\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[0] + \":\" + tFull[1] + \":\" + tFull[2] + \":\" + tFull[3]);\n\t\t}\n\t\t//now we have the list of sessions that have a test that we want to", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 7)\n        self.assertEquals(b'abcdefghij\\x00\\x00ghij', self.read(o))\n    def test_insert", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Mac OS X (", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['combined'][app][test]['durations'], label=test)\n    ax.fill_between(cr['combined'][app][test]['durations'],\n                     cr['combined'][app][test]['stats'][stat],\n", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is non-root.\n        \"\"\"\n        self.mockos.egid = 1\n        self.mockos.euid = 1\n        util.runAs", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}else if(bDrawCross || bDrawCheck){\n\t\t\t\t\tg.setColor(model.getBackground());\n\t\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);\n\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def testKNNClassifierLong(self):\n    self.runTestKNNClassifier(2)\n\n  def testPCAKNNLong(self):\n    self.runTestPCAKNN(2)\n\n  def testKNNClassifierMedium(self):", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       writeElement(mirror, kind, (int) (offset.toInt() / elementKind.width.numberOfBytes), value);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Object array, ObjectCellVisitor visitor) {\n        visitElements(vis", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (relativePath == null || String.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // attempt to resolve relative path to the project directory\n            string projectDirectory = ProjectBase.GetProjectDirectory(Parent);\n            if (relativePath.StartsWith", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return eval(string)\ndef get_random_string(length=10):\n    import base64\n    import base32\n    import hashlib\n    import hmac\n    import hashlib\n    import sha256\n    import sha512\n   ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dlasdq.dlasdq(\"U\", i25, i18, i16, i17, i11, paramArrayOfDouble1, i19 - 1 + paramInt5, paramArrayOfDouble2, i19 - 1 + param", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t* \" + s.name + \" (\" + s.GetType().ToString() + \")\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   MissileFollowsUnit = true,\n                });\n            #endregion\n        }\n        public static List<SpellData> Spells { get; set } = new List<SpellData>();\n    }\n}", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmbeddedUser(\"test.user\", \"test.username\", \"test.email\"));\n\t}\n\tprotected void withCodelistDefinition(String codelistId, String... labels) {\n\t\tCodelist", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.SubprocessError, lambda: context.popen('hello'))\n\nI'm not sure what the code is trying to test, but it seems to be a test case for the `testlib` module. It is not a complete test case, as", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertiesService.Start();\n\t\t\tResourceService.Start();\n\t\t\tMessageService.Start();\n\t\t\tAddInManager.Start();\n\t\t\tServiceContainer.Instance.Start();\n\t\t\t\n\t\t\t// start the application\n\t\t\tApplication", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.Dialog.setWindowTitle(\"Pickle Preferences\")\n        self.Dialog.show()\n        self.Dialog.raise()\n        self.Dialog.activate()\n\nCan you please help me with this code?\nPlease let me know if you need any more information.\n", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n            } else {\n                // We have the TAF data\n                // Show the Taf detail view\n                showTaf( wxs );\n            }\n            return true;\n        }\n        @Override\n        protected void onError( Throwable e ) {\n            super.", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ (uiCRCITTSum & polynit) ^ (uiByteValue & 0xFF) ^ polynit;\n            }\n            return (ushort)(uiCRCITTSum", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n}\n}\n\nPlease note that this is a very basic implementation of a sentry mob, you may want to add more features and customization to it. Also, you will need to add the necessary dependencies to your mod to make this code work.", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector() };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonParseController.getHyperlinkDetector(controller), \n                new", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DPrivateInterface(self) )\n        self.setWindowTitle('Object3D Properties')\n        self.setGeometry(300, 300, ", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedChoice = selectConverter.convert(valueChoice);\n                        if (convertedChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tif (acceptableChange[i][j]) {\n\t\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\t\tfractionWithAmount[i][j][k] = fractionWithAmount[i][j][k]+", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\nNote: The above code is just an example and may not work as is. You will need to modify it to suit your specific requirements.\n\nPlease note that the above code is just an example and may not work as is. You will need to modify it to suit your specific requirements.\n\nPlease let", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n}\n\nPlease help me to complete this code. I am new to ServiceStack and ServiceStack.ServiceClient. I", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       // expectations\n        expect(mockSecurityManager.getSubject()).andReturn(mockCurrentSubject);\n        expect(mockCurrentSubject.getPrincipal()).andReturn(new User(ownerId));\n        expect(mockCurrentSubject.getGroupId()).andReturn(ownerGroupId);\n       ", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn new Vector2 (v.X / viewport.Width, v.Y / viewport.Height);\n\t}\n\t}\n}\n}\n```\n\nThis code is a collection of utility functions for working with vectors, points, and other geometric objects in XNA. It", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "e = endpoint_key(vlan=100, mac_hi=0x1234, mac_lo=0x5678)\nu = endpoint_value(port=5)\ns = endpoint_stats(packets=10, bytes=100", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t// disconnect the client\n\t\t\t\t\tdisconnect_client.Add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(list);\n                    break;\n                case Activity:\n                    List<ActivityBucket> bucketList = convertToActivityBucketList(list);\n                    notifyActivitiesReceived(list);\n                ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%d<ReturnType%s>*')\n\ndef GenerateCallback(bind_count, exec_count, function_name, parent_class):\n  \"\"\"Generate the callback code for a single function.\n  Args:\n    bind_", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\n    )\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\"\n    )\n    response['Content-Disposition", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(\"score\"), null/* c */,\n                        Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        //\n        final ASTContainer container = new ASTContainer();\n        container.", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if request.method == \"POST\":\n            form = UserForm(request.POST)\n            if form.is_valid():\n                self.save_form(form)\n                self.handle_set_is_active()\n                return HttpResponseRedirect(self.get_success_", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #region IAssemblyReference Members\n    IAssemblyReference/*?*/ IAssemblyReference.ContainingAssembly {\n      get { return this.ResolvedAssembly; }\n    }\n    #endregion\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n            // Perform the iterative process\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n            // ...\n\n", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[right];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat median = (Apfloat)((Apfloat)sortedNumbers[right]).intermediate();\n\t\t\tApfloat medianLeft =", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               A[v, edge.parent] = -1\n                v = parent[v]\n            A[v, edge.parent] = edge.position\n            parent[edge.child] = edge.parent\n            A[edge.child, edge.parent] = edge.position\n           ", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for item in self.items:\n            item['ocean-unique-id'] = item['id']\n            item['ocean-unique-id'] = item['id']\n            # Hack until we decide when to drop this field\n            if 'updated_on' in item:", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tvar bot = botController.AddBot(slot.Value.Name);\n\t\t\t\t\t\t\t\t\t\tif (bot != null)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n\tpublic class SmbNtStatus : SmbException\n\t{\n\t\tpublic SmbNtStatus(int errcode) : base(GetMessageByCode(errcode))\n\t\t", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + b''.join(struct.pack('!x', x) for x in range(self.total_padding))\n    def __repr__(self):\n        return '<DataFrame stream_id: {}, data: {}, pad_high: {}, pad_low: {}>", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.RectangularBoundary.BoundingBox;\n            var bb = new Rectangle(b.Left, b.Bottom, new Point(b.Right, b.Bottom));\n            var bb2 = new Rectangle(b.Left, b.Top, new", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\nvoid btKinematicCharacterController::setGhostObject(btKinematicClosestNotMeRayResultCallback* ghostObject)\n{\n\tm_ghostObject = ghostObject;\n}\nvoid btKinematicCharacterController::setCollisionShape(", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       if (initializers.size() > 0) {\n            for (int i = 0; i < initializers.size(); i++) {\n                ExpressionTree init = initializers.get(i);\n                if (canBeLeaked(init)) {\n                    checker.", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tnbttagcompound.setTag(\"display\", nbttagcompound1);\n\t\t}\n\t}\n\tpublic int getDyeColor(ItemStack stack)\n\t{\n\t\tif (this.getArmorMaterial() != CyberwareContent.tr", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(_returnNode.Attributes[CLASS_ATTRIB].Value, Context);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t// Methods (overridden)\n\t\t//--------------------------------", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t}\n\t\tprivate void TestSize(int expected_width, int expected_height, int handle)\n\t\t{\n\t\t\t// This is needed since the default size vary between XP theme and W2K theme.\n\t\t\tif (expected_width != 0)\n", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isInitialized()).thenReturn(true);\n\t\t\tdoReturn(Collections.singleton(classType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\t\n\t\t// If we're equal up to this point, we can safely compare the access path\n\t\t// directly\n\t\tif (accessPath.equals(other.", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.rightChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "```\n    def test_multiline_output(self, popen, pipe_processor_loop):\n        ret = 0\n        out = 'line1\\nline2\\n'\n        err = 'err1\\nerr2\\n'\n        pipe = _mock_", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"g\", String.valueOf( g ) );\n\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\tprivate String writeMaterial( final Appearance appearance )", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat instanceof Contact) &&\n\t\t\t(this.getClass() == proxyThat.getClass()) &&\n\t\t\t(this.getId() == null ? proxyThat.getId() == null : this.getId().equals(proxyThat.getId()))", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   if n == n_steps - 1:\n      print((\"Saving final configuration : %s\" %n))\n      if (reject_wall+reject_jump) == 0:\n        body_offset = 0\n        for i, ID in enumerate(struct", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata:\n            # Check if the tensor is broadcastable\n            if not any(v.broadcastable for v in cdata):\n                # If the tensor is not broadcastable, we can remove the\n                # Subtensor\n                # Check if the tensor is a constant\n", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   class Meta:\n        model = Group\n        fields = ('name', 'description', 'description_fr', 'description_es',\n                  'description_it', 'description_zh', 'description_ja',\n                  'description_ko', 'description_zh_tw', 'description", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        return wrap\n    def before_compile_query(self, query):\n        \"\"\"Called before the query is compiled.\n        This event is triggered before the :meth:`.Query.compile` method\n        is called.\n        \"\"\"", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           self.system.process_xml(etree.tostring(xml_object))\n        return resource_fs.create_python_module(self.module_class, self.filename_extension, xml_object)\n    def get_children(self):\n        return self.system.", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            if isinstance(change, larray_editor.commands.ArrayValueChange):\n                data_model_change = change\n                break\n        else:\n            raise ValueError(\"No ArrayValueChange found in data model changes\")\n        #", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\tif (type != null)\n\t\t\t{\n\t\t\t\tif (Method != null || Field != null || Sig != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 18;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"]))\n        self.assert", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       for (String field : csvData.keySet()) {\n            termData.add(field, csvData.get(field));\n        }\n    }\n    protected abstract CSVFormat setupCSVParser(Vocabulary vocabulary);\n}", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\t// Add mana to the wand\n\t\t\tint manaToAdd = Math.min(getMaxMana(), getMana());\n\t\t\tplayer.getPlayerAbilities().setMana(Math.min(", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           float representativity = this.getRepresentativity(component, c);\n            if (representativity > 0)\n                intrinsicCohesion += representativity;\n        }\n        return intrinsicCohesion;\n    }\n    private void birthCase3(ArrayList", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if not are_equal:\n        raise Exception(\"Error: Record %s: MoreInfo migration failed\")\n    else:\n        raise Exception(\"WARNING: Record %s: MoreInfo migration successful\")\ndef estimate_time(estimate):\n    return estimate\ndef pre_upgrade_", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\t//dispose of any resources being used\n\t\t\t//\n\t\t\t// ...\n\t\t\t//\n\t\t\t// ...\n\t\t\t//\n\t\t\t// ...\n\t\t\t//\n\t\t\t// ...\n\t\t\t//\n\t\t\t", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date exceptionDate : exceptionDateList) {\n      exDateList.add(new Date(exceptionDate.getTime()));\n    }\n    return new ExDate(exDateList);\n  }\n  private Date toDatable(Date date, int hour)", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.dataSource = sourceComponent;\n\t\tsourceEventBinding.dataTarget = sourceComponent;\n\t\tsourceEventBinding.eventName = SourceEventName;\n\t\tsourceEventBinding.bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           // Parse the JSON data\n            Map<String, String> spanConfig = new HashMap<String, String>();\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.setLenient(true);\n            @SuppressWarnings(\"unchecked\")\n            Map<String,", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t\tpublic Image getImage()\n\t\t\t{\n\t\t\t\treturn super.getImage();\n\t\t\t}\n\t\t\tpublic void setImage(ims.framework.Image img", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n}\n}\n}\n\nI am trying to run a test on an OME database, but I am getting the following error:\n\n\"Error in properties. Not expecting null\"\n\nI am not sure what is causing this error, as I", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\nproject_uuid = '81d1157d-28f4-46ff-98dd-94899c1688f8'\nlam.make_naa_annotations(project_uuid)\n", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           }\n            return buffer.ToString();\n        }\n        private short field_1_font_index;\n        private short field_2_format_index;\n        private short field_3_cell_options;\n        private short field_4_alignment_options;\n        private", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width katakana.\n\t\t\t\tposn += 2;\n\t\t\t\tposn += (byteCount - byteIndex) * 2;\n\t\t\t\t// Update the byte index.\n\t\t\t\tbyteIndex += 2", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "```\n    obj.type = type_data_processing\n```\nPlease complete the code by filling in the missing definitions for the `tricore_branch`, `tricore_ld`, and `tricore_st` functions.\n\nPlease note that the code you provided is not complete and", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tProperties properties = new Properties();\n\t\t\tstream = location.getInputStream();\n\t\t\tproperties.load(stream);\n\t\t\tJRPropertiesMap map = new JRPropertiesMap();\n\t\t\tproperties.stringPropertyNames(new String[] {});\n\t\t", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n}\nPlease help me complete the code.\n\nNote: I have provided the code for the class WorldSettings and its inner classes.\n\nNote 2: The code is for a Minecraft mod, and the code is written", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.PurgeDiscretionaryAclProtection (true);\n\t\t\tcsd", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def run(self):\n        for result in self.__queue.get_nowait():\n            self.__process(result)\n            self.put(result)\n            if self.__stopped:\n                break\n        self.put(None)\n        self.__queue.task_done", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // check for outdated RPCs and remove them\n        foreach (var rpc in PhotonEditor.Current.RPCList)\n        {\n            if (RPCsToRemove.Contains(rpc))\n        {\n                PhotonEditor.Current.RPCList.Remove", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n        return rootLayout;\n    }\n    @Override\n    public void onResume() {\n        super.onResume();\n        if (message != null) {\n            full_subj.setText(message.subject);\n            full_from_to.setText(message.", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.dot(op_cc, self.symmetry.op_scc[s])\n            op_cc = np.dot(op_cc, np.linalg.inv(self.symmetry.op_scc[s])))\n           ", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\tfor (int i = 0; i < block.Body.Count; i++) {\n\t\t\t\t\tILNode curr = block.Body[i];\n\t\t\t\t\t\n\t\t\t\t\t// Skip over labels\n\t\t\t\t\tif (", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    //otherwise, set the flag and schedule the update\n\t    IsRagdoll = ragdoll;\n\t    if (delay > 0f) {\n\t\tWorldC", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n    def fix_region_dim(self, regions):\n        extruded = (self.layer_type == LayerType.stratum)\n        for reg_list in  [self.", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 0] = (byte)(num & 0xff);\n        out[outOff + 1] = (byte((num >> 8) & 0xff));\n        out[outOff + 2] = (byte((num >> 16", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables,\n                    matcher, null ) );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   return slice_xml_json['code'], slice_json\ndef transform_values_holder_xml_json_to_json(value_xml_json):\n    comments = []\n    value_json = collections.OrderedDict()\n    for key, value in value_xml_json", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if(ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n          }\n        }\n     ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   servers.addServersFromFile(getServerFile())\n    servers.getBestServer()\n    getServerFile()\n    # Add servers from file\n    # Get the best server\n    # Test the best server\n    # Connect to the best server\n    # Test the connection\n   ", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y += toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftTo", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, \"ID_GROUP = \" + newId, \"ID_GROUP = \" + deleteId + \" = \" + newId, null);\n                    //Update budget items\n                    db.update(Db.Table4.TABLE", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n}\n\\end{code}\n\nYou can use the `IsTrusted` method to check if a file is signed by a trusted certificate:\n```\nstring fileName = \"", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n# ... rest of the file ...\n```\nPlease provide the rest of the code in the file.", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tif (queue.Any(pi => pi.Item == itemName && pi.Done > 0))\n\t\t\t{\n\t\t\t\tvar cancelled = queue.FirstOrDefault(pi => pi.Item == itemName && pi.Done > 0);\n\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.infoLabel.setText(infoText)\n        \n    def callNewFile(self):\n        self.newFileButton.clicked.connect(self.newFile)\n        self.newFileButton.setDisabled(False)\n        self.newFileButton.setStyle", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4 = subst_pc(re)\n        re_m4.sub('', code)\n        with open(self.outputs[0], 'w') as f:\n            f.write(code)\n        return self.outputs[0\n        #", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result of PlanExecutorServer:\")\n        return result\n        #=============================\n        # this is the end of the code\n        #=============================\n        # this", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx - reactorExtent ] + 4 * chemical[ 0 ][ idx + reactorExtent ]\n\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(\n                        TimestampFormatFactory.get(pattern),\n                        TimestampFormatFactory.getLocale(timestampLocale)));\n                break;\n            default:\n                columnTypes.add(typeManager.next(type", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\tParam = qs.NewParameter();\n\t\t\tParam.DbType = DbType.Int32;\n\t\t\tParam.ParameterName = \"@obj_id\";\n\t\t\tParam.Size = 4;\n\t\t\tParam.Value = entity.obj_", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic object ReturnedType\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic bool IsMutable\n\t\t{\n\t\t\tget { throw", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       cli_load_config(self, [\n            \"ntp authentication-keyid\", \"key-id\", self.key_id, \"auth-mode\", self.auth_mode, \"auth-mode\", \"auth-type\", self.auth_type, \"auth-type\", \"", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           # Verify that the ancestors of the component have been updated\n            for block in [component, component.ancestors]:\n                check_node(block.location, after_create, block.edited_on, editing_user, None, after_create, editing_user)\n", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (text_code & 0xff));\n        ensureCharBuffRemaining(length);\n        charBuf.put(ch);\n        updateWithCharBuf();\n    }\n    public void processingInstruction(String target, String data)", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['op'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['op'],", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            // Try to get the type from the controller and action\n            if (controllerName != null && actionName != null)\n            {\n                // Try to get the type from the controller and action\n                type = ResolveControllerActionType(controllerName, actionName", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_create_line(value)\n            return True\n        return False\n    def on_editable_changed(self, path, column):\n        model = self.get_model()\n        record = model.get", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, beanFactory.getBeanDefinition(beanName));\n        }\n        return beanFactory.getBeanDefinition(beanName);\n    }\n}", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           blank_lines = [line.rstrip() for line in f.readlines() if line.rstrip() and not line.strip()]\n            f.close()\n        except IOError:\n            # File is empty, so no blank lines to remove\n            f = None\n       ", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState\n            );\n    }\n    [ComImport, System.Security.SuppressUnmanagedCodeSecurity,\n    Guid(\"36F846FC-2256-48B", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var sp = Principals.getCurrentSecurablePrincipal();\n        spm.addPrincipalToPrincipal( directedAclKeys.getPrincipalId(), directedAclKeys.getPrincipalType(), sp );\n        return null;\n    }\n    private void ensureAdminAccess", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       if element.find('.'):\n            if not self.verify_element(element.find('.')):\n                return False\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the element tag.\n        This verifies the tag name and namespace.\n", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return operation(node)\ndef _get_StringIO():\n    if not hasattr(sys.stdin, 'readline'):\n        return None\n    return StringIO()\ndef _get_elements_by_tagName(root, name):\n    results = []\n    def", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocator, endOffset)) {\n\t\t\t\tdecodeKeyLocator(TlvTypeCodes.KeyLocator, keyLocator, decoder);\n\t\t\t} else if (decoder.", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i<ActiveWeapons.size(); i++){\n            ActiveWeapons.get(i).updateCooldown(delta);\n        }\n        //Updates the minimap\n        display.updateMinimap();\n        //Updates the", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        action.setJoinDate( System.currentTimeMillis() );\n        GameEngine.model().getGame().addGameJoin( action );\n        GameEngine.model().getGame().setGameJoin( action );\n        hide();\n      }\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = string.Empty;\n\t\t\t\treturn;\n\t\t\t}", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if reaction.metabolites.shape[0] > 1:\n        raise ValueError(\n            \"Reaction has multiple metabolite components, cannot compute weight\"\n        )\n    return reaction.metabolites.get_weight()\n\n\n", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(store.path == pootle_path)\n        # or self.get_queryset().filter(store.path.startswith(pootle_path))\n        # or self.get_queryset().filter(store.path.", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='Training',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def set_output_port(self, *args):\n        pass\n    def set_output_port_by_ip(self, *args):\n        pass\n    def set_output_port_by_mac(self, *args):\n        pass\n    def set_output", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n}\n\n  // Listener interface implementation.\n  public void recentItemsChanged(RecentItemEvent event) {\n    updateMenu();\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            return false;\n        }\n    }\n}\n\\end{code}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return getMaxTradePeriodDate().getTime() / 2;\n\n    }\n    public boolean isTaker() {\n        return offer.getTaker().equals(user);\n    }\n    public User getTaker() {\n        return user;\n    }\n   ", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) a = p.down; else a = null;\n\t\t}\n\t\treturn a;\n\t\t}\n\t\n\tpublic static void CompSets() {\n\t\tCompFirstSets();\n\t\tCompFollowSets();\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tif(mAltWriteMethod)\n\t\t\t{\n\t\t\t\tHIDImports.HidD_GetOutputReport(this.mHandle.DangerousGetHandle(), buff, (uint)buff.Length);\n\t", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(MskJointVo instance1, MskJointVo instance2)\n\t\t{\n\t\t\tif (instance1 == null)\n\t\t\t{", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           //_heapStart = MbPtr(heap, size1);\n            //_heap = new byte[realSize2];\n            //_heapStart = 1;\n            //_heapEnd = _heapStart + realSize2;\n            //_he", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n    ...\n    # Add a new rate\n    add_view = navigate_to(self, 'Add')\n    add_view.fill_with({\n        'description': 'New rate',\n        'currency': 'USD',\n        'fields': {'", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tIntPtr srcData = src;\n\t\t\t\tsrcData = (IntPtr)( (byte*)srcData + offset;\n\t\t\t\tsrcData = (IntPtr)( (byte*)srcData", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\t\tself.openFrontend()\n\t\t\tself.newConfig()\n\t\t\tself.list = []\n\t\t\tself.list.append(self.typeOfTuningEntry)\n\t\t\tself.list.append(self.satEntry)\n\t\t", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           TcpAddress.TcpAddressMask filter;\n            filter = TcpAddress.createTcpAddressMask(filterStr);\n            tcpAcceptFilters.add(filter);\n            return;\n        default:\n            throw new IllegalArgumentException(\"unsupported option \" + option + \"", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n            }\n            return fout.ToArray();\n        }\n        \n        private void ReadPdf() {\n            // Read the file header\n            int ch", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus.Message'))\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   def _get_module_map(self, element):\n        module_map = self.get_E_2_page().get_module_map(element)\n        return module_map\n    def get_module_map(self, element):\n        return self.get_E", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_double\\\".\",\n                \"optional_double: 123\");\n            AssertParseError(\n                \"1:", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\t// todo : would be nice to have a more efficient implementation\n\t\t// of this method, but it's not clear how to do it without\n\t\t// violating the", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n```\nThis code is a log writer for the Arya Auctioin system. It logs various events in", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'message': action_message}\n    def attendance_action_kiosk_mode(self):\n        barcode = self.env['hr.employee'].search(\n            [('barcode', '=', self.barcode)])\n        if barcode:\n           ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tfor (int i = 0; i < form.grdResults().getRows().size(); i++) {\n\t\t\tgrdResultsRow row = form.grdResults().getRows().get(i);\n\t\t\tif (row.getRowIndex().equals(order", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.ReadToStructure(0, typeof(POINT));\n                c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        internal SystemListView sw { get { return sw; } }\n        internal SystemListViewItem(", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "   def apply_icon(self, requested_icon):\n        \"\"\"Set the window icon\"\"\"\n        icon_theme = Gtk.IconTheme.get_default()\n        icon_name_list = [APP_NAME]   # disable self.wmclass_name, n/o", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\" + Guid.NewGuid().ToString( \"N\" ) ) );\n                    break;\n                }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshalAttribute( string type", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (HasLayoutInfo)\n\t\t\t\t\treturn true;\n\t\t\t\telse\n\t\t\t\t\treturn base.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\n\nPlease modify the code to add a new model to the ROM, and then add a new evidence that depends on the new model.\n\nPlease note that the code is a part of a larger program,", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.protocol = protocol\n        self.context = OpenSSL.SSL.create_default_context()\n        self.context.set_options(OpenSSL.SSL.HANDLER_ASYNC)\n        self.context.set_default_verify(OpenSSL.SSL.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.label8 = new global::Gtk.Label ();\n\t\t\tthis.label8.Name = \"label8\";\n\t\t\tthis.label8.Xalign = 0F;\n\t\t\tthis.label8.LabelProp = global::Mono.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   headbook.set_tab_reorderable(True)\n    headbook.connect(\"page-reordered\", callback)\n    headbook.connect(\"page-removed\", callback)\n    headbook.connect(\"page-added\", callback)\n    headbook.connect(\"page-", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.SHIFT + Qt.Key_0),\n    \"Prev-tab\": QKeySequence(Qt.Key_Left),\n    \"Next-tab\": QKeySequence(Qt.Key_Right),\n    \"", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo{\" + getPersistenceUnitName() + \"}\";\n\t}\n}", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return getFileEditorInput().isFileReadOnly();\n}\n\n  public void setFocus()\n  {\n    super.setFocus();\n    hasFocus = true;\n  }\n  \n  public void clearFocus()\n  {\n    hasFocus = false;\n    super", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(644, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       return enc;\n    }\n}\n}\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC1_Legacy_", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += getMaxSize(current_sum);\n\t    current_sum = sum;\n\t    sum = 0;\n\t    switch (this.m_d) {\n\t        case option_1:\n\t\t\t    sum += 4 + CDRSerializer.align", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      else\n        return java.GetValue(\"JavaExecutable\", \"\");\n      }\n    private static String GetJavaHome(String home, String javaHome)\n    {\n      if (javaHome == null || javaHome.Length == 0)\n        return home", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l\n        return comment\n    def find_env(self, name):\n        # attempt to find env variable by name\n        for l in self.lines:\n            if re.match(r'export (\\w+)=['r']):\n                return [l, '']", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "mesh = bpy.data.meshes.new('Mesh')\nmodifier = MeshModifierCommon.from_json(mesh, modifier_json)\n\nPlease complete the code by filling in the blanks with the appropriate values.\n\nPlease note that the code is for Bl", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n    private void buildAllelePeptideLikelihoods(final Map<String,Map<Integer,List<BindData>>> allelePeptideData, final String outputFilename) {\n    // ...\n    }\n}\n\\end{code}\n\nThis code", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors);\n    }\n    @Test\n    @DisplayName(\"getEdgeDirection() should return the edge direction\")\n   ", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, option, *args):\n        ###Check if option is \"list\"###\n        if option.lower() == 'list':\n            self.list_packets(self.cap)\n        ###If option is \"help\"###\n        elif option.lower", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // check if the type is a global type\n                if (isGlobalType(targetNamespace, sdoTypeName)) {\n                    // check if the type is a global type\n                    SDOType globalType = (SDOType) aHelperContext.getTypeHelper().getType(", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': manager})\n    def holidays_first_validate_not", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #region IGridBase\n        #region IBOColSelector\n        #region IGridBase\n        #region IGridBase\n        #region IGridBase\n        #region IGridBase\n        #region IGridBase\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0}: {1}: {2}: {3}\");\n        }\n    }\n}\n```\n\nPlease help me complete this code. I am not sure what the code is doing, but I think it is related to audio mixing. I have", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = new ims.core.admin.domain.objects.CareContext(valueObject.getCareContext().getId(), valueObject.getCareContext().getVersion());\n\t\t}\n\t\tdomainObject.setCareContext(value10);", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--target\", release, \"--release\", \"--dev\", \"--verbose\", \"--debug-mozjs\", \"--android\", \"--jobs\", str(jobs), \"--params\", str(params)] + opts, env=self.build", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\tif (p > 0) {\n\t\t\t\t// For positive rules:\n\t\t\t\t// 1. Keep all", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, StashMessage.Text);\n            }\n            Stashed.Items.Clear();\n            Stashed.Items.AddRange(gitItemStatuses);\n            Stashed.Items.AddRange(Stashed.Items.", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   print(st_ARCH_BUFFER_ID.value)\n\nExpected output:\nst_ARCH_BUFFER_ID.value = st_AssignAddressItem_print_out(\n    lattice.cbuffer.n_objects,\n    lattice.cbuffer.get", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\n        if (o instanceof AuthScope) {\n            final AuthScope scope = (AuthScope) o;\n            return LangUtils.equals(this.host, scope.host) &&\n                   LangUtils.equals(", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(System.IAsyncResult asyncResult) {\n            object[] results = this.EndInvoke(\"AddInt\", new object[] {\n                        });\n            return ((int)(results[0]));\n       ", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic String getCSeriennrChargennr() {\n\t\treturn cSeriennrChargennr;\n\t}\n\tpublic void setCSeriennrCh", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"genericType\" : \n\t\t\t\t\tEGenericType = (EGenericType", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "eai = EncryptedArchiveIndex(path)\nlog.info('cryptostasis', 'Loading archive index from: {}'.format(path))\n```\nPlease provide the path to the encrypted archive index file, and the command you want to execute (e.g. encrypt, decrypt,", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   def decode_bits(self, bits):\n        # Decode the bits and store the results in the appropriate places\n        # (ss, es, cmd_token, cmd_token_bits)\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    }\n}\n}\n\nPlease provide the input string to be stemmed.", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = createViewer(cd, cls);\n            } catch (IOException ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                channelList.add(o);\n                channelMap.put(channel,", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "- name: Generate a Self Signed OpenSSL certificate\n  openssl_certificate:\n    path: /etc/ssl/crt/ansible.com.crt\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n    csr", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tstill_there = s.find (i->first) != s.end();\n\t\t\t}\n\t\t\tif (!still_there) {\n\t\t\t\t\"\"\", file=f)\n    print(\"\\t\\t\\t\\tboost::log", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   s_idx = sm.add_transition(StartStateIdx, trigger_seq[0), EndStateIdx)\n    #   sm.add_transition(s_idx, trigger_seq[1], EndStateIdx)\n    #   # ...\n    #  ", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t\tExpect(27);\n\t\t\tif (t.pos > t.line)\n\t\t\t tab.line = t.pos;\n\t\t} else SemErr(\"bad production\");\n\t}\n\tvoid ExpectWeak(int n, int follow)", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc.update({\n                    'product_id': line.product_id.id,\n                    'product_uom': line.product_uom.id,\n                    'product_uom_qty': line.product_uom_qty,", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\t\treturn new ServiceDescription(\"_openhab-server-ssl._tcp.", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name, permissions = new ArrayList<>(Arrays.asList(permissionEntry)));\n            } else\n            {\n                permissions.add(permissionEntry);\n            }\n            }\n        return nameMap;\n    }\n    private void assertDenied(String permission", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0')\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   dev = Device(deviceToken)\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "```\npython uvlist_cal.py --cal 1934-638 --segment 2 --slop 1\n```\nThis code will perform the following tasks:\n\n1. It will check the command line arguments.\n2. It will check if the input file is", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (m_Keys.Count > 0)\n            {\n                InvalidateProperties();\n            }\n        }\n    }\n\n    public class Key : Item\n    {\n        private KeyRing ring;\n        private int keyValue;\n        private bool Deleted;\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String devName : devices) {\n            // Check if device is already in list\n            Tuner tuner = tuners.get(devName);\n            if (tuner != null && tuner.getLiveDevice() && tuner.getIpAddress().equals(ip", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (jobs.size() > 0) {\n      Log.i(TAG, \"Enqueued \" + jobs.size() + \" migration(s).\");\n      for (Map.Entry<Integer, MigrationJob> entry : jobs.entrySet()) {\n        int version", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     Entry entry = new Entry();\n      // log.info(\"Read mapping line \" + lineCount + \": \" + line);\n      split[0); // ignorecase\n      entry.regex = Arrays.asList(split[1]);\n      entry.priority = Integer.parseInt(split", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       try_names = [os.path.abspath(n) for n in try_names]\n        # try to find it in the search path\n        for d in try_names:\n            d = os.path.abspath(d)\n            if os.path.", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def __init__(self, *args, **kwargs):\n        Coord.__init__(self, *args, **kwargs)\n\ndef _get_env_var(name):\n    try:\n        return os.environ[name]\n    except KeyError:\n        return None\n", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   if want.interval:\n        if want.interval > have.interval:\n            if want.time_until_up > have.time_until_up:\n                if want.debug:\n                    if want.chase_referrals:\n                        if want.base:", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text.startswith('Method Add [{}'.format(\n                self.context['object'].display_name or self.context['object'].name))", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           // check if the class is a subclass of Action\n            // - if yes, then create a new instance of the service\n            //     and return it\n            Class<?> clazz = Class.forName(className);\n            if (clazz.isAssignableFrom(getClass().", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\", \"body_html\": \"foo_html\"},\n            mock_request\n        )\n    def test_update_thread_empty_title(self,", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           env.set_action('embedManifestDllAction', embedManifestDllAction)\n            return True\n        else:\n            raise SCons.Errors.UserError(\"Manifest file not found: %s\" % manifestSrc)\n    else:\n        return False\ndef", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           WorkspaceModifyOperation.run(getShell(), new SubProgressMonitor(new ProgressMonitor(), 1000), new IResource[] {}, getOperationMessage(), errorStatus);\n        } catch (InvocationTargetException e) {\n            // 1FTIMQN: I", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn super.init(smi, sdi);\n\t}\n\t\n\tpublic void setInStream(TransMeta transMeta, Trans trans)\n\t{\n\t{\n\t\tsuper.setInStream(transMeta, trans);\n\t\t\n\t\t// Set the input", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('18:55..19:30', last) == (d(2014,1,31, 18,55), d(2014,1,31, 19,30))\n\n```\n\n", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //WalkingRange\n            string swalkingrange = walkingspread(fakespawnsB, fakespawnsC, fakespawnsD, fakespawnsE);\n            //HomeRange\n            string shomerange = fakespawns", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       session = self.vm.wait_for_login(timeout=self.login_timeout)\n    def __del__(self):\n        self.vm.destroy()\nclass GuestSuspend_win(GuestSuspend):\n    def verify_guest_support_s", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       service.submit(pub);\n        service.shutdown();\n        service.awaitTermination();\n        service.close();\n    }\n}\n\\end{code}\n\nPlease help me to complete this code. I am new to Zeromq and I am not able to", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)(value | 0x80);\n\t\t}\n\t}\n}\n```\nPlease provide the code for the `CreateIVTBlob` method.", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.message(descr, flags=['-m'])\n        au = Au(au_flags)\n        au.parse_args()\n        au.run()\n        self.fm.env.message(descr, flags=['-m'])\n        self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\t[Test]\n\t\tpublic void CreateInstance_StringType ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, typeof (COMTest));\n\t\t\tCOMTest objCOMTest = (COMTest)objHandle.Unwrap ();\n\t", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       other = Locale.objects.get(code='en-US'))\n        self.assertEqual(da.code, 'da')\n        self.assertEqual(other.code, 'en-US')\n        self.assertEqual(len(da.get_signoffs(self.", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Setting user state to: %s\" % userstate)\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       for (PlayerGroup group : groups.values()) {\n            if (group.getLeader().equals(player)) {\n                group.setLeader(null);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       return highlight(self.toks, formatter, outfile, **params)\n        def __getitem__(self, i):\n            i = int(i)\n            if i < len(self.toks):\n                return self.toks[i]\n            else:\n", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\t// call super\n\treturn super.doStartTag();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                if (nl != null && nl.Count > 0) {\n                    DialogEntry dialog = new DialogEntry();\n                    for (int i = 0; i < nl.Count; i++) {", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                   m_key[i = PeerlessList.Exodus; ExodusSummoningTome = new ExodusSummoningTome(); ExodusSummoningTome.Activate();\n                    }\n\t\t\t\t\telse if ( m_Pe", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tif(beans.length == 0)\n\t\t\treturn coll;\n\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add((ChangeOfServiceVo)beans[i].buildVo());", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n        [Version v1 = new Version(1, new int[]{0, 0, 0, 0}, new ECBlocks(1, 1, 1, 1), 0, 0, 0, 0, 0, 0, 0, ", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfor(int i = 0; i < 9; i++) {\n\t\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\nfrom django.conf import settings\n```\nPlease provide the rest of the code and I will be happy to help you.", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but was {1})\", LightCount, NextFrame.PixelCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t\tpublic void ClearQueue ()\n", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = p.readInt();\n            dc.direction = p.readInt();\n            dc.type2 = p.readInt();\n            dc.direction2 = p.readInt();\n            response", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Calculate position of vertex\n                Vector3 vertex = new Vector3(x * xPixelsPerTile, y * yPixelsPerTile, 0f);\n               ", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\tObject testInt = new TestInt(testInt1);\n\t\t\t\n\t\t\tclient.call(\"add\", new Object[] {testInt});\n\t\t\trawrawInt = rawInt;\n\t\t\trawInt = rawInt;\n\t\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t}\n\t};\n\tpublic void dispose()\n\t{\n\t}\n\tpublic void addCaretListener(@Nonnull final CaretListener listener)\n\t{\n\t}\n\tpublic void removeC", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        } else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException e) {\n                logging", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n        }\n\nCan you please provide the code for the rest of the code?\n\nPlease let me know if you need any further information.\n\nThanks in advance.", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(position.To2D()) <= spell.RangeCheckFrom.To2D().Distance(position.To2D())\n                                    && minionPrediction.Hitchance > hitchance)\n                                    result.Add(minion);\n                                   ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(x);\n        for (Node z = x; !graph.isDefCollider(x, x, x); path.add(x));\n        return path.size() >= 2;\n    }\n    public", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is Drawable)\n                    {\n                        var childDrawable = child as Drawable;\n                        if (childDrawable != null && childDrawable.Name == Name)\n                        {\n                            return childDrawable;\n", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass().equals(other.getClass()) && \n                getAttachmentId().equals(other.getAttachmentId()) \n                && getFileId().equals(other.getFileId()) \n                && getDescription().equals(other.getDescription()) \n               ", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (m_Item.m_Timer != null && m_Item.m_Timer.IsAlive)\n                        {\n                            // Add delay\n                            AddDelay(from);\n                        }\n                        SpellHelper.GetSurfaceTop(ref mobiles[", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg, formatted);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Kick(PlayerMobile user, bool silent = false, bool message = true)\n\t\t{\n\t\t\tif (user == null", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n}\n}", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(m", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n        this.j.writeLock().lock();\n        try {\n            this.i.add(new NetworkManager.QueuedPacket(packet, (GenericFutureListener[]) null));\n        } finally {\n            this.j.writeLock().unlock();\n        }\n   ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne).replace(\"{name}\", name);\n    } else {\n      return context.getString(resourceMany).replace(\"{count}\", Integer.toString(recipients.size()));\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GOONK_BUILD_PATH\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                source_file = source_files.get(path, None):\n                    if source_file is None:\n                        source_file = source_file_items(tests_root, url_base, path, status)", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            scriptClassLoader.removeScript(compiledScript);\n            compiledScript = null;\n        }\n    }\n    private ImportCustomizer createCompilerConfiguration() {\n        return new ImportCustomizer() {\n            @Override\n            protected void custom", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           }\n        }\n    }\n}\n\nThis code is a C# implementation of a network layer class that wraps another network layer class. The wrapped network layer class is of type T, and the dynamic network layer class is of type R. The WrappedNetworkLayer class provides a way to", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(tasks.shape[0]):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        Etf_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tint check = caseInsensitive ? ignoreCaseCompare(obj) : compareNonCaseInsensitive(obj)\n\t\treturn check;\n\t}\n\tpublic int compareNonInsensitive(Object obj)\n\t{\n\t\tif (obj == null)\n\t\t", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(new HashSet<>(stacks[0].getTags())), new HashSet<>(s.getTags()));\n    }\n    private void updateAll() throws Exception {\n        stackDao.updateAll();\n    }\n}\n\n\n\n\n\n\n\n\n", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       crawlParameters.add(new Parameter(CrawlerService.DEPTH_PARAM, depth));\n        //EXCLUSION REGEX\n        crawlParameters.add(new Parameter(CrawlerService.EXCLUSION_REGEX_PARAM, exclusion", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\tswitch (kind)\n\t\t\t{\n\t\t\tcase LNodeKind.Node:\n\t\t\t\t// [$capture] (...)\n\t\t\t\tif (MatchesPattern(candidate, pattern, ref captures, out unmatchedAttrs))", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (extendedWillHit < colisionList.Count())\n                    {\n                        extendedWillHit = colist.Count();\n                        extendedFarmLocation = extendedFarmLocation.Add(objAiBase.Position.To2D());\n                    }\n", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContext(form, appForm, factory, startControlID, designSize, runtimeSize, startTabIndex, skipContextValidation, form.getFormInfo(), components, new ims.framework.interfaces.IAppForm());\n\t}\n\t}\n\tpublic void populate", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        line = line.strip()\n        match = re.search(pattern, line)\n        if match:\n            return line.strip()\n    return False\ndef compute_fingerprint(paths):\n    # ...\n\n", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': (('value', 1),),\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.subs.edit(index=0)\n        with self.assertRaises(AssertionError", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x**2, (x, a, b))) == Sum(x**2, (x, a, b))\ndef test_issue_8600():\n    assert simplify(Sum(x**2, (x, a, b))) == Sum(x", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\tpushValue", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._notifyAction = action;\n                this._newItemList = (changedItems == null) ? null : ArrayList.ReadOnly(changedItems);\n                this._newStartingIndex = startingIndex;\n            }\n            else\n            {\n                this._notifyAction = action;\n", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           XMLStreamWriter writer = streamWriter;\n            XMLStreamReader reader = new XMLStreamReader(writer);\n            InputSource inputSource = new InputSource(reader);\n            Document testDocument = parser.parse(inputSource);\n            writer.close();\n            reader.close();\n            object", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                default:\n                    throw new QueryParserException($\"Unsupported param {param}\");\n            }\n        }\n        private string Token2Csv(string s = null)\n        {", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "#endif\n\t\t\t\tif (ide.width == 0 || ide.height == 0)\n\t\t\t\t\tthrow new System.ArgumentException (\"Invalid Icon\", \"stream\");\n\t\t\t\tif (ide.width > width || ide.height > height)\n\t\t", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the current label to the successor of the current subroutine\n                // (if the current label is the last one of the subroutine, the\n                //  subroutine is not visited)\n                // the current label is the last one of the subroutine\n                // the", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           string result_of_this_method = __domain.GetString(ptr_of_this_method);\n            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            WriteBackInstance(__domain, ptr_of_this_method,", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self.assertEqual( int(currImageValue), int(lastImageValue)-1, \"Failed to decrement the Image Animator\")\n        # Close", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   self.gss_host = self.kexgss.ssh_get_mic(self.transport.session_id, gss_kex=True)\n\nI hope this helps! Let me know if you have any questions.", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setUserObject(overallNodeName);\n            tree.setDisableTreeSelection(disableTreeSelection);\n        }\n    }\n}", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or (res and res[0] or 0.0), res and res[1] or 0.0)\n        contract_", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   cl1h, cl2h, cl = integrate_kkhalo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zs", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 10;\n        d.height = font.getSize();\n        return d;\n    }\n    @Override\n    public void setText(String text) {\n        super.setText(text);\n        updateSize();\n   ", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "f1=lambda x1,y1,z1,x2,y2,z2:np.array([[np.dot(x2,x1),np.dot(x2,y1),np.dot(x2,z1)],\\\n                                      [", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t\tprivate void CloseButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tClose();\n\t\t}\n\t\tprivate void SecuritiesWindow_SecurityPicker_SecurityAdded(object sender, Security", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "           if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[1]['low']", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getXmpp().getStorage().removeMessageArchive(contact);\n        }\n    }\n}\nPlease help me complete the code.\nThank you.", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (ret.size() < MAX_LOG);\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void parseLog24(Application app, ArrayList<byte[]> log) {\n\t\tfor (int i = 0; i < log.size();", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   if self.body_size > 0:\n        yield RawBytes(self, \"body_data\", self.body_size, \"Body data, unhandled\")\n        return\n    raise Exception(\"Unexpected end of archive\")\ndef main():\n    parser = Parser()", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter.disconnect();\n\t}\n}\n```\nPlease let me know if you have any questions or need further clarification.", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   class _WSGIServer(server.HTTPServer):\n        \"\"\"A WSGI server that serves multiple WSGI apps.\"\"\"\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.apps = []", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model()\n\t\tmodel.loadmodel( sys.argv[1] )\n\t\tmodel.loaddata( sys.argv[2] )\n\t\tmodel.precalculate_scores()\n\t\tprint \"Scores: \" + str( model.score()", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        } }\n    }\n}\n\nNote", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           return rdltypes.UserEnum(type_name, type_name, type_name, type_name, type_name, type_name, type_name, type_name, type_name, type_name, type_name, type_name, type_name, type_name", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No Modules found in the current directory!\");\n                    this.Close();\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Fatal Error:\\nUnable to locate the current directory!\");\n                this.Close();\n            }", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private bool isLoading;\n        private List<T> items;\n        private List<T>", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int i = 0; i < 3; i++)\n                {\n                    float x = this.vertexArray[textureHash][this.vertexPoint[textureHash]++];\n                    float y = this.vertexArray[textureHash][this", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header in exposedHeaders:\n        return\n    exposedHeaders = exposedHeaders.split(',')\n    exposedHeaders.append(header)\n    response['Access-Control-Expose-Headers'] = ', '.join(exposedHeaders]\n    return\ndef handle_crum_error(", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   oldDrivers.Add(idlePool.Dequeue());\n                    Interlocked.Decrement(ref available);\n                }\n            }\n            return oldDrivers;\n        }\n        internal void RemoveExpiredConnections()\n        {\n            List<Driver", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       return [var] if len(var) == 1 else var\n    else:\n        return var\ndef _round_shape(shape, radius, resolution):\n    \"\"\"Round shape to the nearest integer.\n    Args:\n        shape (list): Shape of the area.", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "qn = \"386_StolenDignity\"\n#Variables\nREQUIRED_ORE=100 #how many items will be paid for a game (affects onkill sounds too)\n#Quest items\nSI_ORE = 636", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor((double)nullable.Value - (double)num * 60 + (double)num1);\n\t\t\t\t\tdouble? seconds2", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _sCurProgram = this;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = GL.CreateProgram();\n            VertexDataStride =", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   def __str__(self):\n        return self.name\n\n    def __repr__(self):\n        return \"Model(id_or_model=None, name=None)\"\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tTumourGroupListVo bean = (TumourGroupListVo)beans.get(i);\n\t\t\tcoll.add((TumourGroupList", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       set.start();\n        mListView.setAdapter(new WeaveBookmarksCursorAdapter(this));\n        mNavigationList.clear();\n        fillData();\n        mNavigationList.add(0);\n        mNavigationList.add(new WeaveBookmarkItem(getResources().", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (HighestNumber < (Int32)row.FieldKey)\n                {\n                    HighestNumber = (Int32)row.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.Is", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tthis.predict(pssm, scoresSol);\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
