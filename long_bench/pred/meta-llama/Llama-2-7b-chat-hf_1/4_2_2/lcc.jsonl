{"pred": "\t\t\t\tm_Participants[i].CloseGump( types[defs[i]] );\n\t\t\t}\n\t\t}\n\t\tpublic void Finish()\n\t\t{\n\t\t\tm_Finished = true;\n\t\t\tm_ReadyWait", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\tZ_.add_edge(e_u, e_v, **data.copy())\n\t\t\tZ = Z.copy()\n\t\t\tZ.add_edge(e_v, e_u, **data.copy())\n\t\t\t\n\t\t\tA", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r')\n        # Open the file for reading\n        b = Sndfile(ofilename, 'w')\n        # Now, read some frames, go back, and compare buffers\n        # (check whence == 1 ==", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   self.add_video_to_team(team_name)\n    self.follow_text()\n    self.open_info_page()\n    self.video_title()\n    self.video_id()\n    self.description_text()\n    self.speaker_", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for i in range(len(self.answers)):\n            ret += \"or %s\" % (self.answers[i].ask_string(),)\n        return ret\n        #if self.answers:\n        #    return \"or \".join(self.answers[", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(mob, SR_Utilities.FetchInfo(mob.Account), mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                   ", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.print(cert);\n                s.println();\n            }\n        }\n        }\n    }\n}\n\npublic static void main(String[] args) throws Exception\n{\n    // Create a new SSL", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n            return sp;\n        }\n    public static JESpace getSpace (String name) {\n        return spaceRegistrar.get (name);\n   ", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void consumeAlchemize() {\n\t\tif (owner.consume(Alchemize.class)) {\n\t", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       response = self.dispatcher.dispatch(environ, response)\n        start_response('200 OK', [('Content-Type', 'text/xml')])\n        return [response]\n\nimport http.server\nimport http.server\nimport socket\nimport threading\nimport time", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\nNext line of code:\n        self.webview.execute", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def run_subprocess(self, logger, process):\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        #", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tAssert.IsTrue (a.Union (b).IsSubsetOf (a), \"IsSubset-1\");\n\t\t\tAssert.IsTrue (b.IsSubsetOf (a), \"IsSubset-2\");\n\t\t\tAssert.IsFalse (a.", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   context = SSLContext.getInstance(\"SSL\")\n    context.init(key_managers, trust_managers, None)\n    return context\n\ndef _get_ssl_context(keyfile, certfile, ca_certs):\n    return _get_ssl_context(key", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainConfigForm dcf = new DomainConfigForm();\n        dcf.setDomain(domain);\n        request.setAttribute(\"domain\", domain);\n        doDomain(request, manager, domain);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\nasync def __setup_datastream_pipe(self):\n    ...\n```\nasync def __setup_encoder_process(self):\n    ...\n```\nasync def __data_pump_main(self):\n    ...\n```\nasync def __wait_for_", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnID);\n\t\t\t\t\t//if (jumpID > 0) {\n\t\t\t\t\t\t//database update\n\t\t\t\t\t\t//...\n\t\t\t\t\t", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].isResource()) {\n                argValues[i] = getMessage(defaultMessages, locale, args[i].", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tDataManager.loadFromFile();\n\t\t\t}\n\t\t}), TIMING(new ConfigFile<Long, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(Long long, ConfigurationSection conf)\n\t\t", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tmgr.addNode(playbackNode);\n\t\tmgr.addNode(shortcutsNode);\n\t\tmgr.setPreferenceStore(mgr);\n\t\tmgr.performPreferenceInitialization();\n\t\tparent.shell.setTitle(\"Configure", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n            }\n        }\n    }\n}\nPlease help me with the code.\n\nI'm new to coding and I'm having trouble understanding how to implement the code you provided. I've tried to follow the instructions in the code, but I keep getting an error message that says \"", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.identity_map = self._identity_cls()\n        self.identity_map = self._identity_cls()\n        self.identity_map = self.identity_map\n        self.identity_map = self.identity_map\n        self.identity_map = self.identity", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getDeclaringClass().getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `addslash(method)` to add the slash to the request path.\n    \"\"\"\n    return method\ndef get_argument(self, *args, **kwargs):\n    \"\"\"Decorator for `RequestHandler` subclasses to enable streaming body\n    support.\n    \"\"\"\n   ", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n```\n\n", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   wd = WigleDownloader(args)\n    wd.run()\n", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds = android_builds(build, builds)\n    else:\n        builds = builds or []\n        for platform, arch in android_builds(build, builds):\n            builds.append({'os': platform, 'arch': arch})\n    # Check if we have a direct", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tList<TStateBean> stateBeans = StatusBL.loadByLabel(serializableBeanAllowedContext.getLabel());\n\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Value.IsKind( SyntaxKind.Identifier ) ) {\n                    var identifier = (IdentifierSyntax) argument;\n                    var member = memberList.FirstOrDefault( x => x.Identifier.Value.Is", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the child verticals are set to the correct groups.\n        split_test = self.get_item_from_modulestore(self.split_test_usage_key, verify_is_", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Add the font dictionary\n            PdfDictionary dic = new PdfDictionary(PdfName.FONT);\n            dic.Put(PdfName.SUBTYPE, PdfName.CIDFONTTYPE0);\n            // Add the font base name\n            dic.Put", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth = Math.max(cgn.depth, cgn.main.depth);\n\t\t\t\t\t\tcgn.main.depth = Math.max(", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<Bitmap>(callable);\n        return task;\n      }\n    }\n    private Bitmap loadPage() throws IOException {\n      InputStream inputStream = context.getAssets().open(model.getSprite());\n      Bitmap bitmap = BitmapUtil", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('Details')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\n\\end{code}\n\nI'm trying to understand how the code works, but I", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n```\n\nThe code above is a custom ASP.NET web control that displays a button with various states (enabled, disabled, hover, and click) based on the user's role. The control inherits from the", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return \"Effect{\" + getId() + \"}\";\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   assert store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn',", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   self.assertEqual(person.owns[0], organization)\n    self.assertEqual(organization.owner, person)\n    self.assertEqual(person.employer, organization)\n    self.assertEqual(organization.employees[0], employee)\n   ", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           else:\n                self.line(x, y)\n        else:\n            self.line(x, y)\n    def plot(self, x=None, y=None):\n        \"\"\"\n        Plot two 1D-variables against each other.\n        :param x:", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               toScan.Add(path);\n            }\n            foreach (var item in toScan)\n            {\n                var file = new FileInfo(item);\n                if (file.DirectoryName != null)\n                {\n                    var subdir = file.DirectoryName;\n                   ", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic Set<Map.Entry<K, E>> entrySet() {\n\t\treturn new TransformingSet<>(internalMap.entrySet(), (k, o) -> new TransformingMapEntry<>(", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\n            objcommentslist.append({'UID':uid, 'Object': contobj})\n            replydict.", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t}\n}\n", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   // get the parcel voice channel\n                    //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": retrieving parcel voice channel...", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tMessageBox.Show(\"Error: Invalid Date\",this);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t}\n\t#", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAMEII(header, column_headings)\n        # Skip the line after the column headings.\n        next(file_handle)\n        # Make a list of data lists to hold the data for each column.\n       ", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.has_user_permission_for_group_or_org(data_dict['id'])\ndef _check_group_or_org_member_create(context, data_dict):\n    # FIXME This code is shared amoung other logic.auth files", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\texample.setValue(predictedLabel, example.getValue(predictionAttribute.getMapping().getLabel()));\n\t\t\t\t// assigning child node\n\t\t\t\texample.setValue(node.getClassName(), example.getValue(predictionAttribute.getMapping().getLabel", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Status = SearchResults.NotFound } };\n        }\n        #endregion // Methods\n        #region Methods\n        #region Search\n        public virtual SearchResults[] SearchSegments(SearchSettings settings, Segment[] segments)\n        {", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = Character.toCodePoint(ch);\n            if (codePoint == 0) {\n               return offset + 1;\n            }\n            return match(string, strlen - offset, offset + 1);\n         }\n         return -1;\n      }\n", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     if (existingRequired) {\n        // check if the study form name is valid\n        ValidationResults results = ValidationResults.checkStudyFormNameValidity(accessionNumber, studyFormName);\n        if (results != ValidationResults.SUCCESS) {\n          if", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Version < ProtocolVersion.Min", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((ims.core.vo.beans.CatsReferralPendingEmergencyNonEDAdmissionListVoBean)beans[x].buildV", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   advanced()\n    viewsdb()\n    date()\n    donate()\n    viewsdb()\n    viewsdb()\n    viewsdb()\n    viewsdb()\n    viewsdb()\n    viewsdb()\n    viewsdb()\n    viewsdb()\n    viewsdb()\n   ", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret;\n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </summary", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```\nfrom dirac.lib.base import Base\nfrom dirac.lib.base import Base\nfrom dirac.lib.base import Base\nfrom dirac.lib.base import Base\nfrom dirac.lib.base import Base\nfrom dirac.lib.base import Base\nfrom di", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot.World.GetRallyPoints(bot.Owner, player));\n\t\t}\n\t\tvoid IBotTick.BotTick(IBot bot)\n\t\t{", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       List<AbstractPlanNode> plan = compile(sql, 0, null, null, true, false, DeterminismMode.SAFER);\n        return plan;\n    }\n    public CompiledPlan compile(String sql) {\n        return compile(sql, 0,", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(100, 21);\n\t\t\tthis.comboBox1.TabIndex = 1;\n\t\t\tthis.comboBox1.Text = \"\";\n\t\t\t// \n\t\t", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = parity;\n\t\t\tdcb.DataBits = data_bits;\n\t\t\tdcb.StopBits = bits;\n\t\t\tdcb.Flow", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       self.assertEquals(page.context['cobrand'], cobrand)\n    def test_user_with_cobrand_admin(self):\n        self.user.is_superuser = True\n        self.user.save()\n        page = self.get_page", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    main()\nif __name__ == '__main__':\n    sys.argv = [__file__] + sys.argv\n    if __name__ == '__main__':\n        # Call the main function\n        main()\n   ", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\t\tself.list.append((entry[0], entry[1], entry[2], entry[3], entry[4], entry[5]))\n\t\t\t\tself.list.append((entry[0], entry[1], entry[2], entry[3], entry[4", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               return new Rectangle(fontX, fontY, size.Width + barHeight, size.Height);\n            }\n        }\n    }\n}\n```\nThis code is a part of iTextSharp.text.pdf namespace, which is a part of iText project.\n\n", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n}", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-185.23, +360.0, 73.123)\n        # Sample points.\n        sample_points = [\n            (\"longitude\", x_points),\n            (\"latitude\", y_points", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           if (currPacket != null)\n            {\n                Clipboard.SetText(currPacket.ToHex());\n            }\n        }\n        private void toolStripButtonSave_Click(object sender, EventArgs e)\n        {\n            SaveChanges();\n        }", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;30;40m'\n    else:\n        print '\\033[1;32m'\n    print color\n    return 0\ndef main():\n    # load_data()\n   ", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        public virtual void Remove(TK key)\n        {\n            Remove(key);\n        }\n        }\n    }\n}", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {\n            treeNode1,\n            treeNode28,\n            treeNode63});\n            this.treeView1.SelectedImageIndex = 0;\n            this.treeView", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( self, *args, **kwargs ):\n        pass\n\n    def __init__( self, *args, **kwargs ):\n        pass\n\n    def __getattr__( self, name ):\n        return self.func\n\n    def __setattr__( self", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(baos, emptyStreams.length());\n            header.write(NID.kEnd);\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        header.write(NID.kEmptyFile);", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   g2.setColor(new Color(255, 255, 255, alphaLevel));\n                    g2.fillRect(0, 0, getWidth(), getHeight());\n                    g2.drawString(\"\" + (int) (alpha", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n            }\n        }\n        private static async Task RecycleItems(ISession session, CancellationToken cancellationToken, ItemId itemId, ItemId item)\n        {\n            var itemAmount = await session.Inventory.GetItemAmountByType(itemId);\n            int random", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n    def SersicMainConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f.write('      n      ' + str(c.n) + '      # Sersic index\\n')\n", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n            }\n            lo[0] = i;\n        }\n    };\n    public static sega_decryptPtr sega_decrypt() {\n        return sega_decrypt62;\n    }\n}\n}\n\nPlease complete the code below:\n\npublic", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_location\n    def _install_course_updates(self):\n        \"\"\"\n        Install course updates.\n        \"\"\"\n        pass\n    def _install_course_handouts(self):\n        \"\"\"\n        Install course handouts.\n        \"\"\"\n        pass", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length>0) {\n\t\t\tchance=Float.parseFloat(splitNumber[0]);\n\t\t}\n\t\treturn (int)chance;\n\t}\n}\n}\nPlease help me resolve this error.\n\nI'm not", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   if action == \"create\":\n        # Create the meter\n        create_meter(module, name, apiid, apikey)\n    elif action == \"search\":\n        # Search for meters\n        search_meter(module, name, apiid, apikey)\n    elif action ==", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.Location = new System.Drawing.Point(6, 6);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size = new System.Drawing.Size(209, 17", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       self.policy.run_plugins()\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"\")\n        self.ui_log.info(\"\")", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   getRoomFullName.name = \"roomFullName\"\n    getRoomFullName.produce = lambda s: s.getRoom() + \" \" + s.getLocation().getName()\n    getRoomFullName.convert = lambda s: s.getRoom()", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                       parent.mirthClient.disconnect();\n                        parent.mirthClient = null;\n                        parent = null;\n                        return false;\n                    }\n                    }\n                };\n                result = messageBrowser.importMessages(fileTextField.getText(), messageWriter);", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = (int) value;\n\t\t\t\t}\n\t\t    \t}\n    \t\t}\n    \t\treturn layer;\n    \t} catch (Exception e) {\n    \t\tthrow e;\n    \t}\n    }\n    \n   ", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentUser != null) {\n            // Load the user's profile picture and name\n            GraphUser user = GraphUser.fromFacebook(currentSession).get();\n            userProfilePic = user.getPicture();\n            userProfilePicID = user.getId();", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tfor (int i = 0; i < emotions.length; i++) {\n\t\t\temotions[i].strength = sum", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }\n        ],\n            self.build.stages_to_list())\n    def test_xml_compare(self):\n        # Test that the BuildJob XML is valid\n        # and that the diff", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   Lat = phi1Rad*_rad2deg;\n    Long = phi1Rad*_rad2deg;\n    return (phi1Rad, phi1);\n#=================================================================\n# End of code\n# Please complete the code below\n    pass\n", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       if request.method == 'POST':\n            form = ReportUserForm(request.POST)\n            return render_to_response('accounts/reportuser.html', {\n                'form': form,\n            })\n    else:\n        return render_to_response('accounts", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   def __init__(self, *args, **kwargs):\n        super(ProductAddSeriesView, self).__init__(*args, **kwargs)\n        self.form_class = ProductAddSeriesForm\n        self.form_fields = ('series',)\n        self.label = \"", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t\t\t\tform.RightToLeftLayout = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tform.RightToLeft = RightToLeft.No;\n\t", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp = (temp >> 8) & 0xFF;\n            }\n        }\n        return arr;\n    }\n}\n\nPlease note that this is a simplified version of the code, it does not include all the error handling and validation that would be required for a real-world", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, regex))\n            return new_positional_tags_list\n    def _add_post_processor(attr):\n        return attr\n    return {\n        'compile_tag_regex': compile_tag_regex,\n       ", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n        }\n    }\n}\n\nI'm getting an error on the line \"return new object[0];\" that says \"Argument 1: cannot convert from 'System.Collections.Generic.List`1[Microsoft.Samples.Debug", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_PID00(packet_factory.get_packet(packet_type))\npacket.name = \"PID_00_PIDsSupported\"\npacket.supported_pids = [0x00, 0x0", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tself.add_standard_objects()\n\t\tself.set_alias('default', collection)\n\t\tself.set_alias('session', collection)\n\t\tself.sessions = { }\n\t\tself.prompts = { }\n\t\tself.collections = {", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def __enter__(self):\n        self.push()\n        return self\n    def __exit__(self, exc_type, exc_value):\n        self.pop(exc_value)\n        return exc_value\nclass ContextManager(object):\n    def __init__(self", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   return _pubsub_consumer(session, cluster_id)\ndef pubsub_consumer_by_id(session, cluster_id, id):\n    return session.query(PubSubConsumer).\\\n        filter(PubSubConsumer.id==id).\\\n       ", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n}\n\\end{code}\n\nThis code is generated by the Puzzle IT tool, which is a tool", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis = ray_trafo.range.element(angles)\n    # Compute angles\n    phi = np.arctan(angles)\n    # Compute angles\n    theta = phi * 2\n    # Compute lower and upper bound\n    source_to_line", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           # class ProviderProxy:\n            #     def __init__(self):\n            #         self.Type = 'GlypeProxy'\n            #         self.param = 'browse.php?u='\n            #         self.option = '&b=32&f=", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn font_size_names [type];\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\tvar innerVal = (JObject)obj.Properties[0].Value;\n\t\t\tAssert.That(innerVal.Type, Is.EqualTo(TokenType.Object));\n\t\t\tvar inner = (JObject)innerVal;\n\t\t\tAssert.That(", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\n                edges.add(new T2(w, h));\n            }\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices() {\n            return Collections.singleton", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = dclab.Isoelastics(ds)\n    assert np.allclose(iso.get(col1=\"area_um\", col2=\"deform\", lut_identifier=\"LE-2D-FEM-19\"), [1.61819", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final String[] namespaces = { \"ns1\", \"ns2\" };\n        final String[] filenames = { \"file1.nt\", \"file2.nt\" };\n        final int[] timestamps = { 123456789, 9", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   assert not alert.lowest_spotprice(history, 'us-east-1b') is None, \"There should be a spot price of 0.105200\"\n    def test_check_for_alert_with_no_history(self):\n        \"\"\"", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tperformDownload();\n\t\t\treturn performInstallation();\n\t\t}\n\t\treturn false;\n\t}\n\tpublic void printError(Throwable t) {\n\t\tif (t != null) {\n\t\t\tSystem.err.println(t.getMessage());", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tSDL.SDL_GL_DeleteContext(context);\n\t\t\tcontext = IntPtr.Zero;\n\t\t}\n\t}\n}\n\";\n}\npublic class Sdl2GraphicsContext : IGraphicsContext\n{\n\tpublic void InitializeOpenGL()\n\t", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat, self.y_data_cov_mat, self.x_model, self", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       return new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n    }\n}\n```\nThis code is part of the OpenCms project.\n\nPlease note that this is just a sample implementation and may", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 } catch (Exception e) {\n                    // ignore\n                  }\n                }\n            }\n          }\n          // Transfer the ownership of Snapshot objects to the blockstorage system account\n          if (walrusObject.getObjectKey().equals(walrusSnapshotObjects.get(", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n        }\n        }\n        #endregion\n        #region Private Methods\n        private void Initialize()\n        {\n\t\t\tif (_initializationState == InitializationState.NotInitialized)\n\t\t\t{\n\t\t", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(\n                createParameters(isImportAsNewEntity, name),\n                VmTemplate.class,\n                StorageType.NFS);\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        command", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tthis.vbox2.Add (this.spinbuttonCheckPeriod);\n\t\t\tglobal::Gtk.Box.BoxChild w11 = ((global::Gtk.Box.BoxChild)(this.vbox2 [this.spinbuttonCheckPeriod]));\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.set('TEMPDIR', self.get('TEMPDIR'))\n        self.set('DIRECTORY', self.get('DIRECTORY'))\n        self.set('NZBNAME', self.get('NZBNAME'))\n        self.set('NZB", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes, Type[] returnTypes, Type[] genericParameterConstraints)\n\t\t{\n\t", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n  }\n  \n    public enum ServiceType {\n      UNKNOWN = 0,\n      BATTLENET = 1,\n      REJOIN = 2,\n      RESERVED1 = 3", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = quads[i * 4 + x];\n            }\n        }\n    }\n    public void render(Renderer renderer) {\n        super.render(renderer);\n    }\n    public void render(Renderer renderer, Renderer.State state", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.addAll(Arrays.asList(showDateData.split(\",\")));\n        return result;\n    }\n    public String getIconPostfix() {\n        return ICON_POSTFIX;\n    }\n    public String getSortableColumns() {\n        return COL", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.1f);\n\t\t\t}\n\t}\n}\n}\n```\nI apologize, but I'm not sure what you're asking for. The code provided is a script for a Unity engine, and it appears to be", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n    //--------------------------------------------------------------------------------\n", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                Users.Add(lastUser);\n            }\n            // send email to all users in the list\n            // ...\n        }\n    }\n}\n\\end{code}\n\nThis code is part of the", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // check if all criteria are met\n            if (VerificationResultCollection.Count > 0)\n            {\n                // display warning message\n                ARow.SetValidationResult(VerificationResultCollection[0].ValidationControl, VerificationResultCollection[0].ValidationResult);\n                return T", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob/byte array.\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n```\nThis code is part of the Phosphorus Five framework, which is", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements\"\n\nI apologize, but I cannot provide you with the complete code for the `PayloadRequirements` class as it is not available in the given code snippet. However, I can provide you with some information on how", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\t\n\t\t}\n\t\t#endregion\n\t\tpublic void OnValidation(object sender, ValidationEventArgs e)\n\t\t{\n\t\t\tif (e.ValidationResult == ValidationResult.Invalid)\n\t\t", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\t}\n\t\t\n\t\tpublic string ConfDirectory {\nNext line of code:\n\t\t\tget {\n\t\t\t\treturn confDir;\n\t\t\t}\n\t\t", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n            if (bugAnnotation.getType() == BugAnnotation.Type.ANALYSIS_ERROR) {\n                analysisErrors++;\n            }\n        }\n        if (analysisErrors) {\n            missingClasses++;\n        }\n    }\n}\n\nNote: This code is generated", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\t\t// Add the new food items\n\t\tforeach ( Food food in Food.GetTypes() )\n\t\t{\n\t\t\tif ( food is RoastPig )\n\t\t\t{\n\t\t\t\tRoastPig roastPig = new RoastPig();", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                   }\n                }\n            }\n        }\n        private void JungleClear()\n        {\n            if (ManaManager.HasEnoughMana(Menu.GetSlider(\"JungleClearMana\")) && ManaManager.SpellFarm)\n            {\n", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, anchor);\n\t}\n}\n}", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       warnings = self.warnings(region, location)\n        forecast = self.forecast(region, location)\n        uvi = self.uvi(location)\n        return warnings, forecast, uvi\n    def __del__(self):\n        self.stop()\n       ", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertTrue(field_def['pid'] == field_model_def['pid'])\n        self.assertTrue(field_def['rules'] == field_model_def['rules'])\n        self.assertTrue(field_def['producer'] == field_model_def['", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10, \">E1<\", \"?E1?\"}});\n                result = env.CompileExecuteFAF(\"select * from MyInfraW where f2='E1'\", path);\n                EPAssertionUtil", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def __itruediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        raise ValueError(\"Attempting to divide by zero!\")\n        return self\n    \n    def __truediv", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view = self.pool['ir.ui.view'].browse(cr, uid, view_id)\n    view_id = 123\n    arch = '<t-call>Hello World!</t-call>'\n    context = {'website_meta_title': '", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           c.putClientProperty(BasicHTML.propertyKey, createHTMLView(text));\n        }\n        else {\n            ViewFactory f = getFactory();\n            View v = f.create(text);\n            v.setSize(0, 0);\n            c.putClient", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, contents=content)\n    assert s.name_is_testharness\n    assert not s.name_is_reference\n    assert not s.name_is_worker\n    assert not s.name_is_multi_global\n    assert s.name", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.loader = namedQueryReference;\n\t\t\t}\n\t\t}\n\t\t#endregion\n\t\tpublic void Mappings(System.Collections.Generic.List<string> mappings)\n\t\t{\n\t\t\tif (mappings == null)", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t}\n\t}\n}\n}\nPlease help me to complete the code.\nI have tried to complete the code but I am getting an error in the line `writer.Write( (Mobile", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        assert currentGraph() != null;\n        assert currentGraph().graph() != null;\n        assert currentGraph().graph() == currentGraph();\n        popGraph();\n    }\n    private void", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               print(\"  Running pytest:\")\n                print(\"  --------------\")\n                print(\"  pytest:\")\n                print(\"  --------------\")\n                print(\"  pytest:\")\n                print(\"  --------------\")\n                print(\"  Running pytest:\")", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = materializedPhis.get(key);\n                    for (int i = 0; i < states.size(); i++) {\n                        states.get(i).readCache.add(entry.getKey(), key);", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            mCallback.handleCallSessionEvent(event);\n        }\n    }\n}\n\nPlease help me with the code. Thank you.", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new InternalGump(from as PlayerMobile, this));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   'models = [...],\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user(self, username, domain):\n        # ...\n\n    def remove_user(self, username, domain):\n        # ...\n\n    def remove_user(self, username, domain):\n        # ...\n\n    def remove_user(self, username,", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( res['Message'] )\n      return res\n    gLogger.info( \"-\" * 40 )\n    return S_OK()\n  def __del__( self ):\n    \"\"\"\n    \"\"\"\n    pass\n", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(PLUGINS_PREFIX.equals(uri.getPath())) {\n\t\t\t\t// Allow plugins to handle forms with plugin-specific actions\n\t\t\t\t// FIXME: what about /downloads/ ?\n\t\t\t\t// FIXME:", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       yield self.run_fake_single_build(gsp, buildResults=[SUCCESS],\n                                         finalResult=SUCCESS,\n                                         resultText=[\"succeeded\", \"succeeded\"],\n                                         expWarning=False)\n        defer", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.name = 'Less'\n    self.category.description = 'This is a test'\n    self.assert_(self.category.name == 'Less')\n", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            return r2;\n        }\n        @Override\n        public Map<String, AnnotationMirror> visit(AnnotatedTypeMirror type,\n                AnnotatedTypeMirror owner) {", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   # ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n\n# ...\n", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_IRQEnabled = map16.IRQEnabled;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           _jMnuRoot.add(getOpenDocumentMenuItem(SOPENDOCUMENT));\n        }\n        private void insertMenus(){\n            m_jMnuOptions.add(jMnuOptions);\n            m_jMnuOptions.add(jMnuSeparator", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [10 Red Bears]\n\t}\n}\n}", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn base.SizeHeightToFit (min);\n\t\t}\n\t}\n}\n\n", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return reverse('announcements:announcement_detail', args=[self.announcement.slug])\n    def get_absolute_url(self):\n        \"\"\"\n        Return the permalink to this announcement.\n        \"\"\"\n        return reverse('announcements:", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                    ''', (i,))\n    i = i + 1\n    print \"i is: \", i\n    print \"i is: \", i\n    print \"i is: \", i\n    print \"i is: \", i\n    print \"i is: \", i\n    print", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       conn.table('projects').update({'last_snapshot': timestamp}, upsert=True)\n        conn.table('projects').insert({'id': project_id, 'last_snapshot': timestamp})\n        conn.table('projects').update({'last_snapshot': None", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n```\nPlease fix the code and provide the result.", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\tvalue\t- vote value\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data = host_data\n        self.start = time.time()\n        self.finish = time.time()\n        self.duration = duration\n        self.result = result\n        self.add_", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n\\end{code}\n\nI'm getting an error on the line `Intent confirmOpen = new Intent(context, ConfirmDialog.class);`:\n\n\\begin{code}\nThe constructor Intent(Context, Class<ConfirmDialog>)", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   assert primary.keys() == []\n    print(\"primary.xml doesn't contain any packages\")\n    return\ndef behave_step_primary_in_path_doesnt_contain_any_packages():\n    behave_step_primary_in_path_doesnt_contain", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           self.get_finalized_command('build_ext')\n        inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n    # get_inputs ()\n    def get_finalized_command (self, command):\n        return self", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = disassembledValues[j];\n\t\t\t\tif (propValue != null)\n\t\t\t\t{\n\t\t", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--job-name', job_name,\n        '--log-file', log_name,\n        '--job-id', request['job_id'],\n        '--max-vmem', request['job_max_vmem'],\n        '--cpu-bound', request", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new DelegateViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(Delegate", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                   var circle = (Circle) obj;\n                    var radius = circle.Radius;\n                    var x = circle.X;\n                    var y = circle.Y;\n                    return string.Format(\"({0},{1},{2})\", x, y, radius);\n", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def checkDownload(self, *args, **kwargs):\n        self.html = self.load(self.url)\n        self.logDebug(self.html)\n        self.doTimmer()\n        self.doCaptcha()\n        self.doLongWait()\n       ", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\t\tif (path.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tvar closest = path.Min(p => p.DistanceTo(self.Location));\n\t\t\t\t\treturn closest;\n\t\t\t\t}\n\t\t\t}\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "           self.logger.error(\"dhcpd -t failed\")\n            return False\")\n        else:\n            self.logger.error(\"cannot find dhcp module: %s\" % which_dhcp_module)\n            return False)\n        return True)\n        return True", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\nPlease complete the code by adding the missing methods and variables.\n\npackage org.yamcs.events;\n\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.concurrent.atomic", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           goto Loop;\n            }\nNoLoop:\n            if (context.Suffix == PpmContext.ZERO)\n            {\n                goto RestartModel;\n            }\n            }\n            goto Loop;\n            }\nLoop:\n            if (context", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Short VR.\n        /// </summary>\n        public static readonly DicomVr SSvr = new DicomVr(\"SS\", true, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\t//now we have the list of tests to delete\n\t\t//now we have the list of tests to delete\n\t\t//now we have the list of tests to delete\n\t\t//now we have", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       self.failUnlessRaises(cdata.error, cdata.insert_bytes, o, 4, 0)\n        self.failUnlessRaises(cdata.error, cdata.insert_bytes, o, 4, 0)\n        self", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  </table>\n</table>\n  \n  <", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot([], [], 'o-')\n    ax.plot([], [], 'o-')\n    ax.set_xlabel('Runs')\n    ax.set_ylabel('Time in ms')\n    ax.set_title('Time in ms')\n    ax.", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/GID switches when current effective GID is non-root.\n        \"\"\"\n        self._testUIDGIDSwitch(0, 1, 0, 0, [0, 1], [])", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tg.setColor(MetalLookAndFeel.getControlShadow());\n\t\t\t\tg.fillRect(x, y, controlSize - 1, controlSize - 1);", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, knn, patternDict, testName):\n    failures += simulateKNN(knn, patternDict)\n\nI am unable to run the code as it is giving me an error. Can someone please help me with this?", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       mirror.writeElement(offset, value);\n    }\n}\n\nPlease complete the code by filling in the blanks with the appropriate values.\n\npublic class OhmArrayLayout extends OhmGeneralLayout implements ArrayLayout {\n    // ...\n    public OhmArrayLayout(Kind elementKind", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // attempt to resolve assembly reference using relative path\n            string assemblyPath = File.GetAssemblyPath(relativePath);\n            if (assemblyPath != null) {\n                return assemblyPath;", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\ndef get_version():\n    try:\n        import py2app\n        return py2app.get_version()\n    except ImportError:\n        return None\ndef get_platform():\n    try:\n        import platform\n       ", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dlasdt.dlasdt(i16, localintW2, localintW1, paramInt5, paramInt8, paramInt9, paramInt10, paramInt11, paramInt12, paramInt13, paramInt14, paramInt15", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t\t\" + s.name + \"\\n\";\n\t\t\t}\n\t\t\tstr += \"Current State: \" + _current_state.name + \"\\n\";\n\t\t\tstr += \"Current Destination State: \" + _desired_state", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   MissileSpellName = \"LucianRMis\",\n                });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                    SpellName = \"", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t}\n}", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.CalledProcessError)\n        with self.assertRaises(subprocess.CalledProcessError):\n            proc = subprocess.Popen(['/bin/sh', '-c', 'echo \"hello\"'],\n                                    stdout=", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Startup();\n\t\t\tResourceService.Startup();\n\t\t}\n\t}\n}\n// </file>\n```\nThis code is a sample implementation of the `CoreStartup` class, which is responsible for initializing the ICSharpCode.Core", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t}\n}\n}\n// End of file\n```\nI hope this helps! Let me know if you have any questions.\n\nThe code you provided is for the `System.Data.Constraint` class, which is part of the System.Data namespace in .NET. This class provides a way", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.setWindowTitle(\"My Dialog\")\n        self.show()\n        self.raise()\n        self.activate()\n\nProcess finished with exit code 0\n\nComment: Please provide the complete code for the dialog, including the UI definition and the Python code to create and show the", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n            }\n            return super.onResult( result );\n        }\n    }\n    private void showTaf( String stationId ) {\n        // Get the TAF data for the given station\n        Taf taf = new Taf();\n        taf.setStationId(", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 1) ^ (uiCRCITTSum & 0x10000);\n            }\n            return (ushort)uiCRCITTSum;\n        }\n        public void Reflect(", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 0;\n\t}\n\tpublic void shoot(Entity target, float speed, float rotation) {\nNext line of code:\n\t\tthrowableEntity = new Bullet(level, target);\n\t}\n\tpublic void update() {\nNext line of code:\n\t", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new HyperlinkDetector[] { \n                    new JavaHyperlinkDetector(), \n                    new ReferencesHyperlinkDetector(), \n                    new ReferencesPopup() };\n        } else {\n            return new HyperlinkDetector[] { \n                    new Java", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.addWidget(self.drawingModeWidget)\n        self.setWindowTitle(\"Object3D Properties\")\n        self.setWindowIcon(qt.QIcon(\"icon.png\"))\n        self.setWindowTitle(\"Object3D Properties\")\n        self.setWindowIcon(", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Prev location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = false;", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    chosenObj = selectConverter.convert(value);\n                  }\n                  else\n                  {\n                     // If the value is not contained in the valueChoices set, try to convert it to a String\n                     // and then check if it matches the target type\n                    ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\tsb.append(fractionWithAmount[i][j][k]+\"\\t\");\n\t\t\t}\n\t\t}\n\t\tsb.append(\"\\n\\n\\n", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\n                            //get the index of the purchase order and line that contained the unpriced product\n                            int orderIndex = unpricedLine.Key;\n                            int lineIndex = unpricedLine.Value;\n                            //check that the order can be found that contains the unpr", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t}\n\tpublic class ClientOperationCollection : Collection<ClientOperation>\n\t{\n\t\tpublic ClientOperationCollection ()\n\t\t{", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final Subject mockSubject = EasyMock.createMock(Subject.class);\n        final Database mockDatabase = EasyMock.createMock(Database.class);\n        final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        replay(mockSecurityManager", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn viewport.ToVector2 () * viewport.ScaleFactor ();\n\t\t}\n\t}\n}\n}\n```\nThis code is a utility class that provides various methods for working with vectors, matrices, and other mathematical operations. It includes methods for rotating, scaling,", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "e = endpoint_key(vlan=1, mac_hi=0x1000, mac_lo=0x1001)\nprint(type(e))\nprint(type(endpoint_key))\nprint(type(endpoint_value))\nprint(type(endpoint", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\tif (workerSocket != null)\n\t\t\t\t\t{\n\t\t\t\t\t    workerSocket.Close();\n\t\t\t\t\t    m_workerSocketList[i] = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(list);\n                    break;\n                case Activity:\n                    logActivityBucket(list);\n                    break;\n                case Step:\n                    logStepBucket(list);\n                   ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " def GenerateBase(number_of_args):\n    \"\"\"Generate the base class for the callbacks.\"\"\"\n    optional_comma = ''\n    if number_of_args > 0:\n      optional_comma = ', '\n    typenames = ', '.join", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   \"\"\"\n    response = HttpResponse(mimetype='application/json')\n    for item in items:\n        response.write(json.dumps(range_item_dict(item)))\n    return response\ndef laconia_error(request, message):\n    \"\"\"\n   ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       new VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                serviceGraphPattern.addChild(new JoinGroupNode(\n                        new StatementPatternNode(new VarNode(\"lit\"),\n                        new ConstantNode(TermId(0", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       return super(UserDetailView, self).post(request, *args, **kwargs)\n        # ...\n        # rest of the code ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return UnitHelper.ComputePublicKeyToken(this.PublicKey); }\n    }\n    #region IAssemblyReference Members\n    IAssemblyReference/*?*/ IAssemblyReference.ContainingAssembly {\n      get { return this.ResolvedAssembly.ContainingAssembly; }\n", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n            // Perform the TFQMR iteration\n            for (int k = 0; k < 100; k++)\n            {\n                // Compute the norm of the residual\n                // Compute the norm of the residual\n                // Compute the norm of the resid", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat[] medians = new Apfloat[2];\n\t\t\tmedians[0] = sortedNumbers[left];\n\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               parent[v] = edge.child\n                sample_count[v, j] = 1\n                break\n        for edge in edges_in:\n            parent[edge.child] = edge.parent\n            sample_count[edge.child, j] = 1\n            sample", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       client.indices.put_mapping(index=self.enrich_index, body=mapping_json)\n        result = client.indices.put_mapping(index=self.enrich_index, body=mapping_json)\n        return result\n    def test_items_", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tslotsButton.IsDisabled = () => true;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header.serialize() + struct.pack('!x', padding_bytes)\n    def __len__(self):\n        return len(self.data)\nclass DataFrame(Frame):\n    frame_type = FrameType.DATA\n    def __init__(self, stream", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           if (cluster.RectangularBoundary != null) {\n                cluster.BoundaryCurve = cluster.RectangularBoundary.Curve;\n            }\n        }\n        internal void DebugCurveCheck() {\n            if (DebugCurves != null) {\n                foreach (var", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            checker.report(Result.failure(\"unique.leaked\"), initializer);\n        }\n        return super.visitNewArray(node, p);\n    }\n    @Override\n    public Void visitMethodInsn", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tnbttagcompound.setInteger(\"color\", color);\n\t\t}\n\t}\n}\n}\n\n", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(Context, _returnNode.InnerXml);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t// Private methods\n\t\t//--------------------------------------------------------------------\n\t\tprivate void CreateMethods()\n\t", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t}\n\t\tprivate void AreEqual(int expected1, int expected2, int real, string name)\n\t\t{\n\t\t\t// This is needed since the default size vary between XP theme and W2K theme.\n\t\t\tif (real != expected1 && real !=", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\twhen(classType.isClass()).thenReturn(false);\n\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration,", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (this.isImplicit() != other.isImplicit())\n\t\t\treturn false;\n\t\t\n\t\treturn true;\n\t}\n\t\n\tpublic int hashCode() {\n\t\treturn accessPath.hashCode() ^ (exceptionThrown ? 1", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideRExtent[end][r.rightChild];\n            int max1 = wideRExtent[start][r.rightChild];\n            int max2 = narrowRExtent[end][r.rightChild];\n            int startState = r.leftChild;", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "```\n    def test_pgdata_invocation(self):\n        ret = 0\n        out = 'out'\n        err = 'err'\n        pipe = _mock_pipe(popen, pipe_processor_loop, ret, out, err)\n        cmd = command_", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_DelayedIsRunningChanged;\n\t\t\tprocess.ThreadsChanged -= DbgProcess_ThreadsChanged;\n\t\t\tprocess.R", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes a material with a unique name.\n\t *\n\t * @param   name    Name of the material.", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( this == proxyThat ) {\n\t\t\treturn true;\n\t\t}\n\t\tif ( !(proxyThat instanceof Contact) ) {\n\t\t\treturn false;\n\t\t}\n\t\tContact contactThat = (Contact) proxyThat;\n\t\tif (", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   LSolv.Set_R_Mats()\n    LSolv.Set_Bodies()\n    LSolv.Set_R_Mats()\n    LSolv.Set_Bodies()\n    LSolv.Set_R_Mats()\n   ", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata:\n            subtens = Subtensor(node.inputs, *cdata)\n            ret = subtens(node.inputs[0], *cdata)\n            # Copy over previous output stacktrace\n            copy_stack_trace(node.outputs, ret)", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   class Meta:\n        model = CommunityPage\n        fields = ('title', 'slug', 'order', 'content')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'view_community_page' community.slug %}\"\n        helper_", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(query)\n        else:\n            return fn(arg[0], **kw)\n        return query\n    def before_execute(self, query):\n        pass\n    def after_execute(self, query):\n        pass\n    def before_fetch(self,", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           for child in self.show_tag_list:\n                etree.SubElement(xml_object, 'show').text = child\n        return self.definition_to_xml(self)\n    def get_icon_class(self):\n        return 'other'\n    def get", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       self.register_adapter(data_model_changes.get_sample_changed_indices())\n        self.register_adapter(data_model_changes.get_sample_changed_indices())\n        self.register_adapter(data_model_changes.get_sample_changed", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\t\telse if (Method != null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' attribute with 'ldtoken'\");\n\t\t\t\t\treturn false;\n\t", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\t// \n\t\t\t// label7\n\t\t\t// \n\t\t\tthis.label7.Location = new System.Drawing.Point(16, 304);\n\t\t\tthis.label7.Name = \"label7\";\n\t\t\tthis", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"Changes/twisted/mail/syncmail.py\"]))\n        self.assertEqual", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n        }\n        termData.put(row.get(ID_KEY), csvData.get(row.get(ID_KEY)));\n    }\n    protected abstract CSVFormat setupCSVParser", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\treturn super.onWanded(player, wand);\n\t}\n}\n```\nPlease help me solve this problem, I'm new to programming and I don't know where to start.\n\nI'm trying to understand the code, but I don't know what it", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           intrinsicCohesion += this.getRepresentativity(component, c);\n        }\n        return intrinsicCohesion;\n    }\n    private void memorizeCohesion(Community c) {\n        this.memorizedcohesion.put(", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        # Upgrade the record\n        run_sql(\"UPDATE bibdoc SET doctype=%%s, more_info=%%s WHERE id_bibdoc=%%s\", (docid,))\n        return True\n    else:\n        return False\n   ", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\tcomputerMgmt.Dispose();\n\t\t\tcomputerMgmt = null;\n\t\t\t\n\t\t}\n\t\tprivate void updateListViews(string computer)\n\t\t{\n\t\t\tif(computerMgmt.getComputerCollection", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exDateList) {\n      exDateList.add(date);\n    }\n    return exDateList;\n  }\n  private static Date toDatable(Date date) {\n    return toDatable(date);\n  }\n", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.Source = sourceProperty;\n\t\tsourceEventBinding.Target = DataSource;\n\t\tsourceEventBinding.EventName = SourceEventName;\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           // Parse the JSON data\n            Map<String, String> spanPorts = new Gson().fromJson(jsonData, Map.class);\n            List<PortJsonBean> port = new ArrayList<PortJsonBean>();\n            for (String port : spanPorts.keySet()) {", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tpublic final Images images;\n\t\tpublic static final int CANCEL_X = 102107;\n\t\tpublic static final int CANCEL_", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n    }\n}\n\\end{code}\n\nI'm getting the following error:\n\n\\begin{code}\njava.lang.NoSuchMethodError: org.springframework.jdbc.core.JdbcTemplate.queryForRow", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\nlam.make_von_den_driesch_equiv(project_uuid='A5DDBEA2-B3C843')\nlam.replace_hierarachy(old_parent='http://eol.org/pages/", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           }\n        }\n        private void ReadFrom(BinaryStream stream)\n        {\n            // read the record type\n            XF_RECORD_HEADER header = new XF_RECORD_HEADER();\n            header.ReadFrom(stream);\n            // read the", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t\t// Half-width kana.\n\t\t\t\t\tposn += 2;\n\t\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\t// Unknown character.\n\t\t\t\tposn++;\n\t\t\t\tcontinue;", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "```\n    obj.operands = [src1, src2, dst]\n    obj.type = type_data_processing\n```\nExpected output:\n```\n    tricore_branch(0x62, 0x63, 0x64, 0", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tJRPropertiesMap properties = new JRPropertiesMap();\n\t\t\tproperties.load(location);\n\t\t\treturn properties;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n}\nPlease help me with the code.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptorTest.cs\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def get_releases(self, progress_cb):\n        self.put(None)\n        thread = AcoustidLookupThread(progress_cb=progress_cb)\n        thread.start()\n        return releases\ndef main():\n    # ...\n    # ...\n   ", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       }\n    }\n}\n}\n```\nPlease help me to complete this code.\n\nI have a feeling that this code is for a Photon Unity Networking asset in Unity, but I'm not sure. Can you please help me understand what this code is doing and how it relates", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\nrootLayout.setOnLongClickListener(new View.OnLongClickListener() {\n            @Override\n            public boolean onLongClick(View v) {\n                // Handle long click\n                return true;\n            }\n        });\n    }\n    @Override\n    public void onResume", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.dot(op_cc, op_cc)\n            op_cc = np.dot(op_cc, op_cc)\n            op_cc = np.linalg.inv(op_cc)\n            op_cc = np.dot(op", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"Tolvansson\", 255));\n        Response response = utkastController.createUtkast(", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll == ragdoll) {\n\t\treturn;\n\t    }\n\t    //do this regardelss of network state\n\t    //this will ensure a smooth transition even if the updates don't happen very often\n\t    //this will ensure a", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.topology = ClassFactory(InterpolatedNodeSet)\n        self.topology = ClassFactory(InterfaceNodeSet)\n        self.topology = ClassFactory(InterpolatedNode", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)((num >> 24) & 0xff);\n        out[outOff + 3] = (byte)((num >> 16) & 0xff);\n        out[outOff + 2] =", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source, new SimpleRegexValueGetter( objectVariables ) );\n        }\n    }\n}", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   slice_json['valeur'] = transform_values_holder_xml_json_to_json(value)\n    return slice_json\ndef transform_values_holder_xml_json_to_json(values_holder_xml_json, format = None):\n    comments =", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_ENABLE_FRAME!=null)\n              btn.setIcon(new ImageIcon(ClientSettings.ICON_ENABLE_FRAME));\n          }\n        }\n      });\n      }\n    }\n    catch (Exception e)", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   from client import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import *\n    from server import", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));\n    for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n   ", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, \"UPDATE \" + Db.Table1.NAME + \" SET \" + Db.Table1.NAME + \" = ? WHERE \" + Db.Table1.ID + \" = ?\", new String[] {Db.Table1.NAME", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               else if (m_meth == AllocMethod.CoTaskMem)\n                {\n                    Marshal.DestroyStructure(m_ptr);\n                }\n            }\n        }\n        #endregion\n    }\n}\n\\end{code}\n\nThis code", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n# ...rest of the code...\n```\nPlease complete the code by filling in the appropriate values for the settings variables.", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\t\t\t\t// Cancel the build\n\t\t\t\t\t\tvar queueItem = queue.FirstOrDefault(pi => pi.Item == itemName);\n\t\t\t\t\t\tif (queueItem != null)\n\t\t\t\t\t\t{\n\t\t\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       infoText +=  \" file\"\n        infoText +=  \"(\" + Utils.getFileNameFromFullPath(unicode(self.currentDir)) + \")\"\n        infoText +=  \")\"\n        infoText +=  \"<br>\"\n        infoText +=  self.currentDir", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%(\\w+)%', r'%%\\1')\n        #print code\n        self.outputs[0].write(code)\n        self.post()\n        self.tasks.pop()\n        self.bld.post", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self.workOnPlan(knowledge_parser_result.problem_pddl.data, knowledge_parser_result.domain_pddl.data)\n        print \"this is the result of the plan\"\n        print \"this is the result of the plan\"\n       ", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx - reactorExtent ] + chemical[ 0 ][ idx - reactorExtent - 2 ]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               if (pattern == null) {\n                    throw JsonException.$(0, \"TIMESTAMP format pattern is required\");\n                }\n                break;\n            default:\n                throw JsonException.$(position, \"Invalid type\");\n        }\n    }\n}", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn base.ReceberAutoIncremento(qs, entity);\n\t\t}\n\t}\n}\n```\nPlease help me to complete this code.\n\nThank you.\n\nNote: This is a generated code, you should add the necessary changes to adapt it to your", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t}\n}\n}\npublic class MyClass\n{\n\tpublic string Autoproperty { get; set; }\n\tpublic string ReadOnly { get; set; }\n\tpublic MyEnum EnumProp { get;", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       self.cli_load_config(commands)\n        self.check_response(commands, \"NTP_AUTH_KEYID_CONFIG\")\n    def main(self):\n        pass\n    def main(self):\n        pass\n    def main(self):\n        pass\n", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           self.store.convert_to_draft(test_course.id)\n        # Verify that the ancestor nodes have the correct edited_on values\n        for block in [component, child, sibling]:\n            check_node(block.location, editing_by=editing", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (TEXT_CODE & 0xff));\n        addToCharBuff(ch[start]);\n        updateWithCharBuf();\n        // ...\n    }\n    public void ignorableWhitespace(char ch) throws SAXException {\n", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict)\ndef mkcomparison(data):\n    return aetypes.Comparison(data)\ndef mkobjectfrommodule(data):\n    return aetypes.ObjectFromModule(data)\ndef mkenum(data):\n    return a", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           return ResolveType(api, controllerName, actionName, parameterNames, sampleDirection, out formatters);\n        }\n        private Type ResolveType(ApiDescription api, string controllerName, string actionName, IEnumerable<string> parameterNames, SampleDirection sampleDirection, out Collection<MediaType", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.set_value()\n            return True\n        else:\n            return True\n    def _key_up(self, path, model, column):\n        model.get_iter(path)\n        record = model.get", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, beanDefinition);\n        }\n        return beanProperties;\n    }\n}\n\n", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           f.readlines()\n        except IOError:\n            # No blank lines found\n            f.close()\n            raise\n        except Exception:\n            # No blank lines found\n            raise\n            f.close()\n            raise\n    if f:\n        f.close()\n", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.LPStruct)] pvValue\n            );\n    }\n    #endregion\n}\npublic class MFExtern : IMF", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var sp = Principals.getCurrentSecurablePrincipal();\n        var user = checkNotNull( sp );\n        var aclKey = spm.lookup( user );\n        if ( !directedAclKeys.getPrincipalType().equals( PrincipalType.USER )", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       if element.find('.'):\n            return False\n        else:\n            return True\n    def verify_element(self, element):\n        \"\"\"Verify the element matches what is expected.\n        This verifies the tag, attributes, text, and extra text of an element.\n       ", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return clone\n    # end of _clone_node\n    # end of _get_string_io\n    # end of _get_writer\n    # end of _set_writer\n    # end of _get_string_io\n    # end of _set_writer\n    #", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t\t\treturn EMSSceneSectionOperations.validateEMSSceneSectionLocationTypeObservation(\n\t\t\t\t\t(EMSSceneSection) objectTo", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset))\n\t\t\t\tdecodeKeyLocator\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator, decoder);\n\t", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.updateCooldown();\n        }\n    }\n    @Override\n    public void update(GameContainer container", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       GameEngine.model().getGame().getRegistrationByColor( colorValue ).joinGame( action );\n      }\n    } ) );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    // show dialog\n    show();\n", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       raise RuntimeError(\"No filename= found in content-disposition header\")\n    filename = get_filename(r.headers)\n    with open(filename, \"wb\") as f:\n        for chunk in r.iter_content(1024):\n            f.write(", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = null;\n\t\t\t}\n\t\t\tcatch (Exception e)", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   from cobra.flux_analysis.production_envelope import _reaction_weight\n\n    from cobra.flux_analysis.production_envelope import _reaction_weight\n\n    from cobra.flux_analysis.production_envelope import _re", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return Unit.objects.filter(path__startswith=pootle_path)\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           migrations.CreateModel(\n                name='SubDistrict',\n                fields=[\n                    ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                    ('name', models.CharField(max", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   self.trafgen_ip = str(ipa)\n    self.trafgen_mac = remotemac\n    self.trafgen_ip = str(ipa)\n    self.trafgen_mac = remotemac\n    self.trafgen", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    if (m_IgnoreChanges)\n      return;\n    writeProps();\n  }\n  \n  public synchronized void removeRecentItem(T item) {\n    m_RecentItems.remove(item);\n  }", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Follower == target))\n                return true;\n            return false;\n        }\n        public static void CheckPassiveDetect(Mobile src)\n        {\n            DoPassiveDetect(src);\n        }", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return new Date(takeOfferDate.getTime() + getOffer().getPaymentMethod().getMaxTradePeriod() / 2);\n    }\n    public Date getTakeOfferDate() {\n        return takeOfferDate;\n    }\n    public void setTake", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a;\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic static BitArray GetFirstSets() {\n\t\tCompFirstSets();\n\t\treturn allSyncSets;\n\t}\n}\n//----------------", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\t\tWriteReport(buff);\n\t\t\t\tmReadDone.WaitOne();\n\t\t\t\treturn mReadBuff;\n\t\t}\n\t\tprivate byte[] ReadData(int address, short size)\n\t\t{\n\t\t\tbyte[] buff = Create", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\t\tthis.direction = (order == SortOrder.DESCENDING);\n\t\t\t\tthis.caseInsensitive = caseInsensitive;\n\t\t}\n\t\tpublic int compare(Object o1, Object o2)\n\t\t{\n\t\t\tM", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           for (k++; i < N1 + N2; i++, k++)\n            {\n                _indx2Units[i] = k & 0xff;\n            }\n        }\n    }\n}\n};\npublic class SharpCompressorPPMdH", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create(description, currency=currency, fields=fields)\n    ```\n    The above code creates a new `ComputeRate` instance with the given `description`, `currency`, and `fields`.\n\nThe `ComputeRate` class has the following methods:\n\n* `create", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tIntPtr destData = (IntPtr)src;\n\t\t\t\tOpenGLES.glBindBuffer( All.ElementArrayBuffer, _bufferId );\n\t\t\t\tOpenGLES.gl", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.list = []\n\t\tself.createConfig()\n\t\tself.list.append(getConfigListEntry(_(\"Tuning\"), self.tuning_type))\n\t\tself.list.append(getConfigListEntry(_(\"Satellite\"), self.sat_", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                TcpAddress.TcpAddressMask mask = (TcpAddress.TcpAddressMask) optval;\n                tcpAcceptFilters.add(mask);\n            }\n        }\n    }\n}\n\\end{code}\n\nI'm trying to understand", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               prior = curr;\n                curr = new byte[bytesPerRow];\n            }\n            // Save the decoded image to the output stream\n            fout.Write(curr, 0, fout.Length);\n            return fout.ToArray();\n        }\n    }\n", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface(':1.23'))\n        s.set_", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   def massey_product_printout(self, filename):\n        output = \"\"\n        e2 = self.get_E_2_page()\n        for level in xrange(len(e2.get_cohomology(self.options))):\n            for position in e", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:18: Expected end of message.\",\n                \"\");\n        }\n    }\n}\n}\n#region Google.ProtocolBuffers.Test\n#region Copyright\n#region License\n#endregion\n#region TestUtil\n#", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t}\n\t@Override\n\tpublic void putAll(Map<? extends Serializable, ? extends Serializable> t) {\n\t\tthrow new Un", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return action_message\n    def attendance_action_kiosk_mode(self):\n        return self.env['hr_attendance.attendance_action_kiosk_mode']\n    def attendance_action_kiosk_mode_next_action(self):", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = form.grdResults().getRows().get(orderInvestigationLiteVo.getColTestName().equals(orderInvestigationLiteVo.getColTestName()));\n\t\tif (parentRow == null)\n\t\t{", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.Dispose();\n                return new Point(c.X, c.Y);\n            }\n        }\n        internal SystemWindow sw;\n    }\n    internal class SystemListViewColumn\n    {\n        internal SystemListViewColumn(int fmt, int cx, int iSubItem)", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "   def on_window_state_changed(self, window, event, new_state):\n        \"\"\"Called when the window's state changes\"\"\"\n        if new_state == Gdk.WindowState.WITHDRAW:\n            self.set_urgent(True)", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( managedType, marshalAttribute, arraySize ) );\n                    }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshalAttribute( string part ) {\n            switch ( part ) {\n               ", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (IsAbstract || IsInterface)\n\t\t\t\t\treturn true;\n\t\t\t\treturn base.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override void Accept (ModuleElementVisitor visitor)\n\t\t{\n\t\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\npublic class ROM\n{\n    #region instance variables\n    private Dictionary<string, IEvidence> evidenceCollection = new Dictionary<string, IEvidence>();\n    private Dictionary<string, Xml", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.ssl_ = OpenSSL.SSL.SSLContext(protocol=protocol)\n        self.ssl_ = OpenSSL.SSL.SSLContext(self)\n        self.ssl_ = None\n        self.HAS_SNI = False\n        self.HAS_TLS =", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::Gtk.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.checkbuttonWhiteSpaces.Active = true;\n\t\t\tthis.v", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   gtk.main()\n    return widgets\n\ndef load_icon (pixbuf, name):\n    return load_icon_fallback (pixbuf, name)\n\ndef load_icon_fallback (pixbuf, name):\n    return load_icon_fall", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Close-Tab\": QKeySequence(Qt.CTRL + Qt.Key_W),\n    \"Close-Project\": QKeySequence(", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn \"PersistenceUnitInfo[\" + getPersistenceUnitName() + \"]\";\n\t}\n}\n", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return super.isFileReadOnly();\n}\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(88, 44);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(82,", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return \"\";\n        }\n    }\n}\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"RFC4231-TC1\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC2 ()\n\t\t{\n\t\t\tbyte[] key = { 0x", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += CDRSerializer.alignment(current_sum, 4); // Enum type\n\t    \n\t    // switch(this.m_d) {\n\t    // case option_1:\n\t    // case option_2:\n\t    // case option_3", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      }\n    }\n  }\n}\n}\n\\end{code}\n\nPlease let me know if you have any questions or need further assistance.", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l\n            elif re.match(r'#Ansible: (.*)$', l):\n                return [l, comment]\n        # attempt to find job by 'Ansible:' header comment\n        if comment is not None:\n            return [comment, self.ansible]", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "mesh = bpy.data.meshes.new('MeshModifier')\nmesh.from_modifier(modifier)\nmesh.update()\n\ndef get_mesh_modifiers(mesh):\n    # ...\n\ndef get_mesh_modifiers(mes", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n    }\n    private static void buildAllelePeptideLikelihoods(\n            final Map<String,Map<Integer,List<Double>>> allelePeptideData,\n            final Map<Integer,List<Double>> pepLenBindData)\n    {\n", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (int i = 0; i < 3; i++) {\n            neighbors.add(i);\n        }\n        assertEquals(3, neighbors.size());\n    }\n    @Test\n    @DisplayName(\"neighbors() should return iterator with all", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, custom_arg=None):\n        \"\"\"\n        This is where the magic happens\n        \"\"\"\n        pass\n\nI have a feeling that you are trying to create a packet sniffer, but the code is not complete and has some syntax errors. Can you please provide more context", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 168);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'id': ('django.db.models.fields.AutoField',", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               }\n            return false;\n            }\n        }\n        return false;\n    }\n    private void setReturnAllTypes() {\n        returnAllTypes = true;\n    }\n    private void setGeneratedTypes() {\n        generatedTypes = new HashMap();\n    }\n   ", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_validate_notificate(cr, uid, ids, context=context)\n        return True\n    def holidays_validate_notificate(self, cr, uid, ids, context=None):\n        return True\n    def holidays_appro", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n        #endregion\n", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line: {0}\", mixerLine.szName);\n        }\n    }\n}\n}\n\nPlease provide the complete code so that I can assist you further.", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\tvalue10 = domainObject.getCareContext();\n\t\tvalue10.setDomainObject(domainObject);\n\t\tdomainObject.setCareContext(value10);\n\t\t\n\t\t}\n\t\t// Create the cache for the domain objects.\n\t", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", \"--target\", \"wasm-pack\", \"--features\", \"wasm-pack\", \"--no-default-features\"])\n            .with_cargo_home(self.cargo_home)\n            .with_cargo_features(self", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble estP = estP + estN;\n\t\t\tdouble estN = estP + estN;\n\t\t\treturn Math.max(this.getScore(new double[] { p, 0 }), this", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               var stashedItems = gitItemStatuses.Where(item => item.Staged == StagedStatus.Stashed).ToList();\n                Stashed.Items.Clear();\n                Stashed.Items.AddRange(gitItemStatuses);\n                Stashed.SelectedItem = null;\n", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   # ...\n```\nThis code is a simple example of how to use the `st_cbuffer` module to create and use a `st_ARCH_BEAM_ELEMENTS_BUFFER_ID` buffer object to store beam elements, and how to use the `st_AR", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (o == this) {\n            return true;\n        }\n        return super.equals(o);\n    }\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime *", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, new AsyncCallback(this.OnAddIntCompleted), new object[] {\n                        a,\n                        b});\n        }\n        private void OnAddIntCompleted(object[] results, System.IAsyncResult asyncResult) {\n            this.EndAddInt(results);", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic String getCSeriennrChargennr() {\n\t\treturn cSeriennrChargennr;\n\t}\n\tpublic void setCSeriennrCh", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"EType\" : \n\t\t\t\t\tEType = (EClassifier", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "eai = EncryptedArchiveIndex(path)\n# ...\n\\end{code}\n\nI have a problem with the code, I am not sure how to fix it. The code is not able to find the `EncryptedArchiveIndex` class, it is underlined in red.\n", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   def decode(self, ss, es, data):\n        ptype, mosi, miso = data\n        # ...\n        # Store the individual bit values and ss/es numbers. The next packet\n        # is guaranteed to be a 'DATA' packet belonging to this 'BITS'", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n    }\n", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = new ObjectPanel(channel, cls, dins);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    void showPopupMenu(MouseEvent e)\n    {\n        int row = channelTable.getRow", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "- name: Get information on generated certificate\n  openssl_certificate:\n    path: /path/to/certificate.pem\n    privatekey_path: /path/to/privatekey.pem\n    provider: selfsigned\n    register: result\n    module: Ansible", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (%sSlots::iterator i = s.begin(); i != s.end(); ++i) {\n\t\t\t\t    if (i->first == this) {\n\t\t\t\t        still_there = true;\n\t\t\t\t        break;\n", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   # Split the interval into a range below and above 0xFFFF. This corresponds\n    # to the interval where all values have the same byte sequence length.\n    # The resulting intervals are contigous and can be represented by a\n    # single byte sequence.\n    # Split the interval into", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t\tExpect(20);\n\t\t}\n\t}\n\tvoid SemText(out Symbol sym) {\n\t\tif (la.kind == 1) {\n\t\t\tGet();\n\t\t\tsym = new Symbol(Node.nt, \"text\", ", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_uom_qty'] = line.product_uom_qty\n            del edi_doc['product_uom_qty']\n            edi_doc['product_id'] = line.product_id\n            del edi_doc", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS);\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\", \"openH", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               permissions = new ArrayList<>();\n            }\n            permissions.add(permissionEntry);\n        }\n        return nameMap;\n    }\n    private void assertNotNull(Object obj)\n    {\n        assertTrue(obj != null);\n    }\n    private void assertFalse(Boolean", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True,\n            sys_name='mouse0')\n            context.list_devices()\n        )\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.sys_name ==", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   device = Device(deviceToken)\n    user = User(device.app, loginId=loginId, password=password)\n    roundtable = RoundTable(device.app)\n    menu = Menu(device.app)\n    # ...\n\\end{code}\n\nI'", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "```\nimport os\nimport shutil\nimport json\nimport re\n\ndef filter_uvfmeas(output):\n    # We send back a dictionary.\n    rd = { 'index': { 'time': [], 'source': [], 'calcode': [], 'antcode': [], '", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (Parent is Mobile)\n            {\n                Parent.DropItem(this);\n            }\n        }\n    }\n}\nPlease complete the code.", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices) {\n            // Check if device is already in the list of live devices\n            if (devices.contains(device)) {\n                Tuner tuner = new Tuner(device, true, ipAddressMap.get(device), liveModelMap.get(", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    }\n    return jobs;\n  }\n  private static boolean isLegacyUpdate(@NonNull", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     Entry entry = new Entry(split[0], split[1], ignoreCase, split[2]);\n      entries.add(entry);\n      // sortEntries(entries, entries);\n      entries.add(entry);\n    }\n    return entries;\n  }\n  private static", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       if SCons.Util.is_List(sub_path):\n            # if we find it in the search path, use it\n            # otherwise, try the next file\n            if os.path.exists(sub_path):\n                return n\n        else:\n            # if we", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   from mapnik import *\n    from mapnik.input import *\n    from mapnik.filter import *\n    from mapnik.expression import *\n    from mapnik.font import *\n    from mapnik.path import *\n    from mapnik.printing import *\n    from", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   if self.want.destination is not None:\n        self.want.destination = self.want.destination\n    if self.want.port is not None:\n        self.want.port = self.want.port\n    if self.want.ip", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   def fill(self, values):\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...\n        # ...", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           throw new Exception(\"Class not found: \" + className);\n        }\n        return result;\n    }\n    public void addEventListener(IEventSubscriber subscriber) {\n        // do nothing\n    }\n    public void removeEventListener(IEventSubscriber subscriber) {", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\"},\n            mock_request\n        )\n    def test_update_thread_empty_body(self, mock_request):\n        self.update", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           env.subst('$', '$$', 1)\n            env.subst('$', '$$', 1)\n            env.subst('$', '$$', 1)\n            env.subst('$', '$$', 1)\n            env.subst('$', '", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(shell, new SubProgressMonitor(new ProgressMonitorDialog(shell, ProgressMonitorDialog.NONE, 1000, 1000, 1000, 1000, 1000, 1000, ", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\t\n\t\t// Check if the step can be executed\n\t\tif (super.init(smi, sdi))\n\t\t{\n\t\t\t// If the step can be executed, continue\n\t\t\t// with the execution of the step\n\t\t\t// If the step", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('12:30..+5', last) == (d(2014,1,31, 12,30), d(2014,1,31, 12,35))\n    assert f('12:3", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           }\n            //Add spawn\n            for (int i = 0; i < sfakecountA.Length; i++)\n            {\n                string spawn = types[i];\n                int x = Utility.ToInt32(fakespawnsA[i]);\n               ", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._check_guest_suspend_log(**suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestFail(\"Guest log does not contain expected \"\n                                     \"suspend log message.\")\n    def", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n    }\n}\n}\n\nPlease help me complete the code by adding the missing method receive(ZMQ.Socket socket, int maxSeconds)\n{\n    return null;\n}\n\nI have tried to add the method as follows:\n\npublic int receive", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.put_line(descr)\n        self.fm.env.put_line(\"\")\n        self.fm.env.put_line(\"\")\n        self.fm.env.put_line(\"\")\n        self.fm.env.put_line", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_StringString ()\n\t\t{\n\t\t\tObjectHandle objHandle = Activator.CreateInstance (null, \"MonoTests.System.ActivatorTestInternal.NonCOMTest\");\n\t\t\tAssert.IsInstanceOf (typeof (NonCOMTest), obj", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       self.assertEqual(\n            _actions4appversion(self.old_av, {da.id}, None, None, 100),\n            ({}, {da.id}))\n        self.assertTupleEqual(\n            _actions4appversion(self.new_", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            self.commands.answer(cmd)", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new PlayerGroupUpdateEvent(group, player));\n        }\n    }\n}\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       return highlight(\n            [\n                (Token.Literal, \" \".join([\"%s\" % s for s in toks])),\n                (Token.Column, colsz),\n            ],\n            formatter,\n            outfile,\n            align=align, fill=fill", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        column.quantity_renderer.set_property(\"text\", \"22\")\n        self.assertEqual(column.quantity_renderer.get_property(\"text\"), \"22\")", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn super.doStartTag();\n    }\n}\n}\npublic class GridColumnBean {\n    private String values;\n    private String mask;\n    private String headerfont;\n    private String headeritalic;\n    private String font;", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    string text = n.InnerText;\n                    if (text", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                   m_key[i] = new ExodusActivation();\n                    else\n\t\t\t\t\t\tm_key[i] = new ParoxysmusActivation();\n\t\t\t\t}\n\t\t\t\tm_Region.Register();\n\t\t\t}", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int i = 0; i < beans.length; i++)\n\t\t{\n\t\t\tcoll.add(((ims.careuk.vo.beans.ChangeOfServiceVoBean)beans[i]).buildVo());\n\t\t}\n\t\treturn", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n        Version v1 = new Version(1, new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1});\n        Version v2 = new Version(2, new int[]{1, 1", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (int) (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfloat discount = 0F;\n\t\tfor(int i =", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n\nPlease complete the code given above and let me know if you have any questions or need further clarification.", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\" expected {1}\",\n\t\t\t\t\t\tNextFrame.PixelCount, LightCount));\n\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t}\n\t\tpublic void Clear ()\n\t\t{\n\t\t\tOutputQueue.Clear ();", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            return false;\n        } else if ((other.userErrorMessage != null))\n            return false;\n        if ((!this.actionTraceList.equals(other.actionTraceList)))\n            return false;\n        if ((", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            dc.type = p.readInt();\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    responseCallList(Parcel p, int index) {", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.getLicenceId().equals(\"CC-BY-SA\")) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                // Calculate mesh vertices\n                Vector3 v1 = newVertices[y * xSizeP + x];\n                Vector3 v2 = newVertices[y * xSizeP + x", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\tresult = client.call(\"add\", new Integer(testInt1));\n\t\t\t\n\t\t\tif (result != null)\n\t\t\t{\n\t\t\t\tLog.i(TAG, \"Connection test passed. Returned result was: \" + result);\n\t", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t};\n\t}\n", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(name);\n        }\n        else\n            out.writeBoolean(true);\n        out.writeObject(found.object);\n        out.writeObject(found.methods);\n        out.flush();\n        out.", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n            drawgfx(bitmap, Machine.gfx[5],\n                    16 + (~stactics_display_buffer.read(i) & 0x0f),\n                    0, 0,\n                    pixel_x, pixel_y,\n                ", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(spell.From.To2D()) <= spell.Range)\n                                    {\n                                        result.Add(target);\n                                    }\n                                }\n                                break;\n                        case CollisionableObjects.Heroes:\n                ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(x);\n        return graph.containsPath(path, y);\n    }\n    //===============================PUBLIC METHODS============================//\n    public void setCompleteRuleSetUsed(boolean complete", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop.GetChild(Name);\n                    if (child != null)\n                        return child;\n                    var child = pop.GetChild(Name);\n                    if (child != null)\n                        return child;\n                }\n            }\n            return", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (other.getClass().equals(getClass())) {\n            return false;\n        }\n        return super.equals(other);\n    }\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] == from)\n                        {\n                            // AddDelay(mobiles[i]);\n                            AddDelay(mobiles[i]);\n                        }\n                    }\n                    mobiles.ForEach(m => { AddDelay", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\tHistory.Add(msg);\n\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, string text)\n\t\t{\n\t\t\tif (Users.Keys.Any(u => CanSee(u, text", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n  }\n}", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                       files[++index] = (String) mListView.getItemAtPosition(key);\n                    }\n                    }\n                    ZipFilesDialog.instantiate(mActivity, files);\n                    return true;\n            }\n        }\n    }\n}\n", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n        ChannelFuture channelFuture = channel.writeAndFlush(packet);\n        }\n    }\n    }\n}", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n\n    def get_parameters(self):\n        return z_arr, t_arr, z_err_arr, t_err_arr\n\n    def get_parameters_dict(self):\n        return {key: value for key, value in z_arr.items()}\n\n", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne, name);\n    } else {\n      return context.getString(resourceTwo, recipients.size());\n    }\n  }\n}\n}\n\nThis code is from a library, and I'm trying to understand how it works. Specifically, I", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if gonk:\n            env[\"GOONK_BUILD_ID\"] = gonk\n        if hosts_file_path:\n            env[\"HOSTS_FILE_PATH\"] = hosts_file_path\n       ", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in iteritems(type_paths):\n                yield path, test_cls(tests_root, path, tests)\n        for path, tests in iteritems(type_paths):\n            yield path, test_cls(tests, path)\n        yield path, test_", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compileTimeStrategy.canUseOldCompiledScript()) {\n            final File oldScriptFile = new File(compileTimeStrategy.getScriptFile());\n            if (oldScriptFile.exists()) {\n                oldScriptFile.delete();\n            }\n        }\n    }\n   ", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           }\n        }\n    }\n}\n```\nPlease help me complete this code.", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad_Etf.flatten()\n        transformed_grad.append(grad_Etf)\n      return transformed_grad\n\n  def untransform_w(self,", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tint compare = this.getClass().getName().compareTo(obj.getClass().getName());\n\t\t\n\t\tif (caseInsensitive)\n\t\t{\n\t\t\tcompare = this.getClass().getName().compareTo(obj.getClass().getName());\n\t", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 3);\n    }\n    @Test(dependsOnMethods = \"shouldFindStacksWithSpecifiedTags\")\n    public void shouldFindStacksWithSpecifiedScope() throws Exception {\n        final List<StackImpl> found = new HashSet<>();", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       crawlParameters.add(new Parameter(CrawlerService.DEPTH_PARAM, depth));\n        //EXCLUSION REGEX\n        crawlParameters.add(new Parameter(CrawlerService.EXCLUSION_REGEX_PARAM, exclusion", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// MatchesPattern()\n\t\t\tif (MatchesPattern(pattern, ref captures, out unmatchedAttrs))\n\t\t\t\treturn true;\n\t\t\t// [$capture] (...)\n\t\t\treturn false;\n\t\t}\n\t", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   if (colisionList.Any())\n                    {\n                        extendedWillHit += MinionManager.GetMinions(objAiBase.Position, q.Range).Count();\n                        extendedFarmLocation = objAiBase.Position;\n                    }\n               ", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setFormOpened(form);\n\t\tform.setFormOpened(form);\n\t\tform.setTitle(ims.configuration.GenForm.getTitle());\n\t\tform.setWidth(designSize.getWidth());\n\t\tform.setHeight(design", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   for line in frozen_output.splitlines():\n        yield line\n        match = re.search(pattern, line)\n        if match:\n            yield line\n            break\ndef create_prereqs_cache_dir():\n    try:\n        os.makedirs", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': [('name', 'value', 'v')]\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.subs.add(r)\n        f.subs.add(r)\n", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   from sympy.core.utilities import latex\n    from sympy.core.utilities import latex_print\n    from sympy.core.utilities import latex_print\n    from sympy.core.utilities import latex_print\n    from sympy.core", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tSystem.String a1;\n\t\t\tcheckType(l,1,out a1);\n\t\t\tvar ret=UnityEngine.WWW.UnEscapeURL(a1);\n\t\t\tpushValue(l,true);\n\t\t\treturn ", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this._newItemList = (newItems == null) ? null : ArrayList.ReadOnly(newItems);\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\n                this._newItemList = (changedItems == null) ? null : ArrayList.", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           StringReader reader = new StringReader(writer.toString());\n            Document testDocument = parser.parse(reader);\n            writer.close();\n            reader.close();\n            objectToXMLDocumentTest(testDocument);\n        }\n    }\n    public void testObjectToXMLStreamWriter", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n            }\n            NextToken(TokenType.And, TokenType.Or, TokenType.RParen);\n        }\n        private string ParamEnum(string s)\n        {\n            return s.", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "#endif\n\t\t\t\t\tif (sizeObtained) {\n\t\t\t\t\t\tsizeObtained = false;\n\t\t\t\t\t\twidth = ide.width;\n\t\t\t\t\t\theight = ide.height;\n\t\t\t\t\t\ticon", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the labeled instruction to the successor of the current\n                // block\n                l = new Label(id, l.position, l.status);\n                l.info = l.info = new Object();\n                l.info.info = l;\n                l.next = stack", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            __ret = ILIntepreter.PushObject(__domain, __ret, __mStack, __method, isNewObj);\n            return __ret;\n        }\n       ", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       self._getLastValue( driver, \"Image\" )\n        firstImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue\n        self.assertEqual( int(firstImageValue),", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   return self.kexgss_ctxt.accept_sec_context(self.gss_host,\n                                                  self.kexgss.ssh_init_sec_context(\n                                                      target=self.gss_host))\n    except SSHException", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           tree.setUserObject(connectionData);\n            treeModel.reload(tree);\n        }\n        // Update the tree model\n        // Update the tree model\n        // Update the tree model\n        // Update the tree model\n        // Update the tree model\n        // Update the tree model", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.cr, uid, context))\n                res = self.cr.fetchone()[0]\n                return res or 0.0\n        class SalaryRuleCategory(BrowsableObject):\n\"\"\"            def _sum_salary_rule_category(self", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   #cl1h, cl2h, cl = integrate_halo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, dlnm, omega_b", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 2;\n        d.height = font.getSize() * 2;\n        return d;\n    }\n}\n\n// $Log$\n// $Revision$\n// $Date$\n// $Author$\n// $", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "f1=lambda x1,y1,z1:np.dot(x1,y1,z1)\nf2=lambda p1,p2:np.dot(p1,p2)\nf3=lambda p1,p2:np.sqrt(np.", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.Show();\n\t\t}\n\t}\n}\n\nI'm trying to create a window with the following code:\n\nnamespace SampleRithmic\n{\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Windows;\n\tusing", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "           if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n            else:\n                raise ValueError(\"Bin edges must be sorted in ascending order", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getXmpp().getStorage().removeContact(contact);\n        }\n    }\n}\n\nI hope this helps! Let me know if you have any questions.", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\tret.add(Arrays.copyOfRange(rsp.getBytes(), 0, 23));\n\t\t}\n\t\treturn ret;\n\t}\n\tprotected void configApplication(Application app) {\n\t\tapp.setProperty(SPEC.PRO", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(UInt16(self, \"block_crc\", \"Block CRC (from byte 4 on)\"))\n    yield textHandler(UInt16(self, \"block_size\", \"Block size (from byte 4 on)\"))\n    yield UInt", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n}", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   server = wsgi.Server(('0.0.0.0', 8070), my_crazy_app)\n\n\n\n", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\t#print \"Loading model\"\n\t\t#print \"Loading data\"\n\t\t#print \"Loading data\"\n\t\t#print \"Loading model\"\n\t\t#print \"Loading data\"\n\t\t#print \"Loading model\"\n\t\t#print \"Loading model\"\n\t", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success; // success!\n            }\n            else\n            {\n                res = EnhanceResult.Failure; // failure!\n            }\n        }\n    }", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           entries[entry_name] = rdltypes.UserEnum(entry_name, entry_value, displayname, desc)\n        return entries[entry_name]\n    #---------------------------------------------------------------------------\n    def parse_integer(self, s: str) -> int:\n       ", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"Fatal Error:\\nUnable to locate any FOG modules!\");\n                }\n            }\n        }\n    }\n}\npublic class SubClassMenuItem : AbstractFOGService\n{\n    private String mGetDescription()\n    {\n        return \"fog", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private void AfterStoreAdd(object sender, StoreAddEventArgs e)\n        {\n            this.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int tri = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    beginTriangle(textureHash);\n                    vertex(x2, y2, 0, u2, v2, r2, g2,", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n    return response\ndef expose_header(response):\n    \"\"\"\n    Add a header name to Access-Control-Expose-Headers to allow client code to access that header's value\n    \"\"\"", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    oldDrivers.Add(d);\n                }\n            }\n            return oldDrivers;\n        }\n        internal void Close()\n        {\n            // nothing to do\n        }\n    }\n}\n", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var]\n    return var\ndef _round_shape(shape):\n    \"\"\"Round shape to nearest integer.\"\"\"\n    shape = round(shape, 0)\n    return shape\ndef _convert_units(value, units):\n    \"\"\"Convert value from one", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "qn = QUEST_NUMBER\n\nI hope this helps! Let me know if you have any questions or need further assistance.", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tempty = string.Format(\"{0:D2}:{1:D2}:{2:D2}:{3:D2}\", num, num1, num1, num1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           _sCurProgram = new ShaderProgram();\n            VertexDataStride = 0;\n            VertexDataSize = 0;\n            Attributes = new AttributeCollection();\n            _textures = new Dictionary<String, Texture>();\n            _uniforms = new Dictionary<", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   self.name = \"MyModel\"\n    self.description = \"MyModel\"\n    self.solve()\n    self.optimize()\n    self.remove_reactions([self.reactions[0]])\n    self.solution = self.solution\n    self.", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor (int i = 0; i < beans.size(); i++) {\n\t\t\tTumourGroupListVo vo = (TumourGroupListVo)beans.get(i);\n\t\t\tcoll.add(vo);\n\t\t}\n\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcurrent.x=lines[selectedLine].x;\n\t\t\t\tcurrent.y=lines[selectedLine].y;\n\t\t\t\tcurrent.width=lines[selectedLine].width;\n\t\t\t\tcurrent.height=lines[selectedLine].height;\n", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       getListView().setAnimation(set);\n    }\n\t\n\tprivate void fillData() {\n\t\tmCursor = mDbAdapter.getCursor();\n\t\t\n\t\tmCursor.moveToFirst();\n\t\t\n\t\tif (mCursor.getCount() > ", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (HighestNumber < PartnerInterestRow.FieldKey)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.SetFieldKey", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\t\n\t\tthis.classifier = new RandomForest();\n\t\t\n\t\tthis.trainClassifier(scoresSol, scoresSol[0]);\n\t\t\n\t\tfor (int i = 0; i < length; ++i)\n\t\t{\n\t\t", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
