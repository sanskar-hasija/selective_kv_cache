{"pred": "\t\t\t\tGump g = (Gump)m_Participants[i].Mobile.Backpack;\n\t\t\t\tif ( g is DuelContextGump )\n\t\t\t\t{\n\t\t\t\t\tDuelContextGump dcg = (Duel", "answers": ["\t\t\t\tParticipant p = (Participant)m_Participants[i];"], "all_classes": null, "length": 5243}
{"pred": "\t\t\t\tZ_.add_edge(e_v, e_u, **data.copy())\n\t\t\t\t\n\t\t\tsolutions.append(A)\n\t\t\tA = self.contracting_phase(A, n, supernodes, exposed_nodes,", "answers": ["\t\t\tZ_.add_edge(e_u, e_v, **data.copy())"], "all_classes": null, "length": 1069}
{"pred": "       a = Sndfile(ofilename, 'r+b')\n        # Test seek with write access\n        a.seek(1000)\n        # Write some data\n        a.write_frames(b'hello')\n        # Check the data\n        assert a", "answers": ["        rfd, fd, cfilename   = open_tmp_file('rwseektest.wav')"], "all_classes": null, "length": 844}
{"pred": "   unisubs_page = VideoPage(\"https://www.unisubs.com/videos/123456789/info\")\n    unisubs_page.open_video_page(\"123456789\")\n    print(un", "answers": ["            if e.text == language:"], "all_classes": null, "length": 462}
{"pred": "\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;\n\t\t\t\t\twriter.addAttribute(\"name\", styleValue.getName());\n\t\t\t\t\twriter.addAttribute(\"value\", styleValue.getValue());\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\tOLStyleValue styleValue = (OLStyleValue) value;"], "all_classes": null, "length": 570}
{"pred": "       for a in self.answers:\n            ret += \"Option %s: %s\\n\" % (a.id, a.text)\n        return ret\n    def is_correct(self, answer):\n        return answer in self.answers\nclass _AnswerData(_Q", "answers": ["        longest = max(self.answers)"], "all_classes": null, "length": 1229}
{"pred": "                   mob.Prompt = new SR_NewRunePrompt(RuneAcc, mob.Location, mob.Map);\n                    Send(mob, SR_Utilities.FetchInfo(mob.Account));\n                    break;\n                case 3:\n                    mob", "answers": ["                    mob.Target = new SR_NewRuneTarget(RuneAcc);"], "all_classes": null, "length": 907}
{"pred": "           for (X509Certificate cert : chain) {\n                s.println(\"  \" + cert);\n            }\n        }\n    }\n}\n/*\n * CertificateVerify ... CLIENT --> SERVER\n *\n * The client sends the server its certificate chain, and", "answers": ["            for (int i = 0; i < chain.length; i++)"], "all_classes": null, "length": 1820}
{"pred": "           sp = new JESpace (name, path);\n            spaceRegistrar.put (name, sp);\n        }\n        return sp;\n    }\n    public synchronized static void removeSpace (String name)\n    {\n        spaceRegistrar.remove (name);\n", "answers": ["            sp = new JESpace(name, path);"], "all_classes": null, "length": 1096}
{"pred": "\t\t\t\t\tpos = btnEnergizeAll.bottom();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t@Override\n\t\tpublic void onBack() {\n\t\t\tsuper.onBack();\n\t\t\tif (item != null)", "answers": ["\t\t\t\t\tpos = btnEnergizeAll.bottom();"], "all_classes": null, "length": 567}
{"pred": "       request = SimpleXMLElement(environ['REQUEST_BODY'], namespace=self.dispatcher.namespace)\n        # default values:\n        prefix = self.dispatcher.prefix\n        ret = fault = None\n        soap_ns, soap_uri = self.dispatcher.", "answers": ["        length = int(environ['CONTENT_LENGTH'])"], "all_classes": null, "length": 1670}
{"pred": "       mark = \"setRepeated('%s');\" % status_id\n        self.webview.execute_javascript(mark)\n    def unmark_status_as_repeated(self, status_id):\n        mark = \"unsetRepeated('%s');", "answers": ["        mark = \"setRepeated('%s');\" % status_id"], "all_classes": null, "length": 686}
{"pred": "   def action_move_files(self, login, password, status_id, params, session):\n        try:\n            self.logger.info(\"FM starting subprocess worker move_files %s %s\", pprint.pformat(status_id),\n                             pprint.p", "answers": ["            return {\"error\": False}"], "all_classes": null, "length": 958}
{"pred": "\t\t\tZoneIdentityPermission z = (ZoneIdentityPermission) a.Union (b);\n\t\t\tAssert.IsFalse (Same (a, z), \"Trusted+Untrusted\");\n\t\t\tAssert.IsFalse (Object.ReferenceEquals (a, z), \"!Reference", "answers": ["\t\t\tIPermission result = a.Union (b);"], "all_classes": null, "length": 778}
{"pred": "   context = _get_ssl_context(keyfile, certfile, ca_certs)\n    context.getSocketFactory().setServerTrustManager(CompositeX509TrustManager(trust_managers))\n    context.getSocketFactory().setClientTrust", "answers": ["        certs = []"], "all_classes": null, "length": 713}
{"pred": "       DomainInfo domainInfo = manager.getDomainInfo(domain);\n        request.setAttribute(\"domainInfo\", domainInfo);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        User user = getUser(request);"], "all_classes": null, "length": 847}
{"pred": "```\n    async def __play_audio(self) -> None:\n        self.__player = player.Player(\n            self.__project,\n            self.__callback_address,\n            self.__render_settings,\n            self.__tmp_dir,\n            self.__server,\n            self", "answers": ["            self.__tmp_dir, 'datastream.%s.pipe' % uuid.uuid4().hex)"], "all_classes": null, "length": 1276}
{"pred": "\t\t\t\tif (option1) {\n\t\t\t\t\tjumpID = (int) store.GetValue (iter, columnBool2);\n\t\t\t\t\t//update database\n\t\t\t\t\tUtil.UpdateDatabase(jumpID, newPersonWeight, oldPerson", "answers": ["\t\t\t\tif(! option1) {"], "all_classes": null, "length": 957}
{"pred": "       String[] argValues = new String[args.length];\n        for (int i = 0; i < args.length; i++) {\n            if (args[i] == null) {\n                argValues[i] = \"\";\n            } else {\n                argValues[i", "answers": ["        if ((args == null) || (args.length == 0)) {"], "all_classes": null, "length": 1570}
{"pred": "\t\t\t\tfirms = loadFromFile();\n\t\t\t}\n\t\t}), TIMED(new ConfigFile<UUID, TimedData>()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic TimedData create(UUID id, ConfigurationSection conf)\n", "answers": ["\t\t\t\tfirms = loadFromFile();"], "all_classes": null, "length": 515}
{"pred": "\t\tgeneralNode.setPage(new FieldEditorPreferencePage() {\n\t\t\t@Override\n\t\t\tprotected void createFieldEditors() {\n\t\t\t\taddField(new BooleanFieldEditor(AUTO_SAVE,\n\t\t\t\t\t\t\"Auto save", "answers": ["\t\tPreferencePage generalPage = new FieldEditorPreferencePage() {"], "all_classes": null, "length": 925}
{"pred": "\n                m_Owner.Caster.SendAsciiMessage(\"Target selected\");\n            }\n        }\n    }\n}\n\nI am having trouble with the code for the \"InternalSphereTarget\" class. I am getting an error message that says \"The best overloaded method match for '", "answers": ["                if (m_Owner.SpellTarget == null)"], "all_classes": null, "length": 538}
{"pred": "       self.identity_map = self._identity_cls()\n        self._new = {}\n        self._deleted = {}\n    def _begin_nested(self, *entities):\n        self.begin()\n        self.begin_nested()\n        return self\n    def _", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "\t\tfor(IField field : fields) { \n\t\t\tfinal String name = field.getField().getName().toString();\n\t\t\tList<IField> named = name2Field.get(name);\n\t\t\tif (named==null) { \n\t\t\t", "answers": ["\t\tfor(IField field : fields) { "], "all_classes": null, "length": 1985}
{"pred": "   like `removeslash(method)` in conjunction with using the decorator.\n    \"\"\"\n    @functools.wraps(method)\n    def wrapper(self, *args, **kwargs):\n        if not self.request.path.endswith(\"/\"):", "answers": ["    like ``r'/foo/?'`` in conjunction with using the decorator."], "all_classes": null, "length": 6502}
{"pred": "\t\t\tbase.Render (writer);\n\t\t}\n\t}\n}\n```\nThis is the code for the `MultiView` control in ASP.NET. It inherits from `Control` and provides a way to display multiple views in a single control. The `MultiView` control has", "answers": ["\t\t\tif ((Controls.Count == 0) && (initialIndex != -1)) "], "all_classes": null, "length": 777}
{"pred": "   WigleDownloader(args.user, args.password, args.coordfile, args.outpath)\n\nPlease provide the path to the pickle file you want to load and the path to the coord.remain file you want to parse.", "answers": ["    args = parser.parse_args()"], "all_classes": null, "length": 1225}
{"pred": "               if (mod >= 156 && mod <= 160)\n                {\n                    if (i.SkillBonuses.GetBonus(1) > 0)\n                    {\n                        foreach (SkillName sk in Imbuing.Possible", "answers": ["                if (mod >= 156 && mod <= 160)"], "all_classes": null, "length": 1845}
{"pred": "       builds.append({'os': 'os_windows', 'arch': 'x86',\n                       'download_link': download_urls['direct']})\n    android_builds = android_builds(build, builds=builds)\n    # Check if the user is on", "answers": ["        for plat_os in ['Windows', 'Linux', 'Linux 64', 'OS X']:"], "all_classes": null, "length": 816}
{"pred": "\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n\t\t\tstateBeansList = StatusBL.loadByObjectID(objectID);\n\t\t}\n\t\tif (stateBeansList==null || stateBeansList.isEmpty()) {\n", "answers": ["\t\tif (projectID==null || issueTypeID==null) {"], "all_classes": null, "length": 1101}
{"pred": "           foreach (ArgumentSyntax argument in argumentSyntaxs) {\n                if (argument.Parent is InvocationExpressionSyntax invocationExpression) {\n                    if (invocationExpression.Expression is MemberAccessExpressionSyntax memberAccessExpression) {\n                        if (memberList.Any(m => m.Identifier", "answers": ["            foreach (ArgumentSyntax argumentSyntax in argumentSyntaxs) {"], "all_classes": null, "length": 861}
{"pred": "       split_test = self._update_partition_id(0)\n        # Verify that the child verticals are updated to match the new group configuration.\n        self.assertEqual(2, len(split_test.children))\n        vertical_0 = self.get_item_from", "answers": ["        split_test = self._update_partition_id(0)"], "all_classes": null, "length": 2752}
{"pred": "           // Sivan\n            if (fontSpecific) {\n                fontSpecific = false;\n                String tempEncoding = encoding;\n                encoding = \"\";\n                CreateEncoding();\n                encoding = tempEncoding;\n                fontSpecific = true;\n            }\n            // Sivan\n           ", "answers": ["            foreach (object o in longTag.Values) {"], "all_classes": null, "length": 1490}
{"pred": "\t\t\t\t\t\t// place the cell at its proper depth\n\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);\n\t\t\t\t\t\tcgn.depth = getDepth(cell);\n\t\t\t\t\t\t// update the x and y", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "       task = new ListenableFutureTask<>(callable);\n        task.addListener(new ListenableFutureTask.Listener<Bitmap>() {\n          @Override public void onSuccess(Bitmap result) {\n            EmojiPageBitmap.this.bitmapReference = new SoftReference<Bitmap", "answers": ["        task = new ListenableFutureTask<>(callable);"], "all_classes": null, "length": 629}
{"pred": "               if (ke.getKeyCode() == KeyEvent.VK_DOWN) {\n                    final String down = cmdHistory.goDown();\n                    if (!msgTF.getText().equals(down)) {\n                        msgTF.setText(down);\n                    }\n               ", "answers": ["                else if (ke.getKeyCode() == KeyEvent.VK_DOWN) {"], "all_classes": null, "length": 1035}
{"pred": "   prerequisite = NavigateToSibling('EditTags')\n    def step(self):\n        self.prerequisite_view.policy.item_select('Edit Tags')\n\nI'm not sure what the issue is, but I think it might be related to", "answers": ["    prerequisite = NavigateToSibling('Details')"], "all_classes": null, "length": 534}
{"pred": "\t\tfor (IJRecognitionListener listener : recognitionListeners) {\n\t\t\tlistener.onRecognition(timestamp, sequenceTitles);\n\t\t}\n\t}\n\tpublic void notifyPoseListeners(BigInteger timestamp, GeneralPose pose) {\n\t", "answers": ["\t\tfor (IJRecognitionListener listener : recognitionListeners) {"], "all_classes": null, "length": 482}
{"pred": "               base.Render(writer);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                ScriptManager sm = ScriptManager.GetCurrent(Page);"], "all_classes": null, "length": 655}
{"pred": "\n\t\tdamage = compound.getInteger(\"ToolDamage\");\n\t}\n\t\n\t@Override\n\tpublic void writeToNBT(NBTTagCompound compound)\n\t{\n\t\tsuper.writeToNBT(compound);\n\t\t\n\t", "answers": ["\t\tdamageCooldown = compound.getInteger(\"DamageCooldown\");"], "all_classes": null, "length": 475}
{"pred": "       return super.toString() + \"probability=\" + probability\n            + \", scopes=\" + (scopes == null ? \"null\" : scopes);\n    }\n}", "answers": ["        StringBuilder sb = new StringBuilder(32);"], "all_classes": null, "length": 661}
{"pred": "   i = store.handle_indicators_create(t, {\n        'indicator': 'example.com',\n        'group': 'everyone',\n        'provider': 'example.com',\n        'tags': ['test'],\n        'itype': 'fqdn", "answers": ["    i = store.handle_indicators_create(t, {"], "all_classes": null, "length": 577}
{"pred": "   self.assertEqual(p.owns[0], o)\n    self.assertEqual(o.owner, p)\n\n\n", "answers": ["        p = Person.objects.get(name=\"owner\")"], "all_classes": null, "length": 701}
{"pred": "           else:\n                self.plot_line(x, y, sel_dim=sel_dim)\n        else:\n            x = self._inspector.dataset[x][:]\n            y = self._inspector.dataset[y][:]\n            if sel_dim:", "answers": ["                    interact(self._plot_line, x_name=widget_x, y_name=widget_y)"], "all_classes": null, "length": 1433}
{"pred": "               if (ignored.Contains(path))\n                {\n                    toScan.Add(path);\n                }\n            }\n            foreach (var path in toScan)\n            {\n                var watcher = _fileSystemWatchers[path];\n                if (watcher != null", "answers": ["                if (!ShouldIgnoreChange(path, ignored))"], "all_classes": null, "length": 513}
{"pred": "\t\treturn read(key, computed);\n\t}\n\t@Override\n\tpublic E getAndCompute(K key,\n\t\t\t\t\t\t\tFunction<? super K, ? extends E> mappingFunction) {\n\t\tI computed = internalMap.getAndCompute(key", "answers": ["\t\treturn read(key, computed);"], "all_classes": null, "length": 837}
{"pred": "       cat = getToolByName(self.context, 'uid_catalog')\n        resbrains = cat.searchResults(query)\n        if len(resbrains) == 1:\n            contobj = resbrains[0].getObject()\t    \n            \n            if con", "answers": ["        cat = getToolByName(self.context, 'uid_catalog')"], "all_classes": null, "length": 1519}
{"pred": "\t\t\tset { m_ID = value; }\n\t\t}\n\t\tpublic int X\n\t\t{\n\t\t\tget { return m_X; }\n\t\t\tset { m_X = value; }\n\t\t}\n\t\tpublic int Y\n\t\t", "answers": ["\t\t\tset { m_ID = (ushort)value; }"], "all_classes": null, "length": 1528}
{"pred": "                   //m_log.DebugFormat(\"[FreeSwitchVoice][PARCELVOICE]: region \\\"{0}\\\": Parcel \\\"{1}\\\" ({2}): avatar \\\"{3}\\\": creating channel_uri: {4}\",\n                    //                  scene.Region", "answers": ["                    channelUri = ChannelUri(scene, land);"], "all_classes": null, "length": 1661}
{"pred": "\t\t\t\tDialogResult=DialogResult.Cancel;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tPayPeriods.Update(PayPeriodCur);\n\t\t\tDialogResult=DialogResult.OK;\n\t\t}\n\t\tprivate void butCancel_Click(", "answers": ["\t\t\t\tMsgBox.Show(this,\"Please fix data entry errors first.\");"], "all_classes": null, "length": 576}
{"pred": "       lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)\n        # Convert averaging/integrating period to timedeltas.\n        column_headings['Av or Int period'] = _calc_integration_period(\n            column_", "answers": ["        lat, lon = _build_lat_lon_for_NAME_timeseries(column_headings)"], "all_classes": null, "length": 2765}
{"pred": "   return authz.is_authorized('group_member_create', context, data_dict)\ndef _check_group_auth_for_package(context, data_dict):\n    # Ignore any package_id in the data_dict\n    return authz.is_author", "answers": ["    group_id = data_dict['id']"], "all_classes": null, "length": 772}
{"pred": "\t\t\t\tint childIndex = splittedSet.getActualChildIndex(resultIndex);\n\t\t\t\t// assigning child node\n\t\t\t\texample.setValue(predictionAttribute, childIndex);\n\t\t\t\t// updating depth\n\t\t\t\tdepths[result", "answers": ["\t\t\t\tString label = example.getValueAsString(predictionAttribute);"], "all_classes": null, "length": 784}
{"pred": "           return new[] { new SearchResults() { Action = Action.Search, ErrorCode = ErrorCode.InvalidOperation } };\n        }\n        #endregion // Methods\n        #region Methods (internal)\n        internal abstract void Initialize();\n        internal abstract void Dispose();\n        #", "answers": ["            var searchResultsArray = new SearchResults[segments.Length];"], "all_classes": null, "length": 1172}
{"pred": "           codePoint = Character.codePointAt(string, offset);\n            if (codePoint < 0x10000) {\n               return offset + 1;\n            }\n         }\n         return -1;\n      }\n   }\n   static class Not extends Abstract", "answers": ["            char low = string.charAt(offset++);"], "all_classes": null, "length": 6474}
{"pred": "     if (acessionNumber == null) {\n        return ValidationResults.REQUIRED_FAIL;\n      }\n      if (acessionNumber.length() != LENGTH) {\n        return ValidationResults.LENGTH_FAIL;\n      }\n      String program", "answers": ["        if (GenericValidator.isBlankOrNull(studyFormName)) {"], "all_classes": null, "length": 945}
{"pred": "\t\t\t\t\tSendOrderTo(newConn, \"ServerError\", message);\n\t\t\t\t\tDropClient(newConn);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (handshake.Version < ProtocolVersion.Version", "answers": ["\t\t\t\t\tSendOrderTo(newConn, \"AuthenticationError\", message);"], "all_classes": null, "length": 807}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((CatsReferralPendingEmergencyNonEDAdmissionListVo)beans[x].buildVo());\n\t\t}\n\t\t", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 833}
{"pred": "   xbmc.executebuiltin(\"Notification(\"+localtxt9+\",\"+localtxt10+\", 5000, %s)\" % (image))\n    time.sleep(3)\n    xbmc.executebuiltin(\"Reboot", "answers": ["elif prnum == 'advanced':"], "all_classes": null, "length": 549}
{"pred": "           int [] ret = new int[A.Dimensions.NumberOfDimensions]; \n            A.GetValueSeq(seqindex,ref ret); \n            return ret; \n        }\n        /// <summary>\n        /// convert sequential index into subscript indices\n        /// </", "answers": ["            int [] ret = new int[A.Dimensions.NumberOfDimensions]; "], "all_classes": null, "length": 1174}
{"pred": "```\nThis code is a Django view that provides a web interface for the Accounting system to generate plots. It uses the `dirac` module to interact with the Accounting system.\n\nThe code is divided into several functions:\n\n* `index`: This function is the entry point for the view.", "answers": ["  reportName = pD[ 'plotName' ]"], "all_classes": null, "length": 1147}
{"pred": "\t\t\tforeach (var b in builders)\n\t\t\t\tb.SetRallyPoints(bot.World.LocalRandom.NextRange(1, 10));\n\t\t}\n\t\tvoid IBotRequestPauseUnitProduction.PauseUnitProduction()\n\t", "answers": ["\t\t\tforeach (var rp in world.ActorsWithTrait<RallyPoint>())"], "all_classes": null, "length": 985}
{"pred": "       return plan.getPlan();\n    }\n    public void compileAndCache(String sql) {\n        compile(sql);\n        m_currentPlan = null;\n    }\n}", "answers": ["        List<PlanNodeList> nodeLists = new ArrayList<PlanNodeList>();"], "all_classes": null, "length": 768}
{"pred": "\t\t\tthis.comboBox1.Size = new System.Drawing.Size(200, 21);\n\t\t\tthis.comboBox1.TabIndex = 0;\n\t\t\tthis.comboBox1.SelectedIndexChanged += new System.EventHandler(this.", "answers": ["\t\t\tthis.comboBox1.Size = new System.Drawing.Size(224, 21);"], "all_classes": null, "length": 1012}
{"pred": "\t\t\tdcb.BaudRate = baud_rate;\n\t\t\tdcb.Parity = (Parity)parity;\n\t\t\tdcb.DataBits = (uint)data_bits;\n\t\t\tdcb.StopBits = (uint)", "answers": ["\t\t\tdcb.SetValues (baud_rate, parity, data_bits, bits, hs);"], "all_classes": null, "length": 1031}
{"pred": "       page = self.get_page(self.user.get_profile().get_url(),\n                             login_as=self.user)\n        self.assertEquals(page.context['cobrand'],\n                          cobrand)\n        self.assertEquals(page.context", "answers": ["        page = self.get_page(self.user.get_profile().get_url(),"], "all_classes": null, "length": 840}
{"pred": "   args = parser.parse_args()\n    if args.keep_tempdir:\n        _keep_tempdir = True\n    else:\n        _keep_tempdir = False\n    # Now run the test methods\n    unittest.main()\nif __name__ == '__", "answers": ["    options, args = parser.parse_known_args()"], "all_classes": null, "length": 555}
{"pred": "\t\t\tself[\"list\"] = List(self.newAPList)\n\t\t\tself[\"key_yellow\"] = StaticText(_(\"Connect\"))\n\t\t\tself[\"key_red\"] = StaticText(_(\"Close\"))\n\t\t\tself[\"actions\"] = NumberActionMap", "answers": ["\t\t\tcurrentListEntry = self[\"list\"].getCurrent()"], "all_classes": null, "length": 1024}
{"pred": "               float x = 0;\n                float y = 0;\n                for (int k = 0; k < fCode.Length; ++k) {\n                    char c = fCode[k];\n                    if (c == '*') {\n                        x = font", "answers": ["                int len = fCode.Length + 2;"], "all_classes": null, "length": 1163}
{"pred": "   return results;\n  }\n}\n}", "answers": ["    if (results == null) {"], "all_classes": null, "length": 840}
{"pred": "       y_points = np.arange(-90, 90, 10)\n        # ...\n        sample_points = [\n            (\"longitude\", x_points),\n            (\"latitude\", y_points),\n        ]\n        result = traj_interpol", "answers": ["        y_points = np.arange(-89.12, +90.0, 42.847)"], "all_classes": null, "length": 819}
{"pred": "           Clipboard.Clear();\n            Clipboard.SetText(currPacket.ToText());\n        }\n        private void toolStripButtonConvertToBytes_Click(object sender, EventArgs e)\n        {\n            LogPacket currPacket = GetCurrentPacket();\n", "answers": ["            if (currPacket != null)"], "all_classes": null, "length": 518}
{"pred": "   elif color == 'yellow':\n        print '\\033[1;32;40m'\n    else:\n        print '\\033[1;30m'\n    print\n\nif __name__ == \"__main__\":\n    # build_dataset(\"", "answers": ["    elif color == 'yellow':"], "all_classes": null, "length": 1319}
{"pred": "\n        }\n    }\n}\n\nPlease help me complete this code.\n\nNote: I have already implemented the Add, Remove, RemoveAll, and Count methods.\n\nNote2: I have also implemented the GetEnumerator method.\n\nNote3: I have also implemented the Remove", "answers": ["            set { _numValues = value; }"], "all_classes": null, "length": 743}
{"pred": "           this.treeView1.ImageList = imageList1;\n            this.treeView1.NodeMouseClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.treeView1_NodeMouseClick);\n            this.treeView1.NodeMouseDoubleClick += new", "answers": ["            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);"], "all_classes": null, "length": 1467}
{"pred": "   def nullFunction( self, functionName, *args, **named ):\n        return None\n\nYou need to complete the code by defining the `createBaseFunction` and `copyBaseFunction` functions.\n\nHere is a hint on how to complete the code:\n\nThe `createBase", "answers": ["        elif hasattr( original, 'originalFunction' ):"], "all_classes": null, "length": 831}
{"pred": "           writeUint64(baos, emptyStreams.length());\n            header.write(baos.toByteArray());\n        }\n    }\n    private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n        boolean hasEmptyFiles = false;\n        for", "answers": ["            final DataOutputStream out = new DataOutputStream(baos);"], "all_classes": null, "length": 1652}
{"pred": "                   alphaLevel += (int) (rampDelay * (inRamp ? 255 : 0));\n                    inRamp = !inRamp;\n                }\n                repaint();\n                try\n                {\n                    Thread.sleep(10);\n               ", "answers": ["                    for (int i = 0; i < ticker.length; i++)"], "all_classes": null, "length": 600}
{"pred": "           var item = Subject.GetItems().Single();\n            item.CanBeRemoved.Should().BeTrue();\n            item.CanMoveFiles.Should().BeTrue();\n        }\n        [Test]\n        public void should_be_removable_and_should_allow", "answers": ["            var item = Subject.GetItems().Single();"], "all_classes": null, "length": 655}
{"pred": "\n            }\n        }\n    }\n}\n```\nPlease note that this code is just an example and you should adjust it to your specific needs and requirements. Also, you should make sure to test the code thoroughly before using it in production.", "answers": ["                if (_diff > 0)"], "all_classes": null, "length": 772}
{"pred": "\n    def SersicConstrain(constrain_file, cO):\n        f_constrain = open(constrain_file, 'ab')\n        f_constrain.write(str(cO) + '       x       ' + \\\n                          str(-c.center", "answers": ["                      'relative to data\\n'])"], "all_classes": null, "length": 1863}
{"pred": "\n            }\n            lo[0] = i;\n        }\n    };\n    public static WriteHandlerPtr write_handler(int offset, int data) {\n        return segar_w;\n    }\n}\n}\n\nPlease note that this code is not complete and may not", "answers": ["                    i += ((b & 0x08) << 2);"], "all_classes": null, "length": 1309}
{"pred": "       return self.course_key.make_usage_key(usage_key='course')\n    def _create_course(self):\n        \"\"\"\n        Create the course in Studio.\n        \"\"\"\n        self.session.post(\n            STUDIO_BASE_URL + '/", "answers": ["        course_key = CourseKey.from_string(self._course_key)"], "all_classes": null, "length": 824}
{"pred": "\t\tif(splitNumber.length == 2) {\n\t\t\tchance = Float.parseFloat(splitNumber[1]);\n\t\t}\n\t\tint result = (int)(chance*100);\n\t\treturn result;\n\t}\n}\n}\n", "answers": ["\t\tint min = -1;"], "all_classes": null, "length": 803}
{"pred": "   return response, info\ndef download_request(module, name, apiid, apikey):\n    meter_id = get_meter_id(module, name, apiid, apikey)\n    if meter_id is None:\n        return False\n    else:\n        response,", "answers": ["        types = ['cert', 'key']"], "all_classes": null, "length": 744}
{"pred": "           this.lblPrivacy.AutoSize = true;\n            this.lblPrivacy.Location = new System.Drawing.Point(6, 33);\n            this.lblPrivacy.Name = \"lblPrivacy\";\n            this.lblPrivacy.Size", "answers": ["            this.lblPrivacy.Location = new System.Drawing.Point(6, 26);"], "all_classes": null, "length": 1336}
{"pred": "       for plugname, plug in self.loaded_plugins:\n            try:\n                plug.collect()\n                plugruncount += 1\n                self.ui_log.info(\" * %s: %s\" % (plugname, plug.name))\n            except Key", "answers": ["        for i in zip(self.loaded_plugins):"], "all_classes": null, "length": 3043}
{"pred": "   from MaKaC.conference.AbstractMaterial import IAbstractMaterialFossil\n    from MaKaC.conference.Slot import ISlotFossil\n    from MaKaC.conference.Session import ISessionFossil\n    from MaKaC.", "answers": ["    getRoomFullName.produce = lambda s: s.getRoom()"], "all_classes": null, "length": 893}
{"pred": "                       parent.mirthClient.importMessage(channelId, message);\n                        }\n                        return true;\n                    }\n                };\n                result = messageImporter.importMessages(messageBrowser.getMessages(), messageWriter);\n            } else {\n                result = messageImp", "answers": ["                            throw new MessageWriterException(e);"], "all_classes": null, "length": 543}
{"pred": "\t\t\t\t\tlayer = ((Scriptable) value).getIntValue(null);\n\t\t\t\t} else if (value instanceof Number) {\n\t\t\t\t\tlayer = (int) value.doubleValue();\n\t\t\t\t}\n\t\t    \t}\n\t\t", "answers": ["\t\t       \t\t\tlayer = ScriptRuntime.toInt32(value);"], "all_classes": null, "length": 762}
{"pred": "       if (currentSession != null && currentSession.getAccessToken() != null) {\n            User user = User.getCurrentUser();\n            if (user != null) {\n                userProfilePicID = user.getId();\n                userProfilePic = user.getPicture();", "answers": ["        if (currentSession != null && currentSession.isOpened()) {"], "all_classes": null, "length": 1328}
{"pred": "\t\tfor (Emotion emotion : emotions) {\n\t\t\tsum += emotion.strength;\n\t\t}\n\t\tfor (Emotion emotion : emotions) {\n\t\t\temotion.strength = sum / emotions.length;\n\t\t}", "answers": ["\t\tfor(Emotion emotion : emotions)"], "all_classes": null, "length": 630}
{"pred": "                   'property1': 2, 'property2': 3}\n            }\n        ],\n        self.build.stages_to_list())\n    def test_export_to_xml(self):\n        \"\"\"Test exporting BuildJob to XML.\"\"\"\n        # read", "answers": ["                    'property1': 2, 'property2': 3}"], "all_classes": null, "length": 1160}
{"pred": "   LatRad = phi1*_deg2rad\n    LongRad = LongOrigin + (x/a)*cos(phi1Rad)\n    if NorthernHemisphere:\n        LongRad = -LongRad\n    return (LatRad, LongRad)\n#================================================================", "answers": ["    N1 = a/sqrt(1-eccSquared*sin(phi1Rad)*sin(phi1Rad))"], "all_classes": null, "length": 980}
{"pred": "       ReportUserForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"User reported successfully!\")\n            return HttpResponseRedirect(reverse(\"profile\"))\n    else:\n        form = ReportUserForm", "answers": ["        form = ReportUserForm(request.POST)"], "all_classes": null, "length": 651}
{"pred": "   label = \"Add series\"\n    field_names = [\n        \"name\",\n        \"project\",\n        \"series\",\n        \"owner\",\n        \"active\",\n        \"autoupdate\",\n        ]\n    @action(\"Add\", name='add')\n    def add", "answers": ["    field_names = ['name', 'summary', 'branch', 'releasefileglob']"], "all_classes": null, "length": 4413}
{"pred": "\t\t\t\tform.RightToLeft = RightToLeft.Yes;\n\t\t\t\tform.RightToLeftLayout = true;\n\t\t\t}\n\t\t}\n#endif\n\t}\n}\n#if !KeePassLibSD\nusing System.Drawing;\n#", "answers": ["\t\t\t\ttry { RtlApplyToControls(form.Controls); }"], "all_classes": null, "length": 511}
{"pred": "               temp >>= 8;\n            }\n        }\n        return arr;\n    }\n}\n\n\n", "answers": ["                temp >>= 8;"], "all_classes": null, "length": 917}
{"pred": "               new_positional_tags_list.append((flag, re.compile(regex)))\n            return new_positional_tags_list\n    def _add_compile_tag_regex(compile_tag_regex):\n        compile_tag_regex = compile_tag_regex[0", "answers": ["                if flag == 'exclude_tags':"], "all_classes": null, "length": 1382}
{"pred": "               return new object[0];\n            }\n        }\n    }\n}\n\nPlease help me to complete the code.\n\nNote: I have provided the code for the `MethodGenericParameter` and `TypeGenericParameter` classes, but I am unable to complete the code for the `Generic", "answers": ["                return new object[0];"], "all_classes": null, "length": 545}
{"pred": "packet = OBD_PID00(data=b'0x00000000000000000000000000000000000000000000000", "answers": ["        0x06: 'EOBD (Europe) ',"], "all_classes": null, "length": 557}
{"pred": "\t\tif ready_pipe == -1:\n\t\t\tready_pipe = os.pipe()\n\t\telse:\n\t\t\tdbus.service.Object.listen(self)\n\tdef close(self):\n\t\tfor session in list(self.sessions.get(", "answers": ["\t\tloop = gobject.MainLoop()"], "all_classes": null, "length": 1595}
{"pred": "\t\t\t\t\n\t\t\t\tthis.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);\n\t\t\t\tthis.AddRes(index, typeof(RunedPrism), ", "answers": ["                this.AddRes(index, typeof(BlackPearl), 1044353, 1, 1044253);"], "all_classes": null, "length": 1615}
{"pred": "   def __enter__(self):\n        self.push()\n        return self\n    def __exit__(self, exc_type, exc_value, tb):\n        self.pop(exc_value)\n        if exc_type is not None:\n            self.app.do", "answers": ["        app_ctx = self._implicit_app_ctx_stack.pop()"], "all_classes": null, "length": 1358}
{"pred": "   response = _pubsub_consumer(session, cluster_id, needs_columns=needs_columns)\n    if topic_name:\n        response = response.filter(PubSubTopic.name==topic_name)\n    return response\n# ###################################################################################################", "answers": ["    response = _pubsub_consumer(session, cluster_id, query_wrapper)"], "all_classes": null, "length": 2251}
{"pred": "           if (resourceEntityForRelease != null) {\n                result.add(resourceEntityForRelease);\n            }\n        }\n        return result;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if (resourceEntityForRelease != null) {"], "all_classes": null, "length": 1149}
{"pred": "   axis_proj = _axis_in_detector(ray_trafo.geometry)\n    rot_dir = _rotation_direction_in_detector(ray_trafo.geometry)\n    # ...\n\nThis code is a part of the Open Data Lab (ODL)", "answers": ["        dx = ray_trafo.range.meshgrid[1]"], "all_classes": null, "length": 1057}
{"pred": "           return regx\n        else:\n            return regx\n    def _doLogin(self):\n        if self.isEnabled():\n            self.url = self.urls[self.type]\n            self.enabled = True\n            return True\n        return False\n    def _check", "answers": ["            logger.log(u\"Proxified REGEX: \" + regx, logger.DEBUG)"], "all_classes": null, "length": 1751}
{"pred": "\t\t\treturn font_size_names [type];\n\t\t}\n\t}\n\tpublic class FontUnitConverter : TypeConverter\n\t{\n\t\tpublic override object ConvertTo (object context, CultureInfo culture, object value)\n\t\t{\n\t\t\tif (value is Font", "answers": ["\t\t\tif (type == FontSize.NotSet)"], "all_classes": null, "length": 726}
{"pred": "\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))\n\t\t\t\t{\n\t\t\t\t\tthrow new InvalidCipherTextException(\n\t\t\t\t\t\t\t\"BlockLength too large for simple addition.\\n\");\n\t\t\t\t}\n", "answers": ["\t\t\t\t\t\t|| (block2.Length > GetInputBlockSize()))"], "all_classes": null, "length": 924}
{"pred": "\t\t\t\tvar inner = (JObject)obj.Properties[0].Value;\n\t\t\t\tAssert.That(inner.Properties.Count, Is.EqualTo(2));\n\t\t\t\tAssert.That(inner[\"In this test\"].ToString(), Is.EqualTo(\"It", "answers": ["\t\t\tobj = (JObject)obj.Properties[0].Value;"], "all_classes": null, "length": 537}
{"pred": "for (int w = 0; w < width; w++) {\nT2 edge = new T2(w, h);\nedges.add(edge);\n}\n            return edges;\n        }\n        @Override\n        public Collection<String> getVertices() {\n           ", "answers": ["                for (int w = 0; w < width; w++) {"], "all_classes": null, "length": 1282}
{"pred": "   iso = isoelab.Isoelastics(ds)\n    iso.get(col1=\"area_um\", col2=\"deform\")\n    ...\n    assert np.allclose(iso.data[0][0], [1.61819", "answers": ["    i1 = iso.get_default()"], "all_classes": null, "length": 761}
{"pred": "\n        final String filename = args[0];\n        final String namespace = args[1];\n        final LocalTripleStore db1 = new LocalTripleStore(filename, namespace);\n        final LocalTripleStore db2 = new LocalTripleStore(filename, namespace);\n        //       ", "answers": ["        if (args.length < 2 || args.length > 3) {"], "all_classes": null, "length": 1331}
{"pred": "   def test_check_for_alert_with_no_history(self):\n        \"\"\"Test that we handle no history and no subscriptions in a sane way.\"\"\"\n        history = []\n        subscription = {'name': 'Sub for 1b',\n                     'threshold':'", "answers": ["                    {u'Timestamp': datetime.datetime(2015, 12, 31, 21, 29, 47,"], "all_classes": null, "length": 706}
{"pred": "\t\t\tString downloadedJarFile = performDownload();\n\t\t\tif (downloadedJarFile != null) {\n\t\t\t\treturn performInstallation(downloadedJarFile);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic", "answers": ["\t\t\tString downloadedJarFile = performDownload();"], "all_classes": null, "length": 519}
{"pred": "\t\t\tcontext = IntPtr.Zero;\n\t\t\tOpenGL.glDeleteContext(context);\n\t\t\tOpenGL.CheckGLError();\n\t\t\tcontext = IntPtr.Zero;\n\t\t\twindow.Dispose();\n\t\t}\n\t}\n}", "answers": ["\t\t\tif (context != IntPtr.Zero)"], "all_classes": null, "length": 469}
{"pred": "       (projected onto the *y* axis).\n        :rtype: numpy.ndarray or None\n        \"\"\"\n        return self._project_cov_mat(\n            self.x_data_cov_mat_inverse, self.y_data_cov_mat_inverse", "answers": ["        projected onto the *y* axis. :py:obj:`None` if singular."], "all_classes": null, "length": 985}
{"pred": "       CmsLink link = new CmsLink(m_structureId, m_target, m_query, m_anchor, m_type, m_internal);\n        return link;\n    }\n    @Override\n    public String toString() {\n        return ReflectionToStringBuilder.", "answers": ["        if (this == EMPTY) {"], "all_classes": null, "length": 703}
{"pred": "                 adminUser = getEucalyptusAdmin();\n                }\n              } catch (AuthException e) {\n                // ignore and use eucalyptus admin account\n                owningAccount = getEucalyptusAccount();\n                adminUser = getEucal", "answers": ["                  adminUser = getEucalyptusAdmin();"], "all_classes": null, "length": 4345}
{"pred": "           add { _selectedFolderChanged += value; }\n            remove { _selectedFolderChanged -= value; }\n        }\n        public event EventHandler FoldersInvalidated\n        {\n            add { _folderSystem.FoldersInvalidated += value; }\n            remove { _folderSystem", "answers": ["            add { _selectedFolderChanged += value; }"], "all_classes": null, "length": 666}
{"pred": "       ImportVmTemplateCommand command = new ImportVmTemplateCommand(createParameters());\n        command.setIsImportAsNewEntity(isImportAsNewEntity);\n        assertEquals(EngineMessage.VAR__VM_TEMPLATE_NAME_SIZE_EXCEEDED.stringValue", "answers": ["        ImportVmTemplateParameters parameters = createParameters();"], "all_classes": null, "length": 616}
{"pred": "\t\t\tw10.XOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\tw10.YOptions = ((global::Gtk.AttachOptions)(4));\n\t\t\t// Container child table1.Gtk.Table+TableChild\n\t", "answers": ["\t\t\tw10.TopAttach = ((uint)(1));"], "all_classes": null, "length": 650}
{"pred": "       self.set('MY_KEY', 'MY_VALUE')\n\nI'm trying to understand how to use this script to set and retrieve variables, and how to use the post-processing script to perform actions on the NZB file.\n\nCan someone please provide more information on how to use", "answers": ["            environ['%sCATEGORY' % POSTPROC_ENVIRO_ID] = \\"], "all_classes": null, "length": 1764}
{"pred": "\t\t\treturn new ConstructorBuilder(mb);\n\t\t}\n\t\tpublic MethodBuilder DefineMethod(string name, MethodAttributes attribs, CallingConventions callConv, Type[] parameterTypes)\n\t\t{\n\t\t\tMethodBuilder mb = new MethodBuilder(", "answers": ["\t\t\treturn new ConstructorBuilder(mb);"], "all_classes": null, "length": 910}
{"pred": "     return new Builder(prototype);\n    }\n    public override Builder Clone() { return CreateBuilder(this); }\n    public static SendInvitationRequest DefaultInstance {\n      get { return defaultInstance; }\n    }\n    \n    public override bool Equals(object obj)", "answers": ["      return (Builder) new Builder().MergeFrom(prototype);"], "all_classes": null, "length": 1897}
{"pred": "                   vertices[x] = getVertex(i, x);\n                else {\n                    vertices[x].set(getVertex(i, x));\n                }\n            }\n        }\n    }\n    protected Vector3f getVertex(int i, int x) {\n       ", "answers": ["                    vertices[x] = new Vector3f();"], "all_classes": null, "length": 1059}
{"pred": "       result.addAll(CmsStringUtil.splitAsList(showDateData, ';'));\n        return result;\n    }\n    public void initSort() {\n        // init sort only if not already initialized\n        if (!isBeanSortInitialized()) {\n            // init sort parameters", "answers": ["        if (CmsStringUtil.isNotEmptyOrWhitespaceOnly(showDateData)) {"], "all_classes": null, "length": 1920}
{"pred": "\t\t\tyield return new WaitForSeconds (0.01f);\n\t\t}\n\t}\n}\n```\nThis code is for a `InputField` component in Unity, which is used to create a text input field with a line below it. The code is written in C#", "answers": ["\t\t\tyield return new WaitForEndOfFrame();"], "all_classes": null, "length": 583}
{"pred": "       Height = GetBestHeight();\n      }\n      base.OnSizeChanged(e);\n    }\n    //--------------------------------------------------------------------------------\n  }\n}\n\nPlease modify the code to create a button with an arrow on the right side of the button. The arrow should be displayed when the", "answers": ["        int h = GetBestHeight();"], "all_classes": null, "length": 638}
{"pred": "                   lastUser = r[\"CreatedBy\"].ToString();\n                }\n                if (!string.IsNullOrEmpty(lastUser))\n                {\n                    Users.Add(lastUser);\n                }\n            }\n            // send email to each user\n            foreach (string user in Users", "answers": ["                    lastUser = r[\"CreatedBy\"].ToString();"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tdirections |= ScrollDirection.Right;\n\t\t\t\tif (Viewport.LastMousePos.Y >= Game.Renderer.Resolution.Height - EdgeScrollThreshold)\n\t\t\t\t\tdirections |= ScrollDirection.Down;\n\t\t\treturn directions", "answers": ["\t\t\t\tdirections |= ScrollDirection.Right;"], "all_classes": null, "length": 598}
{"pred": "           // call the base class method to validate the data\n            base.ValidateData(ARow);\n        }\n        private void InitializeManualCode()\n        {\n            // load data into dataset\n            FMainDS.Clear();\n            FMainDS.Merge(TRemote", "answers": ["            string[] CriteriaCodesUsedArray = CriteriaCodesUsed.ToArray();"], "all_classes": null, "length": 1562}
{"pred": "               stream.Read (buffer, 0, buffer.Length);\n                // Adding file content as blob/byte[]\n                args.Add (filename, buffer);\n            }\n        }\n    }\n}\n */\n\nPlease modify the code to load files from a remote location (e.", "answers": ["                stream.Read (buffer, 0, buffer.Length);"], "all_classes": null, "length": 722}
{"pred": "   def __str__(self):\n        return \"PayloadRequirements(apply_called_for_all_requirements=%s, apply_cb=%s)\" % (self.apply_called_for_all_requirements, self.apply_cb)\n\nI have a question regarding", "answers": ["        return not any(self._reqs.values())"], "all_classes": null, "length": 879}
{"pred": "\t\t\tget { return Enabled && CopyCustom; }\t\n\t\t}\n\t\tpublic string CustomRange\n\t\t{\n\t\t\tget { return _customRange; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value != _customRange)", "answers": ["\t\t\tget { return Enabled && _numberOfImages > 2; }"], "all_classes": null, "length": 1205}
{"pred": "\t\t\tget {\n\t\t\t\treturn dataDir;\n\t\t\t}\n\t\t\tset {\n\t\t\t\tdataDir = value;\n\t\t\t}\n\t\t}\n\t}\n}\n\nThis code is a Gnome application that inherits from the IN", "answers": ["\t\t\tget { return dataDir; }"], "all_classes": null, "length": 614}
{"pred": "\n            if (bugAnnotation.getType() != BugAnnotation.TYPE_SOURCE_LINE) {\n                throw new IllegalArgumentException(\"Invalid bug annotation type: \" + bugAnnotation.getType());\n            }\n        }\n    }\n}\n\n\n", "answers": ["            if (bugAnnotation instanceof PackageMemberAnnotation) {"], "all_classes": null, "length": 733}
{"pred": "\tpublic override void OnDoubleClick( Mobile from )\n\t{\n\t\tbase.OnDoubleClick( from );\n\t\tif ( CheckHunger( from ) )\n\t\t{\n\t\t\tEat( from );\n\t\t}\n\t}\n}\nNote: This", "answers": ["\t[TypeAlias( \"Server.Items.Pizza\" )]"], "all_classes": null, "length": 1914}
{"pred": "                       if (eFarm.Count > 0)\n                        {\n                            E.Cast(eFarm[0]);\n                        }\n                    }\n                }\n            }\n        }\n        private void JungleClear()\n        }\n        private void QSp", "answers": ["                        if (eFarm.MinionsHit >= Menu.GetSlider(\"LaneClearECount\"))"], "all_classes": null, "length": 993}
{"pred": "\t\treturn get(x, y, width, height, 0.0, 0.0, anchor);\n\t}\n}\n}\n\nThis code is a small helper class to create GridBagConstraints in a more readable way with less typing. It provides a set of methods to create a", "answers": ["\t\treturn get(x, y, width, height, 0.0, 0.0, DEFAULT_FILL, anchor);"], "all_classes": null, "length": 691}
{"pred": "       fb = self._retr_file(filename)\n        try:\n            year, month, day = re.findall(r\"\\d\\d\\d\\d\\-\\d\\d\\-\\d\\d\", fb)[0].split('-')\n        except:\n", "answers": ["        filexml = self._retr_file(filename)"], "all_classes": null, "length": 709}
{"pred": "       self.assertEquals(field_def['rules'], field_model_def['rules'])\n        self.assertEquals(field_def['producer'], field_model_def['producer'])\n        clean_field_model_definitions()\n    def test_field_name_model", "answers": ["        value = {'a': 'Awesome title', 'b': 'sub title', 'k': 'form'}"], "all_classes": null, "length": 559}
{"pred": "                   new[] {new object[] {\"E1\", 10L, \">E1<\", \"?E1?\"}});\n                env.UndeployAll();\n            }\n        }\n        internal class InfraMultipleColumnMultipleIndex : RegressionExecution\n        }", "answers": ["                    new[] {new object[] {10L, \"E1\"}});"], "all_classes": null, "length": 2245}
{"pred": "   def __itruediv__(self, other):\n        try:\n            other = float(other)\n        except:\n            return NotImplemented \n        c = self.copy()\n        return c.__itruediv__(other)\n\n    def __itrued", "answers": ["        c = self.copy()"], "all_classes": null, "length": 2793}
{"pred": "   view = self.pool['ir.ui.view'].browse(cr, uid, view_id, context=context)\n    view.name = 'My View'\n    view.page = True\n    view.website_meta_title = 'My Website Title'\n    view", "answers": ["        view = self.browse(cr, SUPERUSER_ID, res_id, context=context)"], "all_classes": null, "length": 739}
{"pred": "           value = createHTMLView(c, text);\n            c.putClientProperty(propertyKey, value);\n        }\n        if (oldValue != value) {\n            oldValue.remove();\n        }\n    }\n    private static final String propertyKey = \"html.renderer", "answers": ["            value = BasicHTML.createHTMLView(c, text);"], "all_classes": null, "length": 980}
{"pred": "   s = create(filename, content=content)\n    assert not s.name_is_non_test\n    assert not s.name_is_manual\n    assert not s.name_is_visual\n    assert not s.name_is_multi_global\n    assert s.", "answers": ["    s = create(filename, content)"], "all_classes": null, "length": 633}
{"pred": "\t\t\t\tmapping.sqlloader = new HbmSqlLoader(namedQueryReference);\n\t\t\t}\n\t\t}\n\t\tpublic void Loader(string namedQueryReference, string[] parameterNames)\n\t\t{\n\t\t\tif (mapping.SqlLoader == null)\n", "answers": ["\t\t\t\tmapping.loader = new HbmLoader();"], "all_classes": null, "length": 620}
{"pred": "\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );\n\t\t\tfor ( int i = 0; i < m_Members.Count; ++i )\n\t\t\t{\n\t\t\t\tPlayerState pl = m_Members[i", "answers": ["\t\t\twriter.WriteEncodedInt( (int) m_Members.Count );"], "all_classes": null, "length": 670}
{"pred": "       invocationQueue.removeFirst();\n    }\n    private void moveForward() {\n        assert !graphQueue.isEmpty();\n        CallsiteHolderExplorable callsiteHolder = (CallsiteHolderExplorable) currentGraph();\n        InlineInfo callSiteInfo = call", "answers": ["        assert graphQueue.size() <= maxGraphs;"], "all_classes": null, "length": 2259}
{"pred": "               pytest_con = self.args['pytest_con']\n                pytest_name = self.args['test_id']\n                pytest_bindings = self.create_pytest_bindings()\n                pytest = PytestDocker(name=pytest_name", "answers": ["                self.args['pytest'] = \"py.test {}\".format(pytest)"], "all_classes": null, "length": 951}
{"pred": "               if (phi) {\n                    ValueNode phi = getCachedPhi(value, value.getStamp());\n                    for (int i = 1; i < states.size(); i++) {\n                        states.get(i).readCache.put(key, ph", "answers": ["                if (phi) {"], "all_classes": null, "length": 810}
{"pred": "       if (mCallback != null) {\n            try {\n                mCallback.handleCallSessionEvent(event);\n            } catch (RemoteException ignored) {\n            }\n        }\n    }\n}\n */\n\nPlease complete the code by implementing the abstract methods and implementing the IIms", "answers": ["        if (mCallback != null) {"], "all_classes": null, "length": 587}
{"pred": "\t\t\t\tfrom.SendGump(new EodonGump(from));\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic override void Serialize(GenericWriter writer)\n\t\t{\n\t\t\tbase.Serialize(writer);\n\t\t\twriter.", "answers": ["\t\t\t\tGump g = new Gump(0, 0);"], "all_classes": null, "length": 854}
{"pred": "   from invenio.legacy.bibrecord import get_fieldvalues\n    # ...\n\nI'm trying to understand how the code is structured and what it does, but I'm having trouble understanding the code. Can someone explain what this code does and how it works?\n\nI", "answers": ["] + models)"], "all_classes": null, "length": 609}
{"pred": "   def remove_user_session(self, username, domain, resource):\n        user = '%s@%s' % (username, domain)\n        session = self.module.get(user)\n        if session is None:\n            raise UserNotFound(username, domain, resource)\n", "answers": ["        user = '%s@%s' % (username, domain)"], "all_classes": null, "length": 744}
{"pred": "         - *fpath*: string, full or relative path to the file.\n        \"\"\"\n        _BaseFile.save(self, fpath, 'to_binary')\n    def percent_translated(self):\n        \"\"\"\n        Convenience method that return the percentage of translated", "answers": ["          - *fpath*: string, full or relative path to the file."], "all_classes": null, "length": 2528}
{"pred": "   if not res['OK']:\n      gLogger.error( \"Failed to determine waiting problematics for transformation\", res['Message'] )\n      return res\n    else:\n      self.updateWaitingIntegrity()\n    return S_OK()\n\nPlease provide the code you have", "answers": ["    if not res['OK']:"], "all_classes": null, "length": 873}
{"pred": "\t\t\tif(uri.getPath() != null && !uri.getPath().equals(\"/\"))\n\t\t\t\tthrow new CommentException(l10n(\"invalidFormPath\") + \" \" + uri.getPath());\n\t\t\tif(uri.getQuery() != null &&", "answers": ["\t\t\tString path = uri.getPath();"], "all_classes": null, "length": 1604}
{"pred": "       gsp = yield self.setupGerritStatusPush(summaryCB=sampleSummaryCB)\n        buildset, builds = yield self.setupBuildResults([buildResult], buildResult)\n        yield gsp.buildStarted(None, builds[0])\n        yield gsp.build", "answers": ["        gsp = yield self.setupGerritStatusPush(reviewCB=sampleReviewCB,"], "all_classes": null, "length": 958}
{"pred": "   self.category = atom.Category()\n  def testCategoryToAndFromString(self):\n    self.category.term = 'foobar'\n    self.category.scheme = 'http://example.com/categories'\n    self.assert_(self.category.term == '", "answers": ["    self.category = atom.Category()"], "all_classes": null, "length": 629}
{"pred": "           Map<String, AnnotationMirror> r2) {\n            Map<String, AnnotationMirror> r = new HashMap<String, AnnotationMirror>(r1);\n            r.putAll(r2);\n            return r;\n        }\n        @", "answers": ["                Map<String, AnnotationMirror> r2) {"], "all_classes": null, "length": 2339}
{"pred": "   # Add the menu items\n    menu.add_menu(\"Materials\")\n    menu.add_menu(\"Materials\")\n    menu.add_separator()\n    menu.add_menu(\"Game\")\n    menu.add_separator()\n    menu.add_menu(\"", "answers": ["        col = split.column()"], "all_classes": null, "length": 2052}
{"pred": "           if (_engine.Memory.Map.Cartridge.MapperNo == 16)\n            {\n                var map16 = (Mapper16) _engine.Memory.Map.CurrentMapper;\n                mapper16_latch1 = map16.Latch1;\n", "answers": ["            if (_engine.Memory.Map.Cartridge.MapperNo == 16)"], "all_classes": null, "length": 1369}
{"pred": "           JMenu jMnuOpenDocument = new JMenu(\"Open Document\");\n            jMnuOpenDocument.add(new JMenuItem(oActionListener));\n            _jMnuRoot.add(jMnuOpenDocument);\n        }\n        private void insertMenus(){\n            J", "answers": ["            String[] sTDocUrls = m_oInspector.getTDocUrls();"], "all_classes": null, "length": 594}
{"pred": "\t\tAdd(\"Party Quest\", 70026); // Party Quest Scroll [10 Red Bears]\n\t}\n}\npublic class NpcScript\n{\n\tpublic static string RndMsg(string str)\n\t{\n\t\treturn str + \" \"", "answers": ["\t\tAdd(\"Party Quest\", 70025); // Party Quest Scroll [30 Red Bears]"], "all_classes": null, "length": 1340}
{"pred": "\t\t\treturn base.SizeHeightToFit (min);\n\t\t}\n\t}\n}\n}\n```\nPlease help me to understand this code and how to use it to create a custom layout for a clock app.\n\nAnswer: This code is a custom layout for a `View", "answers": ["\t\t\tMeasure (0, 0);"], "all_classes": null, "length": 853}
{"pred": "       return self.announcement.title\n\nPlease complete the code by filling in the missing code lines and implementing the necessary functions and methods.\n\nNote:\n\n* The `unique_slug` function is not implemented, you will have to implement it.\n* The `render_document` function", "answers": ["        return '%s -> %s' % (self.announcement, self.tweet_id)"], "all_classes": null, "length": 846}
{"pred": "```\nimport sphinx.ext.intersphinx\n\n# ...\n```\nThis code block is generated by Sphinx and contains configuration options for the Intersphinx extension. The configuration options are defined in the `intersphinx_mapping` dictionary, which maps project names to tu", "answers": ["lexers['php'] = PhpLexer(startinline=True)"], "all_classes": null, "length": 1773}
{"pred": "                    ''', (i,))\n    rows = cursor.fetchall()\n    print \"Rows are: \", rows\n    for row in rows:\n        #print \"Row is: \", row\n        #time_add(row[0], row[1])\n        time_add(", "answers": ["                 ORDER BY sdate, stime ''', (i,))"], "all_classes": null, "length": 1259}
{"pred": "       try:\n            # Update the last_snapshot field of the project\n            print(\"Updating last_snapshot for project {project_id} to {timestamp}\".format(project_id=project_id, timestamp=timestamp))\n            conn.table('projects').get(project_", "answers": ["        last_snapshot = timestamp_to_rethinkdb(timestamp)"], "all_classes": null, "length": 896}
{"pred": "\t\t\t\tif (HasKeyword(\"deian_01\"))\n\t\t\t\t{\n\t\t\t\t\tGiveKeyword(\"deian_02\");\n\t\t\t\t\tMsg(\"Hey, you! Yeah, you with the complicity!<br/>I", "answers": ["\t\t\t\tMsg(\"Welcome to the real world...\");"], "all_classes": null, "length": 1740}
{"pred": "\t\tname\t- aname/ename/gname\n\t\t\"\"\"\n        Response.__init__(self, cmd, restag, rescode, resstr, datalines)\n        self.codestr = 'VOTE_REVOKED'\n        self.codehead =", "answers": ["\t\tname\t- aname/ename/gname"], "all_classes": null, "length": 2041}
{"pred": "   def add_host(self, host_data):\n        self.host_data[host_data.uuid] = host_data\n\nI have completed the code given above. Please let me know if you have any questions or need further assistance.", "answers": ["        self.start = time.time()"], "all_classes": null, "length": 793}
{"pred": "           }\n        }\n    }\n}\n\\end{code}\n\nThis code is from an Android app that uses the `HttpURLConnection` class to resolve URLs. It uses the `CookieManager` class to handle cookies, and the `RedirectHelper` class to check if a URL is a", "answers": ["                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(uri));"], "all_classes": null, "length": 690}
{"pred": "   if len(primary.keys()) > 0:\n        print(\"primary.xml contains packages:\")\n        for key in primary.keys():\n            pkg = primary.items[key]\n            print(\"\\t\" + build_nevra(pkg.name, pkg.ep", "answers": ["    if (len(primary.keys()) > 0):"], "all_classes": null, "length": 918}
{"pred": "           inputs.extend(self.get_finalized_command('build_ext').get_outputs())\n\nPlease provide the complete code for the above code snippet.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            build_ext = self.get_finalized_command('build_ext')"], "all_classes": null, "length": 791}
{"pred": "\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)\n\t\t\t{\n\t\t\t\tobject propValue = lazyPropertyTypes[j].NullSafeGet(disassembledValues, lazyPropertyColumnAliases[j], session, entity", "answers": ["\t\t\tfor (int j = 0; j < lazyPropertyNames.Length; j++)"], "all_classes": null, "length": 3626}
{"pred": "       '--job-name', job_name,\n        '--log-file', log_name,\n        '--job-id', str(request['job_id']),\n        '--accounting-file', '/data/project/.system/accounting',\n        '--q", "answers": ["        '-l', 'h_vmem=%dM' % request['job_max_vmem'],"], "all_classes": null, "length": 1274}
{"pred": "           return View(\"Form\", new EventViewModel());\n        }\n        // Add a relationship (EventDelegate) between Event (parent) Delegate (child)\n        [HttpPost]\n        [RolesRequired(\"Admin\",\"SaveEventDelegate\")] \n        public ActionResult SaveEventDelegate(EventViewModel", "answers": ["            return View(\"Form\", new DelegateViewModel());"], "all_classes": null, "length": 1017}
{"pred": "                       var circle = (Circle) obj;\n                        return string.Format(\"({0},{1},{2})\", circle.X, circle.Y, circle.Radius);\n                    }\n                    return obj.ToString();\n                }\n            }\n            catch (Exception ex)", "answers": ["                        var circle = (Circle) obj;"], "all_classes": null, "length": 668}
{"pred": "   def checkDownload(self, *args, **kwargs):\n        res = self.load(\"http://www.fileserve.com/link-checker.php\", *args, **kwargs)\n        return json_loads(res)\n    def load(self, url, *args,", "answers": ["                elif res['error_code'] in [\"606\", \"607\", \"608\"]:"], "all_classes": null, "length": 545}
{"pred": "\t\t\tif (path.Count > 0)\n\t\t\t{\n\t\t\t\tvar closest = path.Min(p => p.DistanceTo(self.Location));\n\t\t\t\treturn closest;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n", "answers": ["\t\t\tif (path.Count > 0)"], "all_classes": null, "length": 747}
{"pred": "           rc = utils.subprocess_call(self.logger, \"dhcpd -f -q\", shell=True)\n            if rc != 0:\n                self.logger.error(\"dhcpd -f failed\")\n                return False\n        return True\n    def", "answers": ["                       self.logger.error(\"%s failed\" % service_name)"], "all_classes": null, "length": 750}
{"pred": "       return Event.newBuilder();\n    }\n}\n\nPlease complete the code by implementing the methods and fields as per the code snippet provided.\n\nNote:\n\n* The code is using the slf4j logging library, so you will need to add the slf4j-api and", "answers": ["        long t = getMissionTime();"], "all_classes": null, "length": 575}
{"pred": "           while (true)\n            {\n                upBranch = upBranch.Successor;\n                if (upBranch == PpmContext.ZERO)\n                {\n                    goto NoLoop;\n                }\n                stateIndex++;\n                if (stateIndex >= MAX", "answers": ["            if (state != PpmState.ZERO)"], "all_classes": null, "length": 2203}
{"pred": "               return new DicomAttributeSL(tag, bb);\n            });\n        /// <summary>\n        /// The Signed Integer VR.\n        /// </summary>\n        public static readonly DicomVr SIvr = new DicomVr(\"SI\", false, false, true,", "answers": ["                return new DicomAttributeSL(tag, bb);"], "all_classes": null, "length": 1113}
{"pred": "\t\t\tsessionValuesArray.Add(tFull[3]);\n\t\t}\n\t\tSession selectedSession = (Session)session_l[0];\n\t\tstring selectedTest = (string)sessionValuesArray[0];\n\t\tEventType selectedEventType = (EventType)store", "answers": ["\t\t\tint sessionID = Convert.ToInt32(tFull[3]);"], "all_classes": null, "length": 2057}
{"pred": "       o = self.file(b'abcdefghij')\n        insert_bytes(o, 4, 9)\n        self.assertEquals(b'abcdefghij\\x00\\x00ij', self.read(o))\n    def test_larger", "answers": ["        o = self.file(b'abcdefghij')"], "all_classes": null, "length": 694}
{"pred": "   <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>\n    <td><?cs var:sdk.win64_bundle_checksum ?></td>\n  </tr>\n  <tr>\n    <td>Linux 32", "answers": ["    <td><?cs var:sdk.win64_bundle_bytes ?> bytes</td>"], "all_classes": null, "length": 478}
{"pred": "   ax.plot(cr['runs'], cr['combined'][app][VC]['durations'], 'o-')\n    ax.fill_between(cr['runs'], cr['combined'][app][VC]['durations'],\n                     csi_95,", "answers": ["    ymin = csi_95[0]"], "all_classes": null, "length": 565}
{"pred": "   def test_GID(self):\n        \"\"\"\n        Check GID/UID switches when current effective GID is non-root.\n        \"\"\"\n        self.mockos.egid = 1\n        self.mockos.euid = 1\n        util.runAs", "answers": ["        self._testUIDGIDSwitch(1, 0, 2, 1, [0, 2, 0, 1], [1, 0])"], "all_classes": null, "length": 2189}
{"pred": "\t\t\t\t\tg.setColor(MetalLookAndFeel.getControlColor());\n\t\t\t\t\tg.drawLine(x + controlSize/2, y + controlSize/2, x + controlSize/2, y + controlSize);\n\t\t\t\t\t", "answers": ["\t\t\t\t\tdrawPressed3DBorder(g, x, y, controlSize, controlSize);"], "all_classes": null, "length": 518}
{"pred": " def simulateClassifier(self, knn, patternDict, testName):\n    failures = \"\"\n    for i in range(len(patternDict)):\n      pattern = patternDict[i]['pattern']\n      category = patternDict[i]['category']\n      if knn.distance", "answers": ["  winner, _inferenceResult, _dist, _categoryDist = knn.infer(v[2])"], "all_classes": null, "length": 685}
{"pred": "       final int index = (offset - headerSize()) / elementKind.width.numberOfBytes;\n        mirror.writeElement(kind, index, value);\n    }\n    @HOSTED_ONLY\n    public void writeArray(Kind kind, ObjectMirror mirror, int offset,", "answers": ["        final int index = (offset - headerSize()) / elementSize();"], "all_classes": null, "length": 681}
{"pred": "           if (string.IsNullOrEmpty(relativePath)) {\n                return null;\n            }\n            // try to resolve relative path as a file in the project directory\n            string file = FileUtils.CombinePaths(ProjectBase.GetDirectory(ProjectBase.CurrentProject), relativePath", "answers": ["            if (!String.IsNullOrEmpty(relativePath)) {"], "all_classes": null, "length": 1081}
{"pred": "   return string.format(*args, **kwargs)\ndef get_version():\n    try:\n        import version\n        return version.get_version()\n    except ImportError:\n        return 'Unsupported Python version'\ndef get_platform():\n    try:\n        import", "answers": ["    return string.format(*args, **kwargs)"], "all_classes": null, "length": 884}
{"pred": "       Dcopy.dcopy(i16, paramArrayOfDouble12, i15 - 1 + (1 - 1) * paramInt8 + paramInt7, 1, paramArrayOfDouble12, i27 - 1 + paramInt22, 1", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "\t\t\t\tstr += \"\t\" + s.name + \" (\" + s.GetType().ToString() + \")\\n\";\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\t}\n\t\n\tpublic class State {\n\t\tpublic string name;\n", "answers": ["\t\t\t\tstr += s.ToString() + \"\\n\";"], "all_classes": null, "length": 1300}
{"pred": "                   CollisionObjects = new[] { CollisionObjectTypes.YasuoWall },\n                });\n            #endregion Lucian\n            #region Lux\n            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Lux\",\n                   ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "\t\twhen(securityContext.getCurrentUser()).thenReturn(new EmfUser(\"test.user\", \"test.password\"));\n\t}\n}\n */", "answers": ["\t\tEmfUser user = new EmfUser(\"admin@test.tenant\");"], "all_classes": null, "length": 505}
{"pred": "       self.assertRaises(subprocess.CalledProcessError, lambda: subprocess.Popen(\n            ['/bin/bash', '-c', 'echo x']))\n\nI am trying to test the code provided above, but I am getting an error message that I cannot understand.", "answers": ["        context = testlib.TestContext()"], "all_classes": null, "length": 426}
{"pred": "\t\t\tPropertyService.Start();\n\t\t\tResourceService.Start();\n\t\t\tAddInManager.Start();\n\t\t\tMessageService.Start();\n\t\t\tLoggingService.Start();\n\t\t\t\n\t\t\t// start the application\n\t\t\tApplication.", "answers": ["\t\t\tif (configDirectory == null)"], "all_classes": null, "length": 753}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tinternal abstract bool IsColumnContained (DataColumn column);"], "all_classes": null, "length": 743}
{"pred": "       self.Dialog.setWindowTitle(\"Pyslvs_ui\")\n        self.Dialog.show()\n        sys.exit(app.exec_())\n    def tearDown(self):\n        QtCore.QObject.disconnect(self.verticalLayout_2, QtCore", "answers": ["        self.button_box = QtWidgets.QDialogButtonBox(Dialog)"], "all_classes": null, "length": 519}
{"pred": "\n            } else {\n                // Display the TAF details\n                showTaf( wxs );\n            }\n            return super.onResult( result );\n        }\n    }\n    private void showTaf( Cursor wxs ) {\n        String stationId = wxs.", "answers": ["                TextView tv =(TextView) findViewById( R.id.status_msg );"], "all_classes": null, "length": 986}
{"pred": "\t\t\t\tstring continents = \"from Continent\";\n\t\t\t\tint results = s.CreateQuery(continents).List().Count;\n\t\t\t\tQueryStatistics continentStats = stats.GetQueryStatistics(continents);\n\t\t\t\tAssert.Is", "answers": ["\t\t\t\tvar r = s.CreateCriteria<Country>().List();"], "all_classes": null, "length": 596}
{"pred": "               uiCRCITTSum = (uiCRCITTSum >> 8) ^ polynom ^ (uiByteValue & 0xFF);\n            }\n            return (ushort)uiCRCITTSum;\n        }\n        private ulong reflect(ulong cr", "answers": ["                for (int iBitIndex = 0; iBitIndex < 8; iBitIndex++)"], "all_classes": null, "length": 1212}
{"pred": "\t\treturn 1;\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\treturn hasSpeedModule() ? 5 : 10;"], "all_classes": null, "length": 1639}
{"pred": "           return new IHyperlinkDetector[] { \n                    new CeylonHyperlinkDetector() };\n        }\n        return new IHyperlinkDetector[] { \n                new CeylonJavaBackendHyperlinkDetector(controller),\n                new Cey", "answers": ["            return new IHyperlinkDetector[0];"], "all_classes": null, "length": 548}
{"pred": "       self.l.addWidget(self.drawingModeWidget)\n        self.l.addWidget(Object3DPrivateInterface(self))\n        self.l.addWidget(VerticalSpacer(self))\n        self.setWindowTitle('Object3D Properties')\n        self", "answers": ["        self.aspectWidget = Object3DAspect(self)"], "all_classes": null, "length": 1044}
{"pred": "\t\t\t\tcase 3: // Set location\n\t\t\t\t\t{\n\t\t\t\t\t\ttoSet = new Point2D( m_Mobile.Location );\n\t\t\t\t\t\tshouldSet = true;\n\t\t\t\t\t\tshouldSend = true;\n", "answers": ["\t\t\t\tcase 3: // Use values"], "all_classes": null, "length": 886}
{"pred": "                    for (Object valueChoice : valueChoices)\n                     {\n                        Object convertedChoice = selectConverter.convert(valueChoice);\n                        if (convertedChoice.equals(value))\n                        {\n                           chosenObj = valueChoice;\n                           break;\n                ", "answers": ["                     String valueLabel = selectConverter.convert(value);"], "all_classes": null, "length": 764}
{"pred": "\t\t\tfor (int k=0; k<maxChangesRecorded; k++) {\n\t\t\t\tfractionWithAmount[i][j][k] = fractionWithAmount[i][j][k]+totalWithAmount[i][j][k]/totalChanges[i][j];", "answers": ["\t\t\t\tif (i!=j) {"], "all_classes": null, "length": 1027}
{"pred": "\nNote: The above code is just an example and may not work as is. You will need to modify it to suit your specific requirements and environment.\n\nPlease note that the above code is just an example and may not work as is. You will need to modify it to suit your specific requirements and environment.", "answers": ["                            foreach (KeyValuePair<int, int> unpricedLine in unpricedLines) {"], "all_classes": null, "length": 1177}
{"pred": "\t\t\tget { throw new NotImplementedException (); }\n\t\t\tset { throw new NotImplementedException (); }\n\t\t}\n\t}\n}\n```\n\nThis code is a class `ClientOperation` that represents a client operation in a service operation. It has various", "answers": ["\t\t\tget { throw new NotImplementedException (); }"], "all_classes": null, "length": 629}
{"pred": "       final Subject mockCurrentSubject = EasyMock.createMock(Subject.class);\n        final Account mockAccount = EasyMock.createMock(Account.class);\n        final Group mockGroup = EasyMock.createMock(Group.class);\n        final Database mockDatabase = Easy", "answers": ["        final Subject mockUser = EasyMock.createMock(Subject.class);"], "all_classes": null, "length": 1006}
{"pred": "\t\t\treturn viewport.ToVector2 () * (v / viewport.ToVector2 ().Magnitude);\n\t\t}\n\t}\n}\n}\n```\nThis code is a utility class for working with vectors and other geometric calculations in a game engine. It provides a number", "answers": ["\t\t\tVector2 max = viewport.ToVector2 ();"], "all_classes": null, "length": 882}
{"pred": "e = endpoint_key(vlan=10, mac_hi=0x1234, mac_lo=0x5678)\nprint(type(e))\n\nNote: In the above code, I have only provided the code for the classes that are relevant to your", "answers": ["__all__ = ['endpoint_key', 'endpoint_value', 'endpoint_stats']"], "all_classes": null, "length": 399}
{"pred": "\t\t\t\t\t// disconnect the client\n\t\t\t\t\tRemoveClient(i, m_workerSocketList, disconnect_client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic void Send(string[] messages)\n\t\t", "answers": ["\t\t\t\t    RemoveClient(i, m_workerSocketList, disconnect_client);"], "all_classes": null, "length": 2031}
{"pred": "           switch (type) {\n                case Step:\n                    logDataSet(list);\n                    break;\n                case Activity:\n                    logDataSet(list);\n                    break;\n            }\n            mRequestMap.remove(requestId);\n        }\n    }\n   ", "answers": ["            for(Bucket bucket : list) {"], "all_classes": null, "length": 768}
{"pred": " PrintLongLine('                               %s%d<ReturnType%s>,' %\n                (parent_class, exec_count, exec_type_str))\n\ndef GenerateCallbacks(bind_count,\n                       exec_count,\n                       function_name,\n                ", "answers": ["  if bind_count > 0 or exec_count > 0:"], "all_classes": null, "length": 1549}
{"pred": "   return HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\")\n    \"\"\"\n    response = HttpResponse(\n        simplejson.dumps(items), content_type=\"application/json\")\n    response['Content-Disposition'] = (\n       ", "answers": ["    Returns a range query in JSON (full-calendar) format."], "all_classes": null, "length": 722}
{"pred": "                       VarNode(\"score\"), null/* c */, Scope.DEFAULT_CONTEXTS));\n                whereClause.addChild(serviceGraphPattern);\n            }\n        }\n        //\n        // Test the optimizer.\n        final ASTSearchOptimizer optimizer =", "answers": ["                        new VarNode(\"score\"), null/* c */,"], "all_classes": null, "length": 644}
{"pred": "       if request.method == \"POST\":\n            form = UserForm(request.POST)\n            if form.is_valid():\n                form.save_form()\n                self._handle_set_is_active()\n                return HttpResponseRedirect(self.get_success_url())", "answers": ["        self.object = self.get_object()"], "all_classes": null, "length": 558}
{"pred": "     get { return this.ResolvedAssembly.PublicKeyToken; }\n    }\n    #region IAssemblyReference Members\n    IAssembly IAssemblyReference.ResolvedAssembly {\n      get { return this.ResolvedAssembly; }\n    }\n    AssemblyIdentity IAssemblyReference.Unified", "answers": ["      get { return this.ResolvedAssembly.PublicKeyToken; }"], "all_classes": null, "length": 1633}
{"pred": "\n            // Perform the TFQMR iteration\n            for (int k = 0; k < 100; k++)\n            {\n                // Compute the QR factorization of the matrix\n                // Q = QR\n                // and compute the matrix norm\n                // norm", "answers": ["            var pseudoResiduals = new DenseVector(input);"], "all_classes": null, "length": 1146}
{"pred": "\t\t\tApfloat median = sortedNumbers[left];\n\t\t\treturn new Apfloat[] {median};\n\t\t} else {\n\t\t\tApfloat leftMedian = sortedNumbers[left];\n\t\t\tApfloat rightMedian = sortedNumbers[right];\n\t\t", "answers": ["\t\t\treturn new Apfloat[] {sortedNumbers[left]};"], "all_classes": null, "length": 685}
{"pred": "               if sample_count[v, K] > 0:\n                    A[v, K] = 1\n                    L[v] = right - left\n                    sample_count[v, K] -= 1\n                    if sample_count[v, K] ==", "answers": ["                sample_count[v] -= sample_count[edge.child]"], "all_classes": null, "length": 2596}
{"pred": "       for item in self.items:\n            item['ocean-unique-id'] = item['id']\n            item['id'] = item['uuid']\n            item['timestamp'] = item['created_at']\n            item['metadata__updated_on'] = item['updated_on", "answers": ["        es_mapping = ESMapping.from_json(index_name=self.enrich_index,"], "all_classes": null, "length": 630}
{"pred": "\t\t\t\t\t\t\t\t\t\tvar bot = botController.CreateBot(slot.Value.Name);\n\t\t\t\t\t\t\t\t\t\tslot.Value.AddBot(bot);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t", "answers": ["\t\t\t\t\t\t\t\t\t\tvar bot = botNames.Random(Game.CosmeticRandom);"], "all_classes": null, "length": 690}
{"pred": "\t\t\t}\n\t\t\treturn base.ToString();\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\t\treturn base.ToString() + \"\\n\" + _rootCause;"], "all_classes": null, "length": 697}
{"pred": "       return frame_header + padding_bytes + self.data\n    def __repr__(self):\n        return '<DataFrame length: {}, flags: {}, stream_id: {}, data: {}>'.format(\n            len(self),\n            '<{}>'.format(','.join(str", "answers": ["        pad_low_and_high = struct.pack('!BB', pad_high, pad_low)"], "all_classes": null, "length": 652}
{"pred": "           var b = cluster.BoundaryCurve.BoundingBox;\n            var bb = new Rectangle(b.Left, b.Bottom, b.Right, b.Top);\n            if (bb.Width < 1 || bb.Height < 1)\n                throw new", "answers": ["            foreach (var child in cluster.Clusters.Concat(cluster.Nodes)) {"], "all_classes": null, "length": 936}
{"pred": "\nvoid btKinematicCharacterController::stepUp(btCollisionWorld* collisionWorld)\n{\n\t// ...\n}\nvoid btKinematicCharacterController::stepDown(btCollisionWorld* collisionWorld, double dt)\n{\n\t// ...\n}\nvoid b", "answers": ["\tm_maxSlopeCosine = btCos(slopeRadians);"], "all_classes": null, "length": 2149}
{"pred": "       for (ExpressionTree initializer : initializers) {\n            if (canBeLeaked(initializer)) {\n                checker.report(Result.failure(\"unique.leaked\"), initializer);\n            }\n        }\n        return super.visitNewArray(node, p", "answers": ["        if (initializers != null && !initializers.isEmpty()) {"], "all_classes": null, "length": 1063}
{"pred": "\t\t\tif (nbttagcompound != null)\n\t\t\t{\n\t\t\t\tNBTTagCompound nbttagcompound1 = nbttagcompound.getCompoundTag(\"display\");\n\t\t\t\tif (nbttagcompound1 !=", "answers": ["\t\t\tif (nbttagcompound == null)"], "all_classes": null, "length": 484}
{"pred": "\t\t\t\t_returnType = new ClassItem(Context, TypeName, typeAttribute.Value);\n\t\t\t}\n\t\t}\n\t\t//--------------------------------------------------------------------\n\t\t// Methods (overridden)\n\t\t//--------------------------------------------------------------------\n\t\tprotected", "answers": ["\t\t\t\tif (typeAttribute != null)"], "all_classes": null, "length": 715}
{"pred": "\t\t\tusing (TrackBar myTrackBar = new TrackBar()) {\n\t\t\t\tmyTrackBar.Width = 200;\n\t\t\t\tmyTrackBar.Height = 250;\n\t\t\t\tmyTrackBar.Orientation = Orientation.Vertical;", "answers": ["\t\t\tAssert.AreEqual(handle, handle, \"Removes warning\");"], "all_classes": null, "length": 643}
{"pred": "\t\t\tdoReturn(Collections.singleton(annotationType)).when(lookup).findAll();\n\t\t\tCollection<? extends ImmutableClassType> result = instrumentation.addInstrumentationPoints(agentConfiguration, Collections.singleton(instrumentationApplier));\n\t\t\t//", "answers": ["\t\t\tInterfaceType interfaceType = new InterfaceType(\"\");"], "all_classes": null, "length": 686}
{"pred": "\t\tif (isImplicit != other.isImplicit)\n\t\t\treturn false;\n\t\tif (postdominators == null) {\n\t\t\tif (other.postdominators != null)\n\t\t\t\treturn false;\n\t\t} else if (!postdomin", "answers": ["\t\tif (postdominators == null) {"], "all_classes": null, "length": 1449}
{"pred": "           int min2 = wideLExtent[end][r.rightChild];\n            int min = (min1 > min2 ? min1 : min2);\n            if (min > narrowL) { // can this right constituent stretch far enough to reach the left constituent?\n              continue", "answers": ["            int min2 = wideLExtent[end][rightState];"], "all_classes": null, "length": 1079}
{"pred": "```\n        'rsync -avz --files-from=- --exclude=pgdata/data/pg_stat_statements.sql',\n```\n        'src', 'dst'],\n        shell=False, env=None,\n        stdout=PIPE, stderr=PIPE", "answers": ["                'rsync', '-rLKpts', '--delete-excluded', '--inplace',"], "all_classes": null, "length": 2433}
{"pred": "\t\t\tvar state = process.GetOrCreateData<ProcessState>();\n\t\t\tstate.IgnoreThreadsChangedEvent = false;\n\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;\n\t\t\tprocess.DelayedIsRunningChanged -= DbgProcess_", "answers": ["\t\t\tprocess.IsRunningChanged -= DbgProcess_IsRunningChanged;"], "all_classes": null, "length": 924}
{"pred": "\t\twriter.attribute( null, \"b\", String.valueOf( b ) );\n\t\twriter.endTag( null, name );\n\t}\n\t/**\n\t * Writes an appearance with a material identifier.\n\t *\n\t * @param   appearance   Appearance to be written", "answers": ["\t\twriter.attribute( null, \"b\", String.valueOf( b ) );"], "all_classes": null, "length": 2472}
{"pred": "\t\tif ( (proxyThat instanceof Contact) && (((Contact)proxyThat).getId() == this.getId()) ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t/** HashCode implementation.\n\t * @see java.lang", "answers": ["\t\tif (aThat instanceof HibernateProxy) {"], "all_classes": null, "length": 839}
{"pred": "   LSolv.Set_R_Mats()\n    LSolv.dt = dt\n    LSolv.kT = read.kT\n    LSolv.tolerance = read.solver_tolerance\n    LSolv.num_rejections_wall", "answers": ["\t    if total_rej == 1:"], "all_classes": null, "length": 801}
{"pred": "       if cdata is None:\n            # This is an empty Subtensor, remove it\n            return [node.inputs[0]]\n        else:\n            # This is a non-empty Subtensor, check if it takes the full input\n            # and if so, remove it\n           ", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "   class Meta:\n        model = Group\n        fields = ('id', 'name')\n        helper_class = SubmitCancelFormHelper\n        helper_cancel_href = \"{% url 'index' %}\"\n        widgets = {'groups': forms.CheckboxSelectMultiple}\n       ", "answers": ["        self.member_groups = self.user.get_member_groups(self.groups)"], "all_classes": null, "length": 746}
{"pred": "                   return fn(*arg, **kw)\n        return fn(**kw)\n    def after_compile(self, query):\n        \"\"\"Receive the :class:`.Query` object after it has been composed\n        into a core :class:`.Select` object.\n        This event is", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "           self.runtime.add_block_as_child_node(self.get_icon_class(), xml_object)\n\nPlease help me complete this code. I am not able to understand the logic behind it.\n\nAnswer:\nThe code you provided is a Python module that defines an x", "answers": ["            show_str = u'<{tag_name} sources=\"{sources}\" />'.format("], "all_classes": null, "length": 801}
{"pred": "       for change in data_model_changes:\n            if isinstance(change, ArrayValueChange):\n                self.update_filtered_data()\n                self.update_filter(change.axis, change.indices)\n                self.update_bg_value()\n\nI have", "answers": ["                          for key, (old_value, new_value) in data_model_changes.items()]"], "all_classes": null, "length": 947}
{"pred": "\t\t\telse if (Method != null)\n\t\t\t{\n\t\t\t\tif (Class == null)\n\t\t\t\t{\n\t\t\t\t\tStaticCompiler.IssueMessage(Message.MapXmlError, \"not implemented: cannot use 'method' attribute without '", "answers": ["\t\t\telse if (Class != null && type == null)"], "all_classes": null, "length": 2841}
{"pred": "\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);\n\t\t\tthis.objYLabel.TabIndex = 19;\n\t\t\tthis.objYLabel.Text = \"Description...\";\n\t\t\t//", "answers": ["\t\t\tthis.objYLabel.Size = new System.Drawing.Size(200, 32);"], "all_classes": null, "length": 722}
{"pred": "       c = self.get(\"mail/syncmail.5\")\n        self.assertEqual(c.who, \"warner\")\n        self.assertEqual(set(c.files), set([\"buildbot/changes/freshcvsmail.py\"])\n        self.assertEqual", "answers": ["        c = self.getNoPrefix(\"mail/syncmail.5\")"], "all_classes": null, "length": 615}
{"pred": "       if (termData == null) {\n            termData = new ArrayListValuedHashMap<>();\n            this.data.put(row.get(ID_KEY), termData);\n        }\n        termData.addAll(csvData);\n    }\n    protected abstract CSVFormat setupC", "answers": ["        if (termData == null) {"], "all_classes": null, "length": 987}
{"pred": "\t\tif(isPassiveFlower()) {\n\t\t\tint mana = getMana();\n\t\t\tif(mana > 0) {\n\t\t\t\tplayer.getHeldItem(WandSlot).setMana(mana);\n\t\t\t\treturn", "answers": ["\t\tif(player == null)"], "all_classes": null, "length": 639}
{"pred": "           float representativity = this.getRepresentativity(component, c);\n            intrinsicCohesion += representativity * representativity;\n        }\n        return intrinsicCohesion;\n    }\n}\n}\n\nPlease help me complete the code by implementing the remaining methods", "answers": ["            intrinsicCohesion += this.getRepresentativity(component, c);"], "all_classes": null, "length": 569}
{"pred": "   if are_equal:\n        # Upgrade successful\n        logger.info(\"Upgrade successful for record %s\" % recid)\n        return True\n    else:\n        # Upgrade failed\n        logger.info(\"Upgrade failed for record %s\" % recid)\n       ", "answers": ["                                if not (docformat in flags[flagname][version]):"], "all_classes": null, "length": 1095}
{"pred": "\t\t\te.Cancel = true;\n\t\t\tDispose();\n\t\t}\n\t\tprivate void menuItem1_Click(object sender, System.EventArgs e)\n\t\t{\n\t\t\tComputerAddDialog cad=new ComputerAddDialog(computerMgmt);", "answers": ["\t\t\tArrayList comp = this.computerMgmt.getComputerCollection();"], "all_classes": null, "length": 2301}
{"pred": "   for (java.util.Date date : exceptionDates) {\n      exDateList.add(date);\n    }\n    return new ExDate(exDateList);\n  }\n  private static Date toDatable(Date date, int hour) {\n    Date result = new", "answers": ["    for (java.util.Date anExceptionDate : exceptionDates) {"], "all_classes": null, "length": 783}
{"pred": "\t\tsourceEventBinding.dataTarget = sourceComponent;\n\t\tsourceEventBinding.dataEventName = SourceEventName;\n\t\tsourceEventBinding.bind();\n\t}\n\tprivate void bindTargetEvent()\n\t{\n\t\ttargetEventBinding = gameObject.AddComponent<df", "answers": ["\t\tsourceEventBinding.DataSource = new dfComponentMemberInfo()"], "all_classes": null, "length": 1021}
{"pred": "           // Parse the JSON data\n            Map<String, Object> spanConfig = new LinkedHashMap<>();\n            ObjectMapper mapper = new ObjectMapper();\n            mapper.readValue(jsonData, spanConfig);\n            // Validate the JSON data\n            validateSpanConfig(spanConfig);\n", "answers": ["            Gson gson = new Gson();"], "all_classes": null, "length": 2177}
{"pred": "\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t\tpublic ImageHelper(ims.framework.utils.Image image, String path)\n\t\t\t{\n\t\t\t\tsuper(image, path);\n\t\t\t}\n\t\t}", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "       return rnd.nextInt(size);\n}\n}\n\nPlease complete the code by filling in the missing method bodies.\n\nNote:\n\n* In the `runSql()` method, you need to return a list of results, which can be a list of maps or a list of objects", "answers": ["        double value = (size - 1) * rnd.nextDouble();"], "all_classes": null, "length": 669}
{"pred": "lam = LinkAnnoManagement()\nlam.make_von_den_driesch_equiv(project_uuid='A5DDBEA2-B3C8-43F9-8151-33343CBDC857')\nlam.replace_", "answers": ["                    la = LinkAnnotation()"], "all_classes": null, "length": 1128}
{"pred": "           }\n        }\n        private short field_1_font_index;\n        private short field_2_format_index;\n        private short field_3_cell_options;\n        private short field_4_alignment_options;\n        private short field_5_indention", "answers": ["            buffer.Append(\"          .shrinktoft= \").Append(ShrinkToFit)"], "all_classes": null, "length": 2537}
{"pred": "\t\t\t\t// Half-width kana.\n\t\t\t\tvalue = (ch - 0xFF60) * 2;\n\t\t\t\tvalue = ((int) (cjkToJis [value])) |\n\t\t\t\t\t\t(((int)(c", "answers": ["\t\t\t\tvalue = ch - 0xFF60 + 0x8EA0;"], "all_classes": null, "length": 1301}
{"pred": "```\n    obj.operands = [composer([env.cst(off1.int(-1),10),env.cst(off2.int(-1),10)])]\n```\nExpected output:\n```\n    obj.operands = [composer([", "answers": ["    if obj.mnemonic in (\"LD_A\", \"LEA\"): dst = env.A[a]"], "all_classes": null, "length": 7935}
{"pred": "\t\t\tJRPropertiesMap properties = new JRPropertiesMap();\n\t\t\tproperties.load(stream);\n\t\t\treturn properties;\n\t\t}\n\t\tcatch (IOException e)\n\t\t{\n\t\t\tthrow new JRException(e);\n\t\t}", "answers": ["\t\t\tstream = location.openStream();"], "all_classes": null, "length": 1068}
{"pred": "           return this == CREATIVE;\n        }\n    }\n}\nPlease complete the code by filling in the missing variables and methods.", "answers": ["            return this == CREATIVE;"], "all_classes": null, "length": 497}
{"pred": "\t\t\tCommonSecurityDescriptor csd = new CommonSecurityDescriptor\n\t\t\t\t(false, false, ControlFlags.None, null, null, null, null);\n\t\t\tcsd.DiscretionaryAcl = new DiscretionaryAcl (true, true, 0", "answers": ["\t\t\tSecurityIdentifier userSid = new SecurityIdentifier (\"SY\");"], "all_classes": null, "length": 692}
{"pred": "   def run(self):\n        self.put(AcoustidSubmissionThread(results, self.__process, self.__done))\n        self.put(LookupResult(results, self.__process, self.__done))\n        self.put(AcoustidSubmissionThread(results,", "answers": ["        for i, result in enumerate(results):"], "all_classes": null, "length": 864}
{"pred": "       // check for outdated RPCs\n        foreach (var rpc in PhotonNetwork.RPCs)\n        {\n            if (rpc.IsOutdated())\n            {\n                additionalRpcs.Add(rpc.Name);\n            }\n        }\n       ", "answers": ["        HashSet<string> currentRpcs = new HashSet<string>();"], "all_classes": null, "length": 2652}
{"pred": "\n        // Get the message's echo area\n        // ...\n        // Set up the layout for the message\n        // ...\n        // Set up the click listeners for the buttons\n        // ...\n        // Set up the layout for the message's content\n        // ...\n        //", "answers": ["        if (!Config.isKDEConnectInstalled) {"], "all_classes": null, "length": 551}
{"pred": "           op_cc = np.dot(self.symmetry.op_scc[s], op_cc)\n            if time_reversal:\n                op_cc = np.dot(op_cc, self.symmetry.op_scc[s].T)", "answers": ["            ik = self.bz2ibz_k[k]"], "all_classes": null, "length": 906}
{"pred": "       CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);\n        utkastRequest.setPatientEfternamn(Strings.repeat(\"a\", 255));\n        Response response = utkastController.createUtkast(intygsTyp", "answers": ["        CreateUtkastRequest utkastRequest = buildRequest(intygsTyp);"], "all_classes": null, "length": 675}
{"pred": "\t\t\t\t\tforeach(ILNode child in block.Body) {\n\t\t\t\t\t\tif (child is ILBasicBlock) {\n\t\t\t\t\t\t\tprevChildAsBB = (ILBasicBlock)child;\n\t\t\t\t\t\t\tflatBody.Add", "answers": ["\t\t\t\tforeach (ILNode child in block.GetChildren()) {"], "all_classes": null, "length": 2070}
{"pred": "\t    if (IsRagdoll) {\n\t\treturn;\n\t    }\n\t    IsRagdoll = ragdoll;\n\t    if (delay > 0f) {\n\t\tmDistanceSinceLastFootstep = 0f;\n\t\tmDistance", "answers": ["\t    if (mConvertingToRagdoll) {"], "all_classes": null, "length": 2058}
{"pred": "   def __init__(self, config={}):\n        super().__init__(config)\n        self.layer_type = LayerType.fracture\n        self.name = \"Fracture\"\n        self.top = ClassFactory( [InterfaceNodeSet, InterpolatedNode", "answers": ["    _not_serialized_attrs_ = ['layer_type', 'top_type']"], "all_classes": null, "length": 878}
{"pred": "       out[outOff + 3] = (byte)((num >> 24) & 0xff);\n        out[outOff + 2] = (byte)((num >> 16) & 0xff);\n        out[outOff + 1] =", "answers": ["            out[outOff + 3] = (byte)(num >>> 24);"], "all_classes": null, "length": 1083}
{"pred": "           super( source );\n        }\n        public FilteredPatternFinder( Iterable<PatternMatch> source,\n            final Map<String, PatternNode> objectVariables,\n            boolean includeOptional )\n        {\nNext line of code:\n            super( source, includeOptional );\n", "answers": ["            super( source, new Predicate<PatternMatch>()"], "all_classes": null, "length": 1124}
{"pred": "   return slice_json\ndef transform_values_holder_xml_json_to_json(values_xml_json, format = None):\n    comments = []\n    values_json = collections.OrderedDict()\n    for value in values_xml_json:\n        if format is", "answers": ["        elif key == 'TAUX':"], "all_classes": null, "length": 954}
{"pred": "           if (ClientSettings.ICON_CLOSE_FRAME_SELECTED!=null)\n              btn.setIcon(new ImageIcon(ClientUtils.getImage(ClientSettings.ICON_CLOSE_FRAME_SELECTED)));\n          }\n        }\n     ", "answers": ["            InternalFrame f = (InternalFrame)buttons.get(btn);"], "all_classes": null, "length": 769}
{"pred": "   servers.addServersFromFile(getServerFile())\n    servers.getBestServer()\n    getSocket()\n    getCommandResult(\"isValid\", servers.best)\n    getCommandResult(\"argCount\", servers.best)\n    getNearestLC(\"J200", "answers": ["    elif sys.argv[1] == '--list':"], "all_classes": null, "length": 866}
{"pred": "   for (int y = 0; y < p.getRasterHeight(); y+= toolDiameterInPx/2)\n    {\n      for (int x = leftToRight ? 0 : p.getRasterWidth() - 1; \n        (leftTo", "answers": ["    move(out, Util.px2mm(offset.x, dpi), Util.px2mm(offset.y, dpi));"], "all_classes": null, "length": 1057}
{"pred": "                   db.update(Db.Table1.TABLE_NAME, new String[] {Db.Table1.ID_GROUP + \" = ?\" }, new String[] {String.valueOf(newId)});\n                    //Update budget items\n                    db.update(Db.Table4.", "answers": ["\t\t\t\t\tContentValues cv = new ContentValues();"], "all_classes": null, "length": 666}
{"pred": "               m_ptr = IntPtr.Zero;\n            }\n        }\n        #endregion\n    }\n}\n}\n\nPlease help me complete the code. I am trying to use the `WinVerifyTrust` function to check if a file is signed with a trusted certificate.", "answers": ["                else if (m_meth == AllocMethod.CoTaskMem)"], "all_classes": null, "length": 459}
{"pred": "```\n# Add a new backend to the authentication system.\nAUTHENTICATION_BACKENDS = AUTHENTICATION_BACKENDS + ('myapp.auth.MyCustomBackend',)\n```\nPlease complete the code with the new backend you want to add.", "answers": ["LOGOUT_URL = '/accounts/logout/'"], "all_classes": null, "length": 2324}
{"pred": "\t\t\tvar item = queue.FirstOrDefault(pi => pi.Item == itemName);\n\t\t\tif (item != null)\n\t\t\t{\n\t\t\t\tqueue.Remove(item);\n\t\t\t\tif (numberToCancel > 0)\n\t\t", "answers": ["\t\t\tfor (var i = 0; i < numberToCancel; i++)"], "all_classes": null, "length": 1183}
{"pred": "       self.infoLabel.setText(infoText)\n        self.infoLabel.setVisible(True)\n        self.infoLabel.setAlignment(QtCore.Qt.AlignCenter)\n        self.infoLabel.setWordWrap(True)\n        self.infoLabel.set", "answers": ["        infoText += \" file\" if numberOfFiles==1 else \" files\" "], "all_classes": null, "length": 886}
{"pred": "       code = re_m4.sub(r'%(\\1)s', code)\n        with open(self.outputs[0], 'w') as f:\n            f.write(code)\n        return self.outputs[0]\n    def __init__(self,", "answers": ["        code = code.replace('%', '%%')"], "all_classes": null, "length": 2292}
{"pred": "       result = self._planningExecutorClient.get_result()\n        rospy.loginfo(\"Received the result from PlanExecutorServer:\")\n        return result\n\n#=====================================================================================================================\n#\n#\n#\n#\n#\n#\n#\n#", "answers": ["        result = self._planningExecutorClient.get_result()"], "all_classes": null, "length": 747}
{"pred": "\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ][ idx - reactorExtent ] + chemical[ 0 ][ idx + reactorExtent - 2 ]\n\t\t\t\t\t\t\t\t\t\t- 4 * chemical[ 0 ", "answers": ["\t\t\t\t\t\t\t\t\t+ chemical[ 0 ][ idx + reactorExtent ], hdiv0 );"], "all_classes": null, "length": 1036}
{"pred": "               columnTypes.add(typeManager.nextTimestampAdapter().of(timestampFormatFactory.get(pattern), timestampLocale));\n                break;\n            default:\n                columnTypes.add(typeManager.nextColumnAdapter().of(type));\n                break;\n        }\n    }\n", "answers": ["                if (pattern == null) {"], "all_classes": null, "length": 839}
{"pred": "\t\t\treturn base.ReceberAutoIncremento(qs, entity);\n\t\t}\n\t}\n}\n```\nPlease note that this is a generated code and you should not try to modify it directly. Instead, you should create a new class that inherits from the abstract class provided", "answers": ["            entity.cti_id = Convert.ToInt32(qs.Return.Rows[0][0]);"], "all_classes": null, "length": 515}
{"pred": "\t\t\tthrow new NotImplementedException();\n\t\t}\n\t\tpublic SqlType[] SqlTypes\n\t\t{\n\t\t\tget { throw new NotImplementedException(); }\n\t\t}\n\t\tpublic System.Type ReturnedType\n\t\t{\n\t\t", "answers": ["\t\t\tthrow new NotImplementedException();"], "all_classes": null, "length": 1017}
{"pred": "       cli = get_cli(self.module)\n        cli_load_config(self, commands)\n    def main(self):\n        \"\"\"Main function\"\"\"\n        self.init_module()\n        self.get_ntp_auth_exist_config()\n        if self", "answers": ["        commands = list()"], "all_classes": null, "length": 1208}
{"pred": "           check_node(component.location, editing_user, None, editing_user, None, None, editing_user)\n        # Change the child, then check that there now are changes\n        child.display_name = 'Changed Display Name'\n        editing_user = self.user_", "answers": ["            component = self.store.update_item(component, editing_user)"], "all_classes": null, "length": 4935}
{"pred": "       digest.update((byte) (textCode & 0xff));\n        updateWith(ch, start, length);\n        digest.update((byte) 0);\n        digest.update((byte) 0);\n    }\n    public void ignorableWhitespace", "answers": ["        digest.update((byte) (TEXT_CODE & 0xff));"], "all_classes": null, "length": 865}
{"pred": "   return aetypes.Range(dict['min'], dict['max'])\ndef mkcomparison(dict):\n    return aetypes.Comparison(dict['op'], dict['value'])\ndef mklogical(dict):\n    return aetypes.Logical(dict['op'],", "answers": ["    return aetypes.Range(dict['star'], dict['stop'])"], "all_classes": null, "length": 1045}
{"pred": "           Type type = null;\n            // Try to get the type from the parameter descriptions.\n            foreach (ApiParameterDescription parameter in api.ParameterDescriptions)\n            {\n                if (parameter.Name.Any(name => parameterNames.Contains(name)))\n                {\n                   ", "answers": ["            if (!Enum.IsDefined(typeof(SampleDirection), sampleDirection))"], "all_classes": null, "length": 1053}
{"pred": "               value = entry.get_active_text()\n            self.on_quit_cell(record, column.name, value)\n            return True\n        return False\n    def _key_up(self, path, model, column):\n        path = model.get_iter(path", "answers": ["                value = entry.get_active_text()"], "all_classes": null, "length": 586}
{"pred": "           beanFactory.registerBeanDefinition(beanName, beanProperties);\n        }\n        return beanProperties;\n    }\n}", "answers": ["            if (newLocationList.size() > 0)"], "all_classes": null, "length": 961}
{"pred": "           for line in f:\n                if line.strip():\n                    raise AnsibleError(\"File contains blank lines\")\n        finally:\n            if f:\n                f.close()\n        if state == \"present\":\n            present(path, username, password, crypt_scheme,", "answers": ["            lines = f.readlines()"], "all_classes": null, "length": 744}
{"pred": "           [In, MarshalAs(UnmanagedType.IUnknown)] object pUnkState,\n            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,\n            [In, MarshalAs(UnmanagedType.Error)] int hrStatus,\n", "answers": ["            [In, MarshalAs(UnmanagedType.LPStruct)] Guid guidExtendedType,"], "all_classes": null, "length": 848}
{"pred": "       var aclKey = spm.lookup( directedAclKeys.getPrincipal() );\n        if ( aclKey != null ) {\n            spm.addPrincipalToPrincipal( aclKey, directedAclKeys.getPrincipal(), directedAclKeys.getRole", "answers": ["        ensureWriteAccess( directedAclKeys.getTarget() );"], "all_classes": null, "length": 695}
{"pred": "       if element.text:\n            self.verify_element(element.text)\n        for subelement in element.findall('.'):\n            self.verify_element(subelement)\n        return True\n    def verify_tag(self, element):\n        \"\"\"Verify the tag of", "answers": ["        children = element.findall('*')"], "all_classes": null, "length": 861}
{"pred": "   return node\ndef _get_StringIO():\n    if not _StringIO:\n        _StringIO = StringIO()\n        _StringIO.write = _StringIO.write\n        _StringIO.writexml = _StringIO.writexml\n        _StringIO.writefmt", "answers": ["    elif node.nodeType == Node.DOCUMENT_TYPE_NODE:"], "all_classes": null, "length": 5441}
{"pred": "\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);\n\t\t\t}\n\t\t};\n\t\tvalidateEMSSceneSectionMassCasualtyIndicatorTestCase.doValidationTest();\n\t}\n\t/**\n\t*\n", "answers": ["\t\t\t\t\t(EMSSceneSection) objectToTest, diagnostician, map);"], "all_classes": null, "length": 659}
{"pred": "\t\t\tif (decoder.peekType(TlvTypeCodes.KeyLocatorDigest, endOffset)) {\n\t\t\t\tdecodeBlobTlv\n\t\t\t\t  (TlvTypeCodes.KeyLocatorDigest, keyLocator.getKeyData", "answers": ["\t\t\tif (decoder.getOffset() == endOffset)"], "all_classes": null, "length": 2575}
{"pred": "       for(int i = 0; i < ActiveWeapons.size(); i++){\n            Weapon a = ActiveWeapons.get(i);\n            a.updateCooldown();\n        }\n    }\n    @Override\n    public void render(GameContainer container", "answers": ["        for(int i = 0; i< myWeapons.length; i++) {"], "all_classes": null, "length": 673}
{"pred": "       action.setColor( color );\n        GameEngine.model().getGame().addGameJoin( action );\n        hide();\n      }\n    } );\n    hpanel.add( m_btnOk );\n    m_panel.add( hpanel );\n    // show the dialog", "answers": ["        action.setAccount( AppMain.instance().getMyAccount() );"], "all_classes": null, "length": 819}
{"pred": "       err = json.loads(r.data.decode(\"utf-8\"))\n        if \"status\" in err and err[\"status\"] == False:\n            msgs = [e[\"msg\"] for e in err[\"errors\"]]\n            raise RuntimeError(\", \".join(msgs))\n", "answers": ["        err = json.loads(r.data.decode(\"utf-8\"))"], "all_classes": null, "length": 962}
{"pred": "\t\t\t\t\t\tresponse = service.MergeOrder(request);\n\t\t\t\t\t});\n\t\t\t\tmergedOrder = response.MergedOrder;\n\t\t\t\tfailureReason = string.Empty;\n\t\t\t}\n\t\t\tcatch (Exception", "answers": ["\t\t\t\t\t\tresponse = service.MergeOrder(request);"], "all_classes": null, "length": 849}
{"pred": "   if reaction.num_metabolites > 1:\n        raise ValueError(f\"Reaction {reaction.id} has multiple metabolites. \"\n                         f\"Only the first metabolite's weight can be computed.\")\n    return [coeff * met.weight", "answers": ["    if len(reaction.metabolites) != 1:"], "all_classes": null, "length": 1153}
{"pred": "       return self.get_queryset().filter(path__startswith=pootle_path,\n                                            submitted_by=user)\n    def get_for_path_with_subunits(self, pootle_path, user):\n        \"\"\"Returns units and", "answers": ["        lang, proj, dir_path, filename = split_pootle_path(pootle_path)"], "all_classes": null, "length": 588}
{"pred": "           ],\n        ),\n        migrations.CreateModel(\n            name='Subject',\n            fields=[\n                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n                ('name', models.CharField", "answers": ["                ('created', models.DateTimeField(auto_now_add=True, null=True)),"], "all_classes": null, "length": 519}
{"pred": "   def get_table_entry(self, dpid):\n        print self.pox_switch\n\nI'm trying to understand how the code is structured and what it does. Can someone please explain the code and help me understand how it works?\n\nHere is a high-level over", "answers": ["                    pinfo = self.ports[portnum]"], "all_classes": null, "length": 720}
{"pred": "   m_RecentItems.add(item);\n    writeProps();\n    updateMenu();\n  }\n  \n  /**\n   * Removes the item from the internal list.\n   *\n   * @param item\tthe item to remove from the list\n   */\n ", "answers": ["    item = fromString(toString(item));"], "all_classes": null, "length": 1401}
{"pred": "           if (src.Followers.Any(x => x.Defender == target) || src.Followers.Any(x => x.Attacker == target))\n                return true;\n            return false;\n        }\n    }\n}\n\\end{code}\n\n", "answers": ["            return src.Map.Rules == MapRules.FeluccaRules;"], "all_classes": null, "length": 562}
{"pred": "       return getMaxTradePeriodDate().getTime() / 2;\n}\n    public boolean isTaker() {\n        return offer.getTaker();\n    }\n    public boolean isSeller() {\n        return offer.getSeller();\n    }\n    public boolean", "answers": ["        if (halfTradePeriodDate == null && takeOfferDate != null)"], "all_classes": null, "length": 1060}
{"pred": "\t\t\tif (a != null) return a;\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tpublic static Node FindAny(Node p) {\n\t\tNode a = LeadingAny(p);\n\t\tif (a != null) return a;\n", "answers": ["\t\t\tif (a == null) a = LeadingAny(p.down);"], "all_classes": null, "length": 2508}
{"pred": "\t\t\tWriteReport(buff);\n\t\t\tmReadDone.WaitOne();\n\t\t\treturn mReadBuff;\n\t\t}\n\t\tinternal void OpenWiimoteDeviceHandle(string devicePath)\n\t\t{\n\t\t\tmHandle = new Safe", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "\t\t\tif (order == SortOrder.DESCENDING)\n\t\t\t{\n\t\t\t\tdirection = -1;\n\t\t\t}\n\t\t}\n\t\tpublic int compare(MskJointVo o1, MskJointVo o2)", "answers": ["\t\t\tif (order == SortOrder.DESCENDING)"], "all_classes": null, "length": 641}
{"pred": "\t\t\t\tSendEmail( filePath );\n\t\t\t}\n\t\t\tcatch\n\t\t\t{\n\t\t\t\tConsole.WriteLine( \"failed\" );\n\t\t\t}\n\t\t}\n\t\tprivate static string GetTimeStamp()\n\t\t{\n\t", "answers": ["\t\t\t\t\tSendEmail( filePath );"], "all_classes": null, "length": 677}
{"pred": "\t\t\t\tIList list = session.CreateCriteria(typeof(Item))\n\t\t\t\t\t.Add(Expression.Gt(\"Id\", 2))\n\t\t\t\t\t.SetCacheable(true)\n\t\t\t\t\t.List();\n\t\t\t\t", "answers": ["\t\t\t\tIList list = session.CreateCriteria(typeof(Item))"], "all_classes": null, "length": 480}
{"pred": "           //UPGRADE_NOTE: The following line of code is not converted, as it is not a part of the original code.\n            //            _indx2Units[N1 + N2] = 0;\n            //UPGRADE_NOTE: The following", "answers": ["            for (k++; i < N1 + N2 + N3; i++, k += 3)"], "all_classes": null, "length": 1244}
{"pred": "   rate.create()\n    ...\n\\end{code}\n\nThis code is a part of a larger project, and it is not complete. It is a mix of Python and JavaScript code, and it is using various libraries and frameworks, such as `widgetastic`, `navitate`, `Pretty", "answers": ["        view = navigate_to(self, 'Add')"], "all_classes": null, "length": 641}
{"pred": "\t\t\tif ( useShadowBuffer )\n\t\t\t{\n\t\t\t\tshadowBuffer.Lock( offset, length, BufferLocking.WriteOnly );\n\t\t\t\tMemory.Copy( src, dest, length );\n\t\t\t\tshadowBuffer.Unlock();\n\t", "answers": ["\t\t\tOpenGL.BindBuffer( All.ElementArrayBuffer, _bufferId );"], "all_classes": null, "length": 782}
{"pred": "\t\tself.newConfig()\n\tdef retune(self, reason):\n\t\tif reason == \"ok\":\n\t\t\tself.tuning_type.value = \"predefined_transponder\"\n\t\t\tself.list.append(getConfigListEntry(_('Transponder", "answers": ["\t\tself.feid = int(self.satfinder_scan_nims.value)"], "all_classes": null, "length": 673}
{"pred": "           else {\n                TcpAddress.TcpAddressMask filter;\n                try {\n                    filter = TcpAddress.parse(filterStr);\n                } catch (IllegalArgumentException e) {\n                    throw new IllegalArgumentException(\"tcpAcceptFilter \" + optval);\n", "answers": ["            else if (filterStr.length() == 0 || filterStr.length() > 255) {"], "all_classes": null, "length": 931}
{"pred": "               // Write the decoded row to the output stream\n                fout.Write(curr, 0, bytesPerRow);\n                if (--colors == 0) {\n                    // Write the last row of the image\n                    fout.Write(prior, 0, bytes", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "       s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')\n        self.assertEqual(s.get_interface(), None)\n        self.assertFalse(s.has_interface('org.freedesktop.DBus.Python'))\n", "answers": ["        s = lowlevel.SignalMessage('/a/b/c', 'foo.bar', 'baz')"], "all_classes": null, "length": 677}
{"pred": "   def get_E_2_page_no_mat(self):\n        return E2_page.E2_page_no_mat(self.get_options())\n    \n    def get_E_2_page(self):\n        return E2_page.E2", "answers": ["                except (KeyError, AttributeError):"], "all_classes": null, "length": 1017}
{"pred": "           AssertParseError(\n                \"1:1: Message type \\\"protobuf_unittest.TestAllTypes\\\" has no field \" +\n                \"named \\\"optional_int32\\\".\",\n                \"optional_int32: 123\");\n        }\n    }\n", "answers": ["                \"1:21: Expected \\\">\\\".\","], "all_classes": null, "length": 1187}
{"pred": "\t\treturn map.remove( key );\n\t}\n\t@Override\n\tpublic void clear() {\n\t\tmap.clear();\n\t\tdirty();\n\t}\n\t@Override\n\tpublic Set<Object> keySet() {\n\t\treturn new KeySet( map.", "answers": ["\t\treturn map.remove( key );"], "all_classes": null, "length": 794}
{"pred": "\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t}\n}\n```\nThis code is a log writer for the Arya Auction system. It writes log entries to a file", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "       return {'action': action_message}\n    @api.model\n    def attendance_action_kiosk_mode(self):\n        self.ensure_one()\n        if not self.pin:\n            return {'warning': _('Please enter your PIN')}\n       ", "answers": ["        return {'action': action_message}"], "all_classes": null, "length": 686}
{"pred": "\t\tgrdResultsRow parentRow = (grdResultsRow)form.grdResults().getRowByValue(orderInvestigationLiteVo.getSpecimen().getUniqueID());\n\t\tif(parentRow == null)\n\t\t{\n\t\t\tparentRow", "answers": ["\t\tif (orderInvestigationLiteVo == null)"], "all_classes": null, "length": 667}
{"pred": "               c.Dispose();\n                return new Point(pt.x, pt.y);\n            }\n        }\n        internal SystemListViewColumn[] GetColumns()\n        {\n            List<SystemListViewColumn> result = new List<SystemListViewColumn>();\n            LVCOLUMN lvc", "answers": ["                pt = (POINT)c.ReadToStructure(0, typeof(POINT));"], "all_classes": null, "length": 808}
{"pred": "   def on_destroy_event(self, window, event):\n        \"\"\"Called when a window is destroyed\"\"\"\n        if self.terminator.doing_layout:\n            return\n        if self.config['keep_terminal_on_destroy']:\n            self.termin", "answers": ["        if not self.is_child_notebook():"], "all_classes": null, "length": 689}
{"pred": "                   toReturn.Add( new StructTypeInfo( \"_\" + Guid.NewGuid().ToString( \"N\" ), managedType, marshalAttribute, arraySize ) );\n                }\n            }\n            return toReturn;\n        }\n        private UnmanagedType? GetMarshal", "answers": ["                    string name = nameArraySizeFragments[0];"], "all_classes": null, "length": 1831}
{"pred": "\t\t\t\tif (HasLayoutInfo)\n\t\t\t\t\treturn true;\n\t\t\t\treturn base.IsValueType;\n\t\t\t}\n\t\t}\n\t\tpublic override bool IsClass {\n\t\t\tget {\nNext line of code:\n\t\t", "answers": ["\t\t\t\tif (base_type == null)"], "all_classes": null, "length": 1469}
{"pred": "               return null;\n            }\n        }\n        #endregion\n    }\n}\n\nPlease help me complete the code.\n\nNote: I have provided the code for the `ROM` class, which is the main class for the rule engine. The code is incomplete and requires additional code to", "answers": ["                throw new Exception(\"Could not find model: \" + args.Key);"], "all_classes": null, "length": 578}
{"pred": "       self.context = OpenSSL.SSL.Context(protocol)\n        self.session = OpenSSL.SSL.Session()\n        self.session.set_options(OpenSSL.SSL.Session.default_options)\n        self.session.set_cipher_list(OpenSSL.", "answers": ["        self.protocol = _openssl_versions[protocol]"], "all_classes": null, "length": 1264}
{"pred": "\t\t\tthis.checkbuttonWhiteSpaces = new global::Gtk.CheckButton ();\n\t\t\tthis.checkbuttonWhiteSpaces.CanFocus = true;\n\t\t\tthis.checkbuttonWhiteSpaces.Name = \"checkbuttonWhiteSpaces\";\n\t\t\tthis.", "answers": ["\t\t\tthis.label8 = new global::Gtk.Label ();"], "all_classes": null, "length": 1086}
{"pred": "   notebooks[\"board\"].set_current_page(0)\n    headbook.set_tab_reorderable(True)\n    headbook.set_tab_reorder_handle_drag(True)\n    headbook.set_tab_reorder_handle_drag_", "answers": ["                for notebook in notebooks.values():"], "all_classes": null, "length": 1188}
{"pred": "   \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_0),\n    \"Next-line\": QKeySequence(Qt.Key_LineFeed),\n    \"Prev-line\": QKeySequence(Qt.Key", "answers": ["    \"Move-Tab-to-left\": QKeySequence(Qt.CTRL + Qt.SHIFT + Qt.Key_9),"], "all_classes": null, "length": 902}
{"pred": "\t\treturn super.toString();\n\t}\n}\n */\npublic class PersistenceUnitInfo extends MutablePersistenceUnitInfo implements SmartPersistenceUnitInfo {\n\tprivate String persistenceUnitName;\n\tprivate String persistenceProviderClassName;\n\tprivate PersistenceUnitTransactionType transactionType", "answers": ["\t\tStringBuilder builder = new StringBuilder();"], "all_classes": null, "length": 538}
{"pred": "   return getModel() != null && getModel().isReadOnly();\n}\n\n}\n", "answers": ["    IWorkbench workbench = PlatformUI.getWorkbench();"], "all_classes": null, "length": 469}
{"pred": "\t\t\tthis.butAttach.Location = new System.Drawing.Point(883, 656);\n\t\t\tthis.butAttach.Name = \"butAttach\";\n\t\t\tthis.butAttach.Size = new System.Drawing.Size(7", "answers": ["\t\t\tthis.butAttach.Location = new System.Drawing.Point(738, 2);"], "all_classes": null, "length": 692}
{"pred": "       if (sb != null)\n        {\n            return sb.toString();\n        }\n        else\n        {\n            return string;\n        }\n    }\n}\n\n\n", "answers": ["        if (sb == null)"], "all_classes": null, "length": 627}
{"pred": "\t\t\tCheck (\"HMACSHA512-N-RFC4231-TC1-Legacy\", hmac, data, digest);\n\t\t}\n\t\t[Test]\n\t\tpublic void RFC4231_TC1_Legacy_", "answers": ["\t\t\tCheck (\"HMACSHA512-L-RFC4231-TC1\", hmac, data, digest);"], "all_classes": null, "length": 1867}
{"pred": "\t    sum += getMaxCdrSerializedSize(current_align);\n\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4); // switch statement\n\t    switch (m_d) {\n\t        case option_1:\n\t           ", "answers": ["\t    current_sum += 4 + CDRSerializer.alignment(current_sum, 4);"], "all_classes": null, "length": 737}
{"pred": "       return null;\n      String value = java.GetValue(\"JavaHome\", \"\");\n      if (value.Length > 0)\n        return value;\n      return null;\n    }\n    private static String GetJreHome(String key)\n   \n    {\n      Reg", "answers": ["        java = regKey.OpenSubKey(\"1.6\");"], "all_classes": null, "length": 950}
{"pred": "               comment = l.strip()\n                if comment:\n                    return [comment, l]\n        # attempt to find job by name\n        for l in self.lines:\n            if re.match(r'^%s' % name, l):\n                return [l, None", "answers": ["                comment = re.sub(r'%s' % self.ansible, '', l)"], "all_classes": null, "length": 1528}
{"pred": "mesh = bpy.data.meshes.new('Mesh')\nmesh.from_modifier(MeshModifierSUBSURF(name='Subdivision', type='SUBSURF', show_only_control_edges=True, subdivision_type='SUB", "answers": ["        modifier.vertex_group = modifier_json['vertex_group']"], "all_classes": null, "length": 994}
{"pred": "\n    private static void buildAllelePeptideLikelihoods(\n            final Map<String,Map<Integer,List<BindData>>> allelePeptideData, final String outputFilename)\n    {\n        if(outputFilename != null)\n            mWriter", "answers": ["            for(int i = 0; i < rankCounts.length; ++i)"], "all_classes": null, "length": 822}
{"pred": "       for (Edge edge : vertex.neighbors()) {\n            neighbors.add(edge.getEnd());\n        }\n        assertEquals(3, neighbors.size());\n        assertEquals(1, neighbors.contains(1));\n        assertEquals(2, neighbors", "answers": ["        for (val n : vertex.neighbors()) {"], "all_classes": null, "length": 466}
{"pred": "   def parser(self, choice):\n        try:\n            if choice.lower() == 'list':\n                self.list_packets(self.cap)\n            elif choice.lower() == 'help':\n                self.help()\n            elif choice.lower() == 'exit':", "answers": ["                    self.choice = int(self.choice) - 1"], "all_classes": null, "length": 615}
{"pred": "           this.rptComboBox.Location = new System.Drawing.Point(91, 161);\n            this.rptComboBox.Name = \"rptComboBox\";\n            this.rptComboBox.Size = new System.Drawing.Size(264, 21);", "answers": ["            this.rptComboBox.Location = new System.Drawing.Point(92, 5);"], "all_classes": null, "length": 764}
{"pred": "           'Meta': {'object_name': 'Scan'},\n            'created': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}),\n            'creator': ('django.db.models.fields.related.", "answers": ["            'Meta': {'ordering': \"['ordering']\", 'object_name': 'Scan'},"], "all_classes": null, "length": 1056}
{"pred": "               // If the type is not found in the cache, check if it is a global type\n                // and if it is, add it to the cache\n                // If it is not a global type, return false\n                // If the type is not found in the cache and it is a global type,", "answers": ["                QName qname = new QName(targetNamespace, sdoTypeName);"], "all_classes": null, "length": 1110}
{"pred": "       self.holidays_first_validate_notificate(cr, uid, ids, context=context)\n        return self.write(cr, uid, ids, {'state': 'validate', 'manager_id': False})\n    def holidays_first_validate_not", "answers": ["        obj_emp = self.pool.get('hr.employee')"], "all_classes": null, "length": 1956}
{"pred": "           set { this.Enabled = value; }\n        }\n        #region IGridBase Members\n        #endregion\n        #region IBOColSelector Members\n        #endregion\n    }\n}\n}\nnamespace Habanero.Faces.Base\n{\n    public", "answers": ["            set { this.Enabled = value; }"], "all_classes": null, "length": 2288}
{"pred": "           return String.Format(\"Mixer Line {0}: {1}\", Name, TypeDescription);\n        }\n    }\n}\n```\n\nPlease help me complete this code by filling in the missing code. I have provided some comments to help guide you. \n\nI have also provided the", "answers": ["            return String.Format(\"{0} {1} ({2} controls, ID={3})\", "], "all_classes": null, "length": 672}
{"pred": "\t\t\tvalue10 = domainObject.getCareContext();\n\t\t\tvalue10.setDomainObject(domainObject);\n\t\t}\n\t\tdomainObject.setCareContext(value10);\n\t\treturn domainObject;\n\t}\n\tpublic static im", "answers": ["\t\t\tif (valueObject.getCareContext().getBoId() == null)"], "all_classes": null, "length": 1991}
{"pred": "           [\"cargo\", \"build\", *opts],\n            env=env,\n            verbose=verbose)\n        build_end = time()\n        elapsed = build_end - build_start\n        if elapsed > 30:\n            notify_build_done(elapsed", "answers": ["            [\"cargo\", \"build\"] + opts,"], "all_classes": null, "length": 688}
{"pred": "\t\t\tdouble estN = counts[3];\n\t\t\tdouble pnEst = predictPositives ? estP : estN;\n\t\t\tif (function.equals(WRACC)) {\n\t\t\t\tscore = cov * (pnRel / (p + n)", "answers": ["\t\t\tdouble estN = counts[3];"], "all_classes": null, "length": 1642}
{"pred": "               Stashed.SetStashDiffs(gitStash.Name, Module.GetStashDiffFiles(gitStash.Name));\n            }\n        }\n        private void ResizeStashesWidth()\n        {\n            Stashes.Width = DpiUtil.Scale(", "answers": ["                var firstId = Module.RevParse(gitStash.Name + \"^\");"], "all_classes": null, "length": 671}
{"pred": "   # --------------------------------------------------------------------------\n    # Run the track job:\n    job.run()\n    # --------------------------------------------------------------------------\n    # Get the results:\n    results = job.get_results()\n    # --------------------------------------------------------------------------\n    # Print", "answers": ["    assert lattice.cbuffer.get_object(bm1_index).out_address != 0"], "all_classes": null, "length": 594}
{"pred": "       if (this == o) {\n            return true;\n        }\n        final AuthScope other = (AuthScope) o;\n        return LangUtils.equals(this.scheme, other.scheme) &&\n            LangUtils.equals(this.realm, other.realm", "answers": ["        if (o == this) {"], "all_classes": null, "length": 1028}
{"pred": "                       b}, callback, asyncState);\n        }\n        public int EndAddInt(IAsyncResult asyncResult) {\n            return this.EndInvoke(\"AddInt\", asyncResult);\n        }\n    }\n}\n}\n\\end{code}\n\nThis is a sample code", "answers": ["                        b}, callback, asyncState);"], "all_classes": null, "length": 1364}
{"pred": "\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\tpublic static BigDecimal[] erstelleMengenAusMehrerenSeriennummern(\n\t\t\tList<SeriennrChargennrMitMengeDto>", "answers": ["\t\t\t\t\tif (!(i == snrs.size() - 1)) {"], "all_classes": null, "length": 724}
{"pred": "\t\t\t\t\tEType = (EClassifier)value;\n\t\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\tcase \"eGenericType\" : \n\t\t\t\t\tEGenericType = (EGeneric", "answers": ["\t\t\t\t\tEType = (EClassifier)value;"], "all_classes": null, "length": 642}
{"pred": "eai = EncryptedArchiveIndex(path)\nlog.info('cryptostasis', 'Loading archive index')\ntry:\n    eai.load()\nexcept Exception as e:\n    log.msg('Failed to load archive index')\n    log.debug('cryptostasis", "answers": ["        log.log_strm = open(args.log_file, 'w')"], "all_classes": null, "length": 626}
{"pred": "   self.bits = mosi\n    self.bits_ss = self.ss\n    self.bits_es = self.es\n    self.bits_bits = mosi\n    self.bits_bits_ss = self.ss\n    self.bits_bits_es = self.", "answers": ["        if ptype == 'BITS':"], "all_classes": null, "length": 1650}
{"pred": "\n    }\n}\n\nPlease provide the input string for which you want to apply the stemmer.\n\nNote: The input string should be in the format of a Romanian sentence, with each word separated by a space.\n\nFor example, if you want to apply the stemmer on the sentence", "answers": ["          cursor = limit - v_3;"], "all_classes": null, "length": 3016}
{"pred": "               o = cls.newInstance();\n            } catch (Exception ex) {\n                System.out.println(\"ex: \"+ex);\n            }\n            if (o != null) {\n                cd.last = o;\n                cd.viewer.setObject(o);\n", "answers": ["                if (cd == null) {"], "all_classes": null, "length": 583}
{"pred": "- name: Get information on the certificate\n  openssl_certificate:\n    path: /etc/ssl/crt/ansible.com.crt\n    privatekey_path: /etc/ssl/private/ansible.com.pem\n    csr_path: /", "answers": ["                return sorted(result), bool(extension.get_critical())"], "all_classes": null, "length": 2179}
{"pred": "\t\t\t\tfor (Slots::iterator i = _slots.begin(); i != _slots.end(); ++i) {\n\t\t\t\t\tif (i->first == i->second) {\n\t\t\t\t\t\tstill_there = true;\n\t\t", "answers": ["\t\t\t\tstill_there = _slots.find (i->first) != _slots.end ();"], "all_classes": null, "length": 1211}
{"pred": "   #   s_idx = sm.add_transition(StartStateIdx, X.begin, EndStateIdx)\n    #   sm.add_transition(s_idx, X.end, EndStateIdx)\n    #   return X\n    #   return [Interval(", "answers": ["    front_seq = unicode_to_utf16(X.begin)"], "all_classes": null, "length": 1192}
{"pred": "\n\t\t\tif (StartOf(13)) {\n\t\t\t\tGet();\n\t\t\t\tint beg = t.pos;\n\t\t\t\twhile (StartOf(14)) {\n\t\t\t\t\tGet();\n\t\t\t\t}\n\t\t\t", "answers": ["\t\t\tint beg = la.pos; int col = la.col;"], "all_classes": null, "length": 1264}
{"pred": "           edi_doc['product_id'] = line.product_id.id\n            edi_doc['product_uom'] = line.product_uom.id\n            edi_doc['product_qty'] = line.product_qty\n            edi_doc", "answers": ["            edi_doc['product_qty'] = line.product_uom_qty"], "all_classes": null, "length": 813}
{"pred": "\t\tHashtable<String, String> serviceProperties = new Hashtable<String, String>();\n\t\tserviceProperties.put(\"uri\", REST_SERVLET_ALIAS + \"s\");\n\t\treturn new ServiceDescription(\"_openhab-server._tcp.local.\",", "answers": ["    \tServiceDescription description = getDefaultServiceDescription();"], "all_classes": null, "length": 603}
{"pred": "               nameMap.put(name, permissions = new ArrayList<PermissionEntry>(Arrays.asList(permissionEntry)));\n            }\n            else\n            {\n                permissions.add(permissionEntry);\n            }\n        }\n        return nameMap;\n    }\n    private void assertNot", "answers": ["                permissions = new ArrayList<>();"], "all_classes": null, "length": 897}
{"pred": "           subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))\n        for device in devices:\n            assert device.subsystem == 'input'\n            assert device.asbool('ID_INPUT_MOUSE')\n            assert device.sys_", "answers": ["            subsystem='input', ID_INPUT_MOUSE=True, sys_name='mouse0'))"], "all_classes": null, "length": 769}
{"pred": "   dev = Device(deviceToken)\n    print(dev.check_inspection())\n    print(dev.notification_postDevicetoken(loginId, password))\n    print(dev.newUser(loginId, password))\n    print(dev.mainmenu())\n    print", "answers": ["    device = Device(token=deviceToken)"], "all_classes": null, "length": 478}
{"pred": "```\nimport os\nimport shutil\nimport sys\nimport json\nimport math\nimport re\n\n# Parse command line arguments\nif len(sys.argv) < 3:\n    print \"Usage: python timevariation_cal.py <dataset> [--calibrator=<cal", "answers": ["        elif (index_elements[0] == \"Scatter\"):"], "all_classes": null, "length": 1818}
{"pred": "           if (Parent is Mobile)\n            {\n                Parent.DropItem(this);\n            }\n        }\n    }\n}\n\\end{code}\n\nPlease help me to complete this code. I am new to coding and I am not sure how to complete this code.\n\n", "answers": ["            if (Keys.Count < 1)"], "all_classes": null, "length": 549}
{"pred": "       for (String device : devices) {\n            // Check if device is already in list\n            Tuner tuner = tuners.get(device);\n            if (tuner != null && tuner.getLiveDevice() && tuner.getIpAddress() != null && tuner", "answers": ["        for (String device : devices) {"], "all_classes": null, "length": 1943}
{"pred": "   if (lastSeenVersion < Version.USER_NOTIFICATION) {\n      jobs.put(Version.USER_NOTIFICATION, new UserNotificationMigrationJob());\n    }\n    return jobs;\n  }\n  private static boolean isLegacyUpdate(@NonNull Context context)", "answers": ["    if (lastSeenVersion < Version.USER_NOTIFICATION) {"], "all_classes": null, "length": 1057}
{"pred": "     if (split.length != 5) {\n        throw new RuntimeIOException(\"Bad line \" + lineCount + \" in \" + mapping.toString() + \": \" + line);\n      }\n      Entry entry = new Entry();\n      entry.regex = Arrays.asList(split[", "answers": ["      if (split.length < 2 || split.length > 4)"], "all_classes": null, "length": 1566}
{"pred": "       env = SCons.Util.Environment(self.env)\n        env['TEXINPUTS'] = self.keyword_paths['include']\n        env['BIBINPUTS'] = self.keyword_paths['bibliography']\n        # ...\n        # ...\n        #", "answers": ["            i = SCons.Node.FS.find_file(n, (source_dir,) + sub_path[0])"], "all_classes": null, "length": 1329}
{"pred": "   def __init__(self, *args, **kwargs):\n        warnings.warn(\"'PythonDatasource' is deprecated and will be removed in Mapnik 3.x, use 'Python' instead\",\n        DeprecationWarning, 2)\n        Python.__init__(self, *", "answers": ["        ctx = Context()"], "all_classes": null, "length": 2860}
{"pred": "   if self.want.port == '*':\n        self.want.update({'port': self.have.port})\n    if self.want.ip == '*':\n        self.want.update({'ip': self.have.ip})\n    if", "answers": ["        if self.want.destination != self.have.destination:"], "all_classes": null, "length": 1555}
{"pred": "   @property\n    def is_displayed(self):\n        return (\n            self.in_explorer and\n            self.title.text.startswith('Automate Method [{}'.format(\n                self.context['object'].display_name or self.context['object'].name", "answers": ["    cancel_button = Button('Cancel')"], "all_classes": null, "length": 628}
{"pred": "           // throw new Exception(\"Class not found: \" + className);\n        }\n        return result;\n    }\n    public void addEventListener(IEventSubscriber listener) {\n        this.addEventListener(listener);\n    }\n    public void removeEventListener(IEventSubscriber listener", "answers": ["            notifyListeners(new EventObject(this), EventStatusType.ERROR,"], "all_classes": null, "length": 740}
{"pred": "           {\"commentable_id\": \"dummy\", \"course_id\": unicode(self.course_id)},\n            {\"body\": \"foo\", \"body_json\": \"{\\\"body\\\":\\\"foo\\\"}\"},\n            mock_request\n        )\n    def test_update_thread_", "answers": ["            {\"thread_id\": \"dummy\", \"course_id\": unicode(self.course_id)},"], "all_classes": null, "length": 1297}
{"pred": "           env.set('MANIFEST_EXISTS', True)\n            return True\n        else:\n            raise SCons.Errors.UserError(\"Manifest file %s does not exist\" % manifestSrc)\n    return False\ndef embedManifestExeCheck(target, source", "answers": ["            ret = (embedManifestDllAction) ([target[0]],None,env)        "], "all_classes": null, "length": 917}
{"pred": "           execute(getResources(), new ProgressMonitorAdapter() {\n                @Override\n                public void run(IProgressMonitor monitor) {\n                    try {\n                        // Call the action's execute method\n                        execute(getResources(), monitor);\n                    } catch (CoreException", "answers": ["            WorkspaceModifyOperation op = new WorkspaceModifyOperation() {"], "all_classes": null, "length": 1208}
{"pred": "\t\treturn super.init(smi, sdi);\n\t}\n}\n\n\n", "answers": ["\t\tif (super.init(smi, sdi))"], "all_classes": null, "length": 521}
{"pred": "   assert f('12:30..+5', last=d(2014,1,31, 12,30)) == (d(2014,1,31, 12,35), d.now())\n    assert f('", "answers": ["    assert f('+5..', last) == (d(2014,1,30, 22,21), now)"], "all_classes": null, "length": 1349}
{"pred": "           //WalkingRange\n            string swalkingrange = swalkingrange;\n            if (swalkingrange.Contains(\"s\") || swalkingrange.Contains(\"m\") || swalkingrange.Contains(\"h\"))\n                swalkingrange = swalkingrange.", "answers": ["            else if (smaxtime.Contains(\"h\"))"], "all_classes": null, "length": 1478}
{"pred": "       s, o = self._session_cmd_close(session, suspend_log_chk_cmd)\n        if s:\n            raise exceptions.TestError(\"Guest doesn't have suspend log.\")\n    def verify_guest_suspend_status(self, **", "answers": ["        s, o = self._session_cmd_close(session, suspend_log_chk_cmd)"], "all_classes": null, "length": 1232}
{"pred": "       rc.get();\n        service.shutdown();\n    }\n}\n\n", "answers": ["        final Future<Boolean> pubf = service.submit(pub);"], "all_classes": null, "length": 471}
{"pred": "           if (this.owner.getDecorator() instanceof FTDecorator) {\n            \t((FTDecorator) this.owner.getDecorator()).setOnSendRequestAfterParameters(res, destination);\n            }\n            this.owner.getDecorator().on", "answers": ["            if (this.owner.getDecorator() instanceof FTDecorator) {"], "all_classes": null, "length": 1423}
{"pred": "\t\t\treturn (uint)((value & 0x7F) | 0x80);\n\t\t}\n\t}\n}\n}", "answers": ["\t\t\tif (value <= 0x7F)"], "all_classes": null, "length": 701}
{"pred": "       self.fm.env.status.append(descr)\n        self.fm.env.status.append(\"Extracting...\")\n        self.fm.env.status.append(\"Please wait...\")\n        self.fm.env.status.append(\"...\")\n        self", "answers": ["        obj = CommandLoader(args=['aunpack'] + au_flags \\"], "all_classes": null, "length": 3874}
{"pred": "\t\tpublic void CreateInstance_NonCOMType ()\n\t\t{\n\t\t\tNonCOMTest objNonCOMTest = (NonCOMTest)Activator.CreateInstance (typeof (NonCOMTest));\n\t\t\tAssert.AreEqual (typeof (NonCOMTest), objNonCOMTest.", "answers": ["\t\t[ExpectedException (typeof (ArgumentNullException))]"], "all_classes": null, "length": 740}
{"pred": "       # self.assertEqual(repo.changesets.count(), 3)\n        self.assertEqual(repo.pushes.count(), 2)\n        self.assertEqual(repo.signoffs.count(), 3)\n        self.assertEqual(repo.actions.count(),", "answers": ["        de = Locale.objects.get(code='de')"], "all_classes": null, "length": 668}
{"pred": "               userstate.texture = cmd.parameters[\"texture\"]\n            self.Log.debug(\"Modifying user state\")\n            self.send_message(PYMUMBLE_MSG_TYPES_USERSTATE, userstate)\n            cmd.response = True\n            self", "answers": ["                userstate.texture = cmd.parameters[\"texture\"]"], "all_classes": null, "length": 1807}
{"pred": "       PlayerGroup group = player.getPlayerGroup2();\n        if (group != null) {\n            group.onEvent(new ChangeLeaderEvent(group, player));\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        PlayerGroup group = player.getPlayerGroup2();"], "all_classes": null, "length": 799}
{"pred": "       return highlight(self.toks, formatter, outfile)\n\\end{code}\n\nPlease help me to complete the code by filling the missing imports and defining the missing functions.\n\nAnswer: The code you provided is a Python module that defines a `Token` class and a `v", "answers": ["        r = [head]"], "all_classes": null, "length": 734}
{"pred": "       column, tree_model, tree_iter = self._setup_column(1, False)\n        tree_model.add_map(tree_iter, self._create_store_map(1, False, 15, 2))\n        column.quantity_renderer.set", "answers": ["        column, tree_model, tree_iter = self._setup_column(1, False)"], "all_classes": null, "length": 630}
{"pred": "\t} while (parent != null);\n\treturn super.doStartTag();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t    if (parent instanceof Grid) {"], "all_classes": null, "length": 1452}
{"pred": "               nl = element.SelectSingleNode(\"Dialog\").ChildNodes;\n                Dialog = new DialogEntry();\n                for (int i = 0; i < nl.Count; i++) {\n                    XmlNode n = nl[i];\n                    string line = n.Inner", "answers": ["                XmlNodeList dnl = element.SelectNodes(\"Dialog\");"], "all_classes": null, "length": 667}
{"pred": "                   m_key[i] = new ExodusSummoningTomeActivation();\n                    else\n                    {\n                        m_key[i] = new PeerlessActivation( this, m_Peerless );\n                    }\n\t\t\t\t}", "answers": ["                        m_key[i] = new ExodusTomeAltar();"], "all_classes": null, "length": 1143}
{"pred": "\t\tfor(int x = 0; x < beans.length; x++)\n\t\t{\n\t\t\tcoll.add((ChangeOfServiceVo)beans[x].buildVo());\n\t\t}\n\t\treturn coll;\n\t}\n}\n\n\n", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 755}
{"pred": "\n         new Version(1, new int[]{0, 0, 0, 0}, new ECBlocks[]{new ECBlocks(2, 0, 0), new ECBlocks(2, 0, 0), new ECBlocks(2, 0, 0", "answers": ["                new Version(1, new int[]{},"], "all_classes": null, "length": 994}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tbyte[] pb = kdf.Transform(pbMsg, p);"], "all_classes": null, "length": 2072}
{"pred": "\t\treturn (requestManaExact(stack, player, cost, remove) / multiplier);\n\t}\n\tprivate static float getFullDiscountForTools(EntityPlayer player) {\n\t\tfor(int i = 0; i < 4; i++) {\n\t\t", "answers": ["\t\treturn requestManaExact(stack, player, cost, remove);"], "all_classes": null, "length": 1100}
{"pred": "```\n# Run the migrations\npython manage.py migrate\n\n# Run the tests\npython manage.py test\n\n# Run the development server\npython manage.py runserver\n\n# Collect static files\npython manage.py collectstatic\n\n# Create a superuser\npython manage.", "answers": ["if DEBUG and len(sys.argv) > 1:"], "all_classes": null, "length": 684}
{"pred": "\t\t\t\t\t\t\"but was given {1})\",\n\t\t\t\t\tLightCount, NextFrame.PixelCount));\n\t\t\tlock (OutputQueue) {\n\t\t\t\tOutputQueue.Enqueue (NextFrame);\n\t\t\t}\n\t\t}\n\t", "answers": ["\t\t\t\t\t\t\" expected {1})\", NextFrame.PixelCount, LightCount"], "all_classes": null, "length": 821}
{"pred": "       if ((this.userErrorMessage == null)) {\n            if ((other.userErrorMessage != null))\n                return false;\n        } else if ((!this.userErrorMessage.equals(other.userErrorMessage)))\n            return false;\n        if ((this.actionTraceList", "answers": ["        if ((this.userErrorMessage == null)) {"], "all_classes": null, "length": 813}
{"pred": "           dc.number = p.readString();\n            response.add(dc);\n        }\n        return response;\n    }\n    @Override\n    protected Object\n    responseVoid(Parcel p) {\n        return null;\n    }\n    @Override\n    protected", "answers": ["            dc.index = p.readInt();"], "all_classes": null, "length": 1196}
{"pred": "\t\t\t\t\t\tif (licence.isApplication()) {\n\t\t\t\t\t\t\trelevantLicences.add(licence);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (odrMetadata.getType", "answers": ["\t\t\t\t\t\tif (licence.isDomainSoftware()) {"], "all_classes": null, "length": 679}
{"pred": "           for (int x = 0; x < xSizeP; x++)\n            {\n                float u = (x / (float) xSizeP) * 0.5f;\n                float v = (y / (float) ySizeP) * 0.5f;", "answers": ["            for (int x = 0; x < xSizeP; x++)"], "all_classes": null, "length": 1083}
{"pred": "\t\t\t\n\t\t\tclient.call(API_METHOD_ADD, new Object[] {testInt1});\n\t\t\t\n\t\t\trawResult = client.getResult();\n\t\t\t\n\t\t\tif (rawResult != null)\n\t\t\t{\n", "answers": ["\t\t\tint testInt2 = rand.nextInt(5000);"], "all_classes": null, "length": 845}
{"pred": "\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\t@Nonnull\n\t\t\tpublic int[] getBlockSelectionEnds()\n\t\t\t{\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t};\n\t}", "answers": ["\t\t\t\treturn new int[0];"], "all_classes": null, "length": 431}
{"pred": "           out.writeBoolean(false);\n            out.writeUTF(\"Not found\");\n        } else {\n            try {\n                out.writeBoolean(true);\n                out.writeObject(found.object);\n            }\n            catch (NotSerializableException e) {\n                logging", "answers": ["            logging2(name + \"not found.\");"], "all_classes": null, "length": 745}
{"pred": "\n    drawgfx(bitmap, Machine.gfx[5],\n            16 + (~stactics_display_buffer.read(i) & 0x0f),\n            16,\n            0, 0,\n             pixel_x, pixel_y,", "answers": ["                        16 + (~stactics_display_buffer.read(i) & 0x0f),"], "all_classes": null, "length": 2896}
{"pred": "                                   .Distance(spell.From.To2D()) <= spell.Range + spell.Width + 100) &&\n                                    minionPrediction.Hitchance > hitchance)\n                                {\n                                    result.Add(target);\n                               ", "answers": ["                                        .Distance(spell.From.To2D(), position.To2D(), true, true) <="], "all_classes": null, "length": 1895}
{"pred": "       List<Node> path = new ArrayList<>();\n        path.add(x);\n        for (Node z : graph.getAdjacentNodes(x)) {\n            if (z.getNodeType() == NodeType.MEASURED) {\n                path.add(z);", "answers": ["        final LinkedList<Node> path = new LinkedList<>();"], "all_classes": null, "length": 1093}
{"pred": "                   var child = pop[i];\n                    if (child is Drawable)\n                        return child as Drawable;\n                    plcs.Push(child as PlaceBase);\n                }\n            }\n            return null;\n        }\n        public void Dispose()\n       ", "answers": ["                    if (pop[i] is PlaceBase)"], "all_classes": null, "length": 756}
{"pred": "       if (getClass() != other.getClass()) {\n            return false;\n        }\n        FinancialEntityAttachment other = (FinancialEntityAttachment) other;\n        if (description == null) {\n            if (other.description != null) {\n                return", "answers": ["        else if (!this.getFileId().equals(other.getFileId())) {"], "all_classes": null, "length": 677}
{"pred": "                       if (mobiles[i] != from && mobiles[i].CanBeHarmful(from, false))\n                        {\n                            mobiles[i].DoHarmful(from);\n                            AOS.Damage(from, mobiles[i],", "answers": ["                        Mobile m = mobiles[i];"], "all_classes": null, "length": 864}
{"pred": "\t\t\t\tHistory.Add(msg);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tpublic virtual void Join(PlayerMobile user, bool message = true)\n\t\t{\n\t\t\tif (Available)\n\t\t\t{\n\t\t", "answers": ["\t\t\t\twhile (HistoryCount >= WorldChat.CMOptions.HistoryBuffer)"], "all_classes": null, "length": 964}
{"pred": "   return mock.getAvailCompoIds(sClientSpaceId, sUserId);\n}\n}", "answers": ["    return mock.getAvailCompoIds(sClientSpaceId, sUserId);"], "all_classes": null, "length": 882}
{"pred": "                           files[++index] = (String) mListView.getItemAtPosition(key);\n                        }\n                    }\n                    final DialogFragment dialog = ZipFilesDialog.instantiate(files);\n                    mode.finish();\n                    dialog.show(m", "answers": ["                            files[++index] = (String) mListView.getItemAtPosition(key);"], "all_classes": null, "length": 526}
{"pred": "\n        this.j.writeLock().lock();\n        try {\n            this.i.add(new NetworkManager.QueuedPacket(packet, (GenericFutureListener[]) null));\n        } finally {\n            this.j.writeLock().unlock();\n        }\n   ", "answers": ["        if (this.m instanceof IUpdatePlayerListBox) {"], "all_classes": null, "length": 598}
{"pred": "\n    def read_header(self):\n        \"\"\"\n        read the header of the j-file\n        \"\"\"\n        self.read_metadata()\n        self.processing_dict = {}\n        self.metadata_dict = {}\n        self.nper = 0\n        self.", "answers": ["                ll = z_index_dict[z_key][1]"], "all_classes": null, "length": 3693}
{"pred": "     return context.getString(resourceOne).replace(\"$name\", name);\n    } else {\n      return context.getString(resourceMany).replace(\"$count\", Integer.toString(recipients.size()));\n    }\n  }\n}\n\nThis code is part of the Signal", "answers": ["      return context.getString(resourceOne, name);"], "all_classes": null, "length": 625}
{"pred": "           env[\"PATH\"] = \":\".join(extra_path)\n        if extra_lib:\n            env[\"LIBRARY_PATH\"] = \":\".join(extra_lib)\n        if gonk:\n            env[\"GOONK_BUILD_ID\"] = self.config[\"", "answers": ["            env[\"PATH\"] = \"%s%s%s\" % ("], "all_classes": null, "length": 635}
{"pred": "           for path, tests in sorted(iteritems(type_paths)):\n                for test in tests:\n                    source_file = SourceFile(tests_root, path, test_cls)\n                    source_files[path] = source_file\n        return self, source_files\n", "answers": ["            for path, manifest_tests in iteritems(type_paths):"], "all_classes": null, "length": 530}
{"pred": "       if (compiledScript != null) {\n            compiledScript.clearCache();\n            compiledScript = null;\n        }\n    }\n    private CompileTimeStrategy createCompileTimeStrategy(File script) {\n        return new CompileTimeStrategy(script);\n    }\n   ", "answers": ["        if (compiledScript != null) {"], "all_classes": null, "length": 651}
{"pred": "           }\n        }\n    }\n}\n\nThis code is a base class for a network layer, which is a dynamic network layer that can be implemented in a class and for Python. It provides methods for reading and writing data, as well as methods for setting and getting timeouts. It also provides a", "answers": ["            throw new NotSupportedException();"], "all_classes": null, "length": 659}
{"pred": "     for i in range(energy.size):\n        Etf = energy[i]\n        grad_Etf = grad[i].flatten()\n        grad_E = Etf*grad_var+energy_var*grad_Etf+grad_means\n        grad_E", "answers": ["      for i in range(energy.size):"], "all_classes": null, "length": 874}
{"pred": "\t\tint numOrderedInvestigationStatusVos = this.ordinvstatushistory.size();\n\t\tint numOrderedInvestigationStatusVos = obj.getOrderInvestigationForStatusChangeVo().ordinvstatushistory.size();\n\t\tif (num", "answers": ["\t\tif(caseInsensitive); // this is to avoid eclipse warning only."], "all_classes": null, "length": 664}
{"pred": "       assertEquals(found.size(), 2);\n    }\n    private void updateAll() throws Exception {\n        stackDao.updateAll(asList(stacks));\n    }\n}", "answers": ["        for (StackImpl stack : stacks) {"], "all_classes": null, "length": 498}
{"pred": "       Parameter parameter = new Parameter();\n        parameter.setName(\"depth\");\n        parameter.setValue(depth);\n        parameter.setType(\"INT\");\n        pf.addParameter(parameter);\n        crawlParameters.add(parameter);\n        //EXCLUSION REGEX", "answers": ["        ParameterElement ped = new ParameterElementImpl();"], "all_classes": null, "length": 593}
{"pred": "\t\t\t// MatchesPattern()\n\t\t\tif (kind == LNodeKind.Node)\n\t\t\t{\n\t\t\t\tvar node = (LNode)candidate;\n\t\t\t\tvar patternNode = (LNode)pattern;\n\t\t\t\tif", "answers": ["\t\t\tif (kind == LNodeKind.Id && candidate.Name != pattern.Name)"], "all_classes": null, "length": 1713}
{"pred": "                   extendedWillHit += colisionList.Count();\n                    extendedFarmLocation += objAiBase.Position;\n                }\n                int shortenWillHit = MinionManager.GetMinions(q.Range).Count();\n                int param = zedMenu.Get", "answers": ["                    if (colisionList.Count > extendedWillHit)"], "all_classes": null, "length": 603}
{"pred": "\t\tsuper.setContextMenus(new ContextMenusFlyweightFactory(context, form.getFormInfo(), miscButton1.getContextMenu()));\n\t}\n\tpublic void hide()\n\t{\n\t\t//ims.framework.utils.ImageButtonImageButton imageButton1", "answers": ["\t\tcontextMenus = new ContextMenus();"], "all_classes": null, "length": 1735}
{"pred": "   match = re.search(pattern, frozen_output)\n    return match is not None\ndef main():\n    install_node_prereqs()\n    python_prereqs_installation()\n    # Uninstall any packages that need explicit uninstallation.\n    uninstall", "answers": ["    return bool(re.search(pattern, frozen_output))"], "all_classes": null, "length": 1046}
{"pred": "           'subs': (('name', 'value', 'v')),\n        })\n        f = Form(r)\n        with self.assertRaises(AssertionError):\n            f.subs.new().save()\n        with self.assertRaises(Assertion", "answers": ["            'subs': [(0, 0, {})]"], "all_classes": null, "length": 1031}
{"pred": "   assert simplify(Sum(x, (x, a, b))) == Sum(x, (x, a, b))\n    assert simplify(Sum(x, (x, a, b + 1))) == Sum(x, (x, a, b + 1))\n    assert", "answers": ["    b, v = symbols('b, v', integer = True)"], "all_classes": null, "length": 4519}
{"pred": "\t\t\tint argc = LuaDLL.lua_gettop(l);\n\t\t\tif(argc==1){\n\t\t\t\tSystem.String a1;\n\t\t\t\tcheckType(l,1,out a1);\n\t\t\t\tvar ret", "answers": ["\t\t\tint argc = LuaDLL.lua_gettop(l);"], "all_classes": null, "length": 427}
{"pred": "               this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else if (action == NotifyCollectionChangedAction.Remove)\n            {\n                this.InitializeAdd(action, changedItems, startingIndex);\n            }\n            else\n            {\n                throw", "answers": ["                this.InitializeAdd(action, changedItems, startingIndex);"], "all_classes": null, "length": 756}
{"pred": "           streamWriter.close();\n            writer.close();\n            objectToXMLDocumentTest(new XMLStreamReaderInputSource(new InputSource(writer.toString())));\n        }\n    }\n    public void testObjectToXMLStreamReader() throws Exception {\n        if(XML_OUTPUT", "answers": ["            int sizeAfter = getNamespaceResolverSize(desc);"], "all_classes": null, "length": 1329}
{"pred": "                   c.Campus = Token2Csv();\n                    break;\n                default:\n                    throw new QueryParserException($\"Invalid parameter {param}\");\n            }\n            NextToken(TokenType.RParen);\n        }\n        private string Token2Csv", "answers": ["                    c.Campus = Token2Csv();"], "all_classes": null, "length": 714}
{"pred": "#endif\n\t\t\t\tif (ide.width == 0 || ide.height == 0)\n\t\t\t\t\tthrow new System.ArgumentException (\"Invalid Argument\", \"stream\");\n\t\t\t\tif (ide.bitCount > 8)\n\t\t\t\t\tthrow", "answers": ["Console.WriteLine (\"\\tide.width: {0}\", ide.width);"], "all_classes": null, "length": 2756}
{"pred": "               // adds the JSR block as a successor of the RET blocks found in the\n                // subroutine.\n                // this is done to ensure that the subroutine is properly\n                // terminated, and that the JSR target is correctly\n                // reached.\n                // the successor of the", "answers": ["                if ((l.status & VISITED2) != 0) {"], "all_classes": null, "length": 3107}
{"pred": "           ptr_of_this_method = ILIntepreter.Minus(__esp, 1);\n            ptr_of_this_method = ILIntepreter.GetObjectAndResolveReference(ptr_of_this_method);\n            UnityEngine.Ray instance_of", "answers": ["            ptr_of_this_method = ILIntepreter.Minus(__esp, 1);"], "all_classes": null, "length": 599}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif(position == Position.INSIDE_LITERAL) {"], "all_classes": null, "length": 620}
{"pred": "       self._getLastValue( driver, \"Image\" )\n        lastImageValue = self._getCurrentValue( driver, \"Image\" )\n        print \"Check decrease image...\"\n        print \"oldImageValue=\", lastImageValue, \"newImageValue=\", currImageValue\n        self", "answers": ["        currImageValue = self._getCurrentValue( driver, \"Image\")"], "all_classes": null, "length": 3277}
{"pred": "   self.transport.send_message(m)\n    self.transport._expect_packet(MSG_KEXGSS_COMPLETE,\n                                  MSG_KEXGSS_ERROR)\n\\end{code}\n\nPlease note that this code is a Python implementation", "answers": ["        if (self.f < 1) or (self.f > self.p - 1):"], "all_classes": null, "length": 1912}
{"pred": "           // Create the overall node\n            DefaultMutableTreeNode overallNode = new DefaultMutableTreeNode(overallNodeName);\n            overallNode.setUserObject(connectionData.getConnectionName());\n            // Add the overall node to the tree\n            tree.addNode(overallNode);\n", "answers": ["            if (disableTreeSelection) {"], "all_classes": null, "length": 908}
{"pred": "                          (self.employee_id, from_date, to_date, code))\n                res = self.cr.fetchone()\n                return res or (0.0, 0.0)\n        contract_ids = [payslip.contract_id.id]\n", "answers": ["                           (self.employee_id, from_date, to_date, code))"], "all_classes": null, "length": 836}
{"pred": "   cl1h, cl2h, cl = integrate_kkhalo(ell, lnzarr, chiarr, dVdzdOm, marr, mf, BDarr, rhobarr, rho_crit_arr, bias, Darr, pk, zs", "answers": ["        if config.MF =='Tinker':"], "all_classes": null, "length": 1377}
{"pred": "       d.width = font.getSize() * 1.5;\n        d.height = font.getSize();\n        return d;\n    }\n    @Override\n    public void setText(String text) {\n        super.setText(text);\n        updateClarifier", "answers": ["        if (font == null) {"], "all_classes": null, "length": 924}
{"pred": "f1=lambda x1,y1,z1,x2,y2,z2:np.array([[np.dot(x2,x1),np.dot(x2,y1),np.dot(x2,z1)],\\\n                                      [", "answers": ["        for theta in np.arange(0,np.pi,theta_res):"], "all_classes": null, "length": 800}
{"pred": "\t\t\twindow.IsVisible = !window.IsVisible;\n\t\t}\n\t}\n}\n\nI have a problem with the code, I am getting an error on the line \"Trader.Connected += () => OnConnectionChanged(true);\"\n\nThe error is:\n", "answers": ["\t\t\tif (window.Visibility == Visibility.Visible)"], "all_classes": null, "length": 471}
{"pred": "           if params[1]['bins'] is None:\n                step = (params[1]['high'] - params[1]['low'])\\\n                    / float(params[1]['nbins'])\n                params[1]['bins'] = [\n                    params[1]['low']", "answers": ["                        for n in xrange(params[0]['nbins'] + 1)]"], "all_classes": null, "length": 2054}
{"pred": "           protocol.getStorage().updateFirstServerMsgId(contact);\n        }\n    }\n}\n}\n\nPlease help me to complete this code.\nI have no idea how to complete the code.\nI have tried to understand the code but it seems to be incomplete and I am not able", "answers": ["            if (contact.setLastMessageTransmitted(query.getEnd())) {"], "all_classes": null, "length": 630}
{"pred": "               im1L = im1.convert(\"L\", rgb2I)\n            elif channel == \"R\":\n                im1L = im1.convert(\"L\", rgb2r)\n            elif channel == \"G\":\n                im1L = im1.convert(\"L\",", "answers": ["                im1L = im1.convert(\"L\", rgb2I)"], "all_classes": null, "length": 756}
{"pred": "\t\t\twhile (rsp.isOkey()) {\n\t\t\t\taddLog24(rsp, ret);\n\t\t\t\trsp = tag.readRecord(sfi);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\t", "answers": ["\t\t\tfor (int i = 1; i <= MAX_LOG; ++i) {"], "all_classes": null, "length": 702}
{"pred": "   yield textHandler(UInt16(self, \"crc16\", \"Archive CRC16 (from byte 4 on)\"), hexadecimal)\n    yield filesizeHandler(UInt16(self, \"head_size\", \"Block size (from byte ", "answers": ["            return \"Block: %s\" % self[\"type\"].display"], "all_classes": null, "length": 952}
{"pred": "\t\tsocketAdapter = null;\n\t}\n}\n```\nPlease help me complete the code by filling in the missing parts.", "answers": ["\t\tif (socketAdapter != null) {"], "all_classes": null, "length": 1211}
{"pred": "   server = server.HTTPServer(server.get_address(), server.wsgi_app)\n    server.start()\n\nExplanation:\n\nThe code is a simplified example of a WSGI server using the `cheroot` library to handle HTTP requests and serve WSGI", "answers": ["        path = environ['PATH_INFO'] or '/'"], "all_classes": null, "length": 1313}
{"pred": "\t\tmodel = Model()\n\t\tmodel.loadmodel( sys.argv[ 1 ] )\n\t\tmodel.initialize()\n\t\tmodel.precalculate_scores()\n\t\tmodel.find_'parents'\n\t\tprint \"Best parents: \" + str(", "answers": ["\t\tdatasetfile , field , parents = sys.argv[ 1: ]"], "all_classes": null, "length": 1784}
{"pred": "           if (Utility.Random(chance) == 0)\n            {\n                res = EnhanceResult.Success;\n            }\n            else\n            {\n                res = EnhanceResult.Failure;\n            }\n        }\n        public static void CheckResult(ref", "answers": ["            int random = Utility.Random(100);"], "all_classes": null, "length": 976}
{"pred": "           # Create the enumeration entry\n            entry = rdltypes.UserEnum(type_name, entry_name, entry_value, displayname, desc)\n            entries[entry_name] = entry\n        return entries\n    #---------------------------------------------------------------------------\n    def parse_integer", "answers": ["            entries[entry_name] = (entry_value, displayname, desc)"], "all_classes": null, "length": 2406}
{"pred": "                   MessageBox.Show(\"No Modules found in the FOG Service!\");\n                    this.Close();\n                }\n            }\n            else\n            {\nNext line of code:\n                    MessageBox.Show(\"FOG Service Directory does not exist!\");\n                    this.Close", "answers": ["                    Label noneFound = new Label();"], "all_classes": null, "length": 451}
{"pred": "               return (bool)this.ViewState[\"SubmitText\"];\n            }\n            set\n            {\n                this.ViewState[\"SubmitText\"] = value;\n            }\n        }\n        private string[] itemsAsString;\n        private List<T> items;\n        private List<", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "               for(int tri = 0, vi = 0, ci = 0, ti = 0; tri < this.trianglesUsed[textureHash]; tri++)\n                {\n                    beginTriangle(this.textureArray[textureHash]);\n                    for(", "answers": ["                int ti = 0, ci = 0, vi = 0;"], "all_classes": null, "length": 1502}
{"pred": "   if header not in exposedHeaders:\n        response['Access-Control-Expose-Headers'] = exposedHeaders + ', ' + header\n    return response\ndef handle_404(request, template_name='404.html'):\n    return HttpResponseServerError('Not Found:", "answers": ["    exposedHeaders += f', {header}' if exposedHeaders else header"], "all_classes": null, "length": 796}
{"pred": "                   Driver d = idlePool.Dequeue();\n                    if (d.ConnectionLifetimeExpired())\n                    {\n                        oldDrivers.Add(d);\n                        Debug.Assert(d.ConnectionLifetimeExpired());\n                    }\n                   ", "answers": ["                    Driver d = idlePool.Peek();"], "all_classes": null, "length": 1070}
{"pred": "       var = [var] * len(var)\n    return var\ndef _round_shape(shape, radius, resolution):\n    \"\"\"Round shape to nearest integer.\n    Args:\n        shape (float): Shape to round.\n        radius (float): Radius of the", "answers": ["        var = (float(var), float(var))"], "all_classes": null, "length": 3675}
{"pred": "qn = \"386_StolenDignity\"\n#Variables\nDROP_RATE=15*Config.RATE_DROP_QUEST\nREQUIRED_ORE=100 #how many items will be paid for a game (affects on", "answers": ["CREATED     = State('Start',     QUEST)"], "all_classes": null, "length": 755}
{"pred": "\t\t\t\t\tdouble? seconds1 = this.Seconds;\n\t\t\t\t\tint num2 = (int)Math.Floor(((double)seconds1.Value - ((double)num * 60 + (double)num1)) * 100);\n\t\t", "answers": ["\t\t\t\t\tdouble? seconds1 = this.Seconds;"], "all_classes": null, "length": 1143}
{"pred": "           VertexDataStride = 0;\n            VertexDataSize = 0;\n            _attributes = new List<AttributeInfo>();\n            _textures = new Dictionary<String, TextureInfo>();\n            _uniforms = new Dictionary<String, int>();\n            Program = -", "answers": ["            _attributes = new List<AttributeInfo>();"], "all_classes": null, "length": 661}
{"pred": "   def __str__(self):\n        return self.name or \"Model\"\n\n    def __repr__(self):\n        return \"Model(name='{}')'.format(self.name or \"Model\")\n\n    def __eq__(self, other):\n        return self.name", "answers": ["        for l in (self.reactions, self.genes, self.metabolites):"], "all_classes": null, "length": 1227}
{"pred": "\t\tfor(int i = 0; i < beans.size(); i++)\n\t\t{\n\t\t\tims.clinicaladmin.vo.beans.TumourGroupListVoBean bean = (ims.clinicaladmin.vo.beans.TumourGroup", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 778}
{"pred": "\t\t\t\tcx = lines[selectedLine].getCenterX();\n\t\t\t\tright = lines[selectedLine].x+lines[selectedLine].width;\n\t\t\t\tcy = lines[selectedLine].getCenterY();\n\t\t\t\th = lines[selectedLine].", "answers": ["\t\t\t\tcx = lines[selectedLine].getCenterX();"], "all_classes": null, "length": 1861}
{"pred": "       getListView().setAnimation(set);\n    }\n\t\n\tprivate void fillData() {\n\t\tmCursor = mDbAdapter.getCursor();\n\t\tmNavigationList.clear();\n\t\t\n\t\tif (mCursor != null && mCursor.moveToFirst())", "answers": ["                new LayoutAnimationController(set, 0.5f);"], "all_classes": null, "length": 730}
{"pred": "               if (HighestNumber < PartnerInterestRow.FieldKey)\n                {\n                    HighestNumber = PartnerInterestRow.FieldKey;\n                }\n            }\n            ARow.FieldKey = HighestNumber + 1;\n            ARow.Interest =", "answers": ["                if (PartnerInterestRow.RowState != DataRowState.Deleted)"], "all_classes": null, "length": 803}
{"pred": "\t\tthis.predict(pssm, scoresSol);\n\t}\n\t\n\t\n\tprivate void predict(Pssm pssm, int[] scoresSol)\n\t{\n\t\tif (this.isTrained)\n\t\t{\n\t\t\tthis.classifier.", "answers": ["\t\tint[] \t\tscoresTmh \t= new int[length];"], "all_classes": null, "length": 569}
