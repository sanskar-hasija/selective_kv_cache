{"pred": "   private final transient JKademliaStorageEntry storageEntry;\n\n    private final transient JKademliaRoutingTable routingTable;\n\n    private final transient Timer timer;\n\n    private final transient TimerTask task;\n\n    private final transient File dataFile", "answers": ["    private transient KademliaRoutingTable routingTable;"], "all_classes": null, "length": 6425}
{"pred": "       // Add some default effects to the list\n        mEffects.add(new InterlaceEffect());\n        mEffects.add(new ContrastBrightnessAdjustmentEffect());\n        mEffects.add(new FlowAbsSubEffect());\n        mEffects.add", "answers": ["        mEffects.add(new NoEffect());"], "all_classes": null, "length": 8194}
{"pred": "\nclass Encryption1(Encryption):  # noqa: D101\n    input_widths = [8]\n    output_widths = [8]\n\n    @classmethod\n    def eval(cls, c, r):\n        c = RotateLeft(c", "answers": ["class Encryption1(Encryption):  # noqa: D101"], "all_classes": null, "length": 5302}
{"pred": "\n    public EffectManager(Activity activity) {\n        mActivity = activity;\n        mParameterListView = (ViewGroup) mActivity.findViewById(R.id.parameter_list);\n        mParameterListAdapter = new EffectParameterListAdapter(mActivity, R.layout.parameter_list_", "answers": ["    private ImmersiveTouchNavigation mImmersiveTouchNavigation;"], "all_classes": null, "length": 8166}
{"pred": "               new EventCommandHandler<>(UpdateFrequencyChangeCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));\n    }\n\n    private void queueEvent(Event event) {\n        this.eventQueue.offer(event);\n    }\n\n    public void", "answers": ["                new EventCommandHandler<>(SetUpdateFrequencyCommand.class, UpdateFrequencyChangeEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 6872}
{"pred": "    */\n    private LocalRateLimiter localRateLimiter;\n\n    private TaskRunnerConfig taskRunnerConfig;\n\n    private TaskRunnerLog taskRunnerLog;\n\n    private TaskListenerManager taskListenerManager;\n\n    public TaskRunnerContainer(TaskProperties taskProperties, TaskMetaInfoManager", "answers": ["    private LocalRateLimiter localRateLimiter;"], "all_classes": null, "length": 5298}
{"pred": "\t\t\tList<Problem> problems = integrityCheck.check(args.path(), passphrase, args.checkFileIntegrity());\n\t\t\tprintNoNewline(problems);\n\t\t} catch (AbortCheckException e) {\n\t\t\tprint(e.getMessage());", "answers": ["\t\t\tprint(\"Scanning vault structure may take some time. Be patient...\");"], "all_classes": null, "length": 924}
{"pred": "           // save private and public Key to storage\n            rsa.saveRSAKeys(deviceId);\n            // notify the activity that the device is registered\n            activity.runOnUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    if (", "answers": ["        } catch (RestServiceException e) {"], "all_classes": null, "length": 5741}
{"pred": "   SignRequest signRequest = u2fServer.getSignRequest(new SignatureData(\n        \"signature-data-1234567890abcdef\", \"algorithm-1234567890abcdef\"));\n}\n}\nPlease provide", "answers": ["    U2fSignRequest signRequest = u2fServer.getSignRequest(ACCOUNT_NAME, APP_ID_SIGN);"], "all_classes": null, "length": 2959}
{"pred": "```\nself.uaA.recvEvent(event)\n```\nExpected output:\n```\nself.uaA.recvEvent(event)\n```\nActual output:\n```\nself.uaA.recvEvent(event)\n```\nIssue:\nThe", "answers": ["            self.acctA = RadiusAccounting(self.global_config, 'answer', \\"], "all_classes": null, "length": 7126}
{"pred": "   def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.typeid = -1\n\n\nclass FlagList(IntEnum):\n    #: A list of flags that can be used with the :py:obj:`", "answers": ["    @sdproperty"], "all_classes": null, "length": 1318}
{"pred": "\n    self.root.walk(process_children)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            cstr_node.rhs = Undef(data=None)"], "all_classes": null, "length": 1751}
{"pred": "               Uri uri = Uri.parse(url);\n                intent.setData(uri);\n                activity.startActivity(intent);\n            }\n        }\n    }\n\n    private static boolean useInternPlayer(TDActivity activity) {\n        return activity != null && activity.getApplicationContext", "answers": ["                intent.setDataAndType(Uri.parse(url), TDConfig.MIME_FLV);"], "all_classes": null, "length": 3615}
{"pred": "       PostLocationDataBody body = new PostLocationDataBody(AppSettings.sUserLogin, latitude, longitude);\n        OkHttpClient client = new OkHttpClient();\n        Retrofit retrofit = new Retrofit.Builder()\n                .baseUrl(BaseUrls.FORKME", "answers": ["        PostLocationDataBody dataBody = new PostLocationDataBody("], "all_classes": null, "length": 2035}
{"pred": "       net = Network('net1')\n        inter_layer_pipeline = InterLayerPipeline(net)\n        assert isinstance(inter_layer_pipeline, InterLayerPipeline)\n        assert inter_layer_pipeline.net == net\n        assert inter_layer_pipeline", "answers": ["        ilp = InterLayerPipeline(self.net['net1'], self.batch_size,"], "all_classes": null, "length": 9020}
{"pred": "   def __new__(cls):\n        init_called = True\n        return super().__new__(cls)\n\n    class User(BaseModel):\n        id = Column(Integer, hash_key=True)\n        email = Column(String)\n        name = Column(String)\n", "answers": ["    class Blob(BaseModel):"], "all_classes": null, "length": 2045}
{"pred": "   def evaluate_select_simple_map_operator(self, context=None):\n        return self.select(context)\n\n\n@method(infix('?', bp=80))\ndef evaluate_optional_expression(self, context=None):\n    return self.evalu", "answers": ["            elif isinstance(result, TypedElement):"], "all_classes": null, "length": 6293}
{"pred": "                   new HSBAdjustTransformation(),\n                    new InvertTransformation(),\n                    new LevelsTransformation(),\n                    new LookupTransformation(),\n                    new MapColorsTransformation(),\n                    new MarbleTransformation(),\n                    new MaskTransformation", "answers": ["                    new HSBAdjustTransformation(.5f,.5f,.5f),"], "all_classes": null, "length": 5849}
{"pred": "\n    private Movie movie;\n    private MovieDetails movieDetails;\n    private List<Trailer> trailers;\n    private List<Rating> ratings;\n    private List<String> similarMovies;\n    private Unbinder unbinder;\n\n    @Override\n   ", "answers": ["    private DelegateToActivity<Movie> delegateListener;"], "all_classes": null, "length": 1661}
{"pred": "\n                writeResponse(INSTANCE_OF, correlationId);\n\n                log.tracef(\"[%d] CreateMBean - Success Response Sent\", correlationId);\n            } catch (InstanceAlreadyExistsException e) {\n                writeResponse(e, ADD_NOTIFICATION_LISTEN", "answers": ["                writeResponse(instance, OBJECT_INSTANCE, CREATE_MBEAN, correlationId);"], "all_classes": null, "length": 953}
{"pred": "       await wild_report.add_reaction(emoji.emojis.get(MyEmojis.DESPAWNED))\n        await wild_report.add_reaction(emoji.emojis.get(MyEmojis.ON_MY_WAY))", "answers": ["        await wild_report.add_reaction(MyEmojis.DESPAWNED)"], "all_classes": null, "length": 2162}
{"pred": "   data = SNLIData(c['data'])\n    # Initialize model\n    model = NLISimple(vocab=vocab, max_def_length=c['max_def_length'],\n                     with_too_long_defs=c['", "answers": ["    data = SNLIData(path=c['data_path'], layout=c['layout'], vocab=vocab)"], "all_classes": null, "length": 5411}
{"pred": " assert isinstance(doppler, TCXOSine)\n\n\ndef test_params_doppler_poly():\n  '''\n  Poly doppler parameters test\n  '''\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv", "answers": ["  assert isinstance(doppler, DopplerSine)"], "all_classes": null, "length": 6517}
{"pred": "\n                mParticipants.remove(participant);\n                resultAdapter(mParticipants);\n            }\n        }\n    }\n\n    private OnClickListener onClickListener = new OnClickListener() {\n        @Override\n        public void onClick(View v, int position, long id", "answers": ["                Intent intent = new Intent(getActivity(), ParticipantFortunateActivity.class);"], "all_classes": null, "length": 6652}
{"pred": "\n    def test_release_unlocked(self):\n        assert not self.redis.exists(self.redlock.key)\n        self.redlock.acquire()\n        assert self.redlock.release()\n        assert not self.redlock.locked()\n        assert", "answers": ["        with self.assertRaises(TooManyExtensions):"], "all_classes": null, "length": 2794}
{"pred": "       return ConeSettings(self, \"THREED_CONE_SETTINGS\")\n\n    def get_tag(self, tag_type, name):\n        \"\"\"Get a tag from the sound.\n\n        :param TAGTYPE tag_type: Tag type.\n       ", "answers": ["        return ConeSettings(self._ptr, self.__class__.__name__)"], "all_classes": null, "length": 2866}
{"pred": "\n    def __init__(self, *args, **kwargs):\n        super(CompressedData, self).__init__(*args, **kwargs)\n        self.calg = 0\n\n    def parse(self, packet):\n        self.calg = packet[0]\n", "answers": ["    @calg.register(CompressionAlgorithm)"], "all_classes": null, "length": 5356}
{"pred": "   size = findCellSize(imgshape, detectCellSizeParameter = detectCellSizeParameter, maxLabel = maxLabel, verbose = verbose, out = out, **parameter);\n    \n    # intensity and size measurements\n    findCellIntensityParameter = getParameter(detectSpotsParameter,", "answers": ["        csize = findCellSize(imgshape, maxLabel = centers.shape[0], out = out, **parameter);"], "all_classes": null, "length": 3561}
{"pred": "           music.play(Assets.perfectNoteSound);\n        } else if (accuracy == Accuracy.NICE) {\n            music.play(Assets.niceNoteSound);\n        } else if (accuracy == Accuracy.GREAT) {\n", "answers": ["            Assets.perfectTapSound.play(GlobalConfiguration.feedbackVolume / 100f);"], "all_classes": null, "length": 4505}
{"pred": "           while (transactionIterator.hasNext()) {\n                printer.print(transactionIterator.next());\n                System.out.println(print);\n                print.setLength(0);\n            }\n        }\n\n    }\n\n    private void exit(int status) {\n\n       ", "answers": ["            while (transactionIterator.nextTransactionState() == TransactionState.OK) {\r"], "all_classes": null, "length": 2594}
{"pred": "               // Call the appropriate method to generate the query plan\n                // based on the query type and the data source\n                // For example, for a timeseries query, generate a query plan that\n                // retrieves the data from the druid database\n                // For a groupby query, generate a query", "answers": ["            } else if (stmnt instanceof InsertMeta) {//TODO: Handle this."], "all_classes": null, "length": 4029}
{"pred": "```\n    def decrypt(self, message: FinTSMessage):\n        raise NotImplemented()\n\n    def verify(self, message: FinTSMessage):\n        raise NotImplemented()\n```\nThe `EncryptionMechanism` and `AuthenticationMechanism` classes", "answers": ["                    UsageEncryption.OSY,"], "all_classes": null, "length": 1428}
{"pred": "                           if (env.combExpRegs[i] != 0) {\n                                env.numCombExpCheck++;\n                            }\n                        }\n                    }\n                }\n            }\n        } // USE_CEC\n\n        if (Config.DEBUG", "answers": ["                            if (bsAt(env.backrefedMem, i)) {"], "all_classes": null, "length": 5421}
{"pred": "```\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # ...\n    # Dashboard URLs\n    path('', include('dashboard.urls')),\n    # ...\n", "answers": ["    url(r'^workflow-steps$', get_workflow_steps, name=\"ajax-workflow-steps\"),"], "all_classes": null, "length": 5212}
{"pred": "\t\t\n\t\tpublic ResourceData (Meter meter, EnumMap<SRSLevel, String> tags, EnumMap<SRSLevel, Integer> colors, String notEnoughData) {\n\t\t\tthis.meter = meter;\n\t\t\tthis.tags = tags;", "answers": ["\t\tpublic ResourceData (MainActivity main)"], "all_classes": null, "length": 11715}
{"pred": "       self.set_db_type(storage_type)\n        return self\n\n    def set_client_id(self, _cid):\n        self._client_id = _cid\n        return self\n\n    def set_user(self, _user):\n        self._user", "answers": ["        if storage_type in STORAGE_TYPES:"], "all_classes": null, "length": 2885}
{"pred": "   public GivenArgumentWhenSteps<$SystemUnderTest, $Argument> and() {\n        return this;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    public ThenWithoutResult<$SystemUnderTest> when(CheckedBiConsumer<$SystemUnderTest, $Argument> whenStep) {"], "all_classes": null, "length": 1226}
{"pred": "     try {\n        process.waitFor();\n      } catch (InterruptedException e) {\n        throw new IosDeviceException(RealDeviceImpl.this, e);\n      }\n      if (process.exitCode() != 0) {\n        throw new IosDeviceException(", "answers": ["    CommandResult result = awaitResult(process);"], "all_classes": null, "length": 7530}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tint theme = Themer.theme;"], "all_classes": null, "length": 4819}
{"pred": "\t\tReceivedImageMessage image = ReceivedImageMessage.fromXml(xml);\n\t\tif (image != null) {\n\t\t\tString imageUrl = image.getMediaId();\n\t\t\tlog.info(\"imageUrl: \" + imageUrl);\n\t\t\t// handle image", "answers": ["\t\tMessage msg = XmlUtil.fromXml(Message.class, xml);"], "all_classes": null, "length": 2116}
{"pred": "   if os.path.exists(os.path.join(file_path, 'app_info_')):\n        print u'[INFO] 已经运行过该 APK 文件!'\n        return\n    # ...\n\ndef get_app_info(file_", "answers": ["    file_md5 = genMD5(file_path)"], "all_classes": null, "length": 1714}
{"pred": "   @channel_checks.raid_report_enabled()\n    async def cmd_raidcity(self, ctx, *city):\n        \"\"\"\n        **!raid-city [city]** - sets the city for the raid party.\n\n        \"\"\"\n        pass\n\n\n\n", "answers": ["    @raid_checks.raid_party_channel()"], "all_classes": null, "length": 4185}
{"pred": "       self.assertTrue(date_string_to_date(\"25/11/2015\") == datetime.date(2015, 11, 25))\n        self.assertTrue(date_string_to_date(\"11/12/", "answers": ["        self.assertEqual(date_string_to_date(\"25/11/2015\"), datetime(2015, 11, 25, 0, 0).date())"], "all_classes": null, "length": 1248}
{"pred": "       config_actor_socket = beeswarm.shared.zmq_context.socket(zmq.REQ)\n        config_actor_socket.connect(SocketNames.CONFIG_COMMANDS.value)\n\n        if honeypot_first:\n            # send", "answers": ["        config_actor = ConfigActor(config_file, '')"], "all_classes": null, "length": 4341}
{"pred": "                           ShareUtil.sharePicture(mActivity, picture.getPics()[0]);\n                            break;\n                        case 1:\n                            ShareUtil.shareText(mActivity, picture.getText_content());\n                            break;\n                    }\n                    return", "answers": ["                            ShareUtil.sharePicture(mActivity, picture"], "all_classes": null, "length": 2796}
{"pred": "```\n\t\t\t\t\t\toutdata = np.column_stack((positive_data,negative_data))\n\t\t\t\t\t\toutdata = np.column_stack((outdata,-np.log10(1-positive_data)))\n\t\t\t\t\t", "answers": ["\t\t\t\t\t\tsavefunc = savemgh_v2"], "all_classes": null, "length": 4046}
{"pred": "               ResponseSyncAdapter.class,\n                ResponseFiles.class,\n                ResponseFilesTest.class,\n                ResponseTypedOutput.class,\n                DataPointTypedOutput.class,\n                OmhDataPointHeader.class,\n                SchemaId.class,\n                InstallSurvey", "answers": ["                OhmletActivity.class,"], "all_classes": null, "length": 10623}
{"pred": "\n    def parse(self, packet):\n        super(SignatureV4, self).parse(packet)\n        self.version = packet[0]\n        del packet[0]\n\n        self.sigtype = SignatureType(packet[0])\n        del packet[", "answers": ["                PubKeyAlgorithm.ECDSA: ECDSASignature, }"], "all_classes": null, "length": 5424}
{"pred": "   elif is_document_node(item):\n        yield item\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            elif is_document_node(context.root):"], "all_classes": null, "length": 5575}
{"pred": "     'no_members': Gauge\n    }\n\n  def __init__(self, sink_provider, channel_factory, **defaults):\n    super(HeapBalancerSink, self).__init__(sink_provider, channel_factory, **defaults)\n   ", "answers": ["      'no_members': Counter"], "all_classes": null, "length": 1853}
{"pred": "       nc.send_message_with_protocol('hello', protocol)\n\n    def test_send_message_with_bad_data(self):\n        \"\"\"\n        Ensures that bad data is rejected and an appropriate error is\n        raised.\n        \"\"\"\n        nc = Net", "answers": ["        msg = OK('uuid', 'recipient', 'sender', 9999, 'version', 'seal')"], "all_classes": null, "length": 3673}
{"pred": "       StatementExecution statement = (StatementExecution) qe;\n        assertEquals(\"query\", statement.getQuery());\n        // ...\n        // end::query[]\n    }\n\n    public void parameter() {\n        // tag::parameter[]\n        ProxyTestDataSource ds = new Pro", "answers": ["        assertTrue(\"is batch statement\", qe instanceof StatementBatchExecution);"], "all_classes": null, "length": 1159}
{"pred": "\n        Assert.assertThat(ds, executions(0, failure()));\n        Assert.assertThat(ds, executions(0, is(failure())));\n    }\n\n    @Test\n    public void testPreparedSuccess() {\n        PreparedExecution pe = new", "answers": ["        Assert.assertThat(ds, executions(0, failure()));"], "all_classes": null, "length": 1584}
{"pred": "\n        yield self.adrcycletime\n        self.adrprocessing = False\n        returnValue(None)\n\n    def _createLinkADRRequest(self, device):\n        \"\"\"Creates a Link ADR request message.\n        \n        Args:\n            device (Device):", "answers": ["                yield txsleep(scheduled - current)            "], "all_classes": null, "length": 5972}
{"pred": "                   function = FmllrRescoreFunction(args)\n                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)\n                    procs.append(p)\n                    p.start()\n                while True:\n                   ", "answers": ["                    function = FmllrRescoreFunction(args)"], "all_classes": null, "length": 5354}
{"pred": "def show(self, with_trans=False):\n    tr, re = '', ''\n    if self.is_transparent():\n        # todo: eval the best convinience here\n        if not with_trans:\n            return ''\n        tr = ' - transparent'\n    else", "answers": ["class IEEE802154(Block):"], "all_classes": null, "length": 7885}
{"pred": "       getActivity().getApplicationContext().getSharedPreferences(STORAGE_PREFS, MODE_PRIVATE).registerOnSharedPreferenceChangeListener(this);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 4792}
{"pred": "   parameter = DataElementGroupField(type=ParameterTwostepTAN6)\n\n\nclass HITANS7(HITANSBase):\n    parameter = DataElementGroupField(type=ParameterTwostepTAN7)\n\n\nclass HITANS8(H", "answers": ["    parameter = DataElementGroupField(type=ParameterTwostepTAN6)"], "all_classes": null, "length": 1364}
{"pred": "\n            # Get Julian date from time\n            jd = datetime2JD(self.img_handle.time)\n\n            # Add to JSON file\n            json_dict['time'] = jd\n\n        else:\n            json_dict['time'] = self.config.time", "answers": ["            jdt_ref = datetime2JD(self.img_handle.beginning_datetime)"], "all_classes": null, "length": 7066}
{"pred": "\n            mPublicRoomsListList = getPublicRoomsList();\n            mAdapter.notifyDataSetChanged();\n        }\n\n    private void updateRoomList() {\n        if (mPublicRoomsListList != null) {\n            mAdapter.notifyDataSetChanged();\n        }", "answers": ["        refreshPublicRoomsList(new ArrayList<MXSession>(Matrix.getInstance(getApplicationContext()).getSessions()), new ArrayList<String>(), 0, new ArrayList<List<PublicRoom>>());"], "all_classes": null, "length": 11122}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.MyBingoCardManager = BingoCardManager(bot.dbi)"], "all_classes": null, "length": 2756}
{"pred": "       chim_detect = ChimeraDetector(raw_bp_graphs, target_sequences,\n                                      phylogeny, naming_ref)\n\n    #running synteny backend to get synteny blocks\n    for stage in run_stages:\n       ", "answers": ["        chim_detect = ChimeraDetector(raw_bp_graphs, run_stages, target_sequences)"], "all_classes": null, "length": 3779}
{"pred": "       plugins.registerEvents(new BlockLockerCommand(this), this);\n        plugins.registerEvents(new BlockPlaceListener(this), this);\n        plugins.registerEvents(new InteractListener(this), this);\n        plugins.registerEvents(new SignChangeListener(this), this);", "answers": ["        plugins.registerEvents(new BlockPlaceListener(this), this);"], "all_classes": null, "length": 9739}
{"pred": "                   initMiPush();\n                    Log.e(MYTAG, \"使用MiPush推送\");\n                }else {\n                    Log.e(MYTAG, \"不使用MiPush推送\");\n                }\n                break;\n       ", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 810}
{"pred": "       registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<String>>(\n                SET_OBJECT_NAME));\n        registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^", "answers": ["        registry.put((byte) (QUERY_NAMES ^ RESPONSE_MASK), new MarshalledResponseHandler<Set<ObjectName>>(SET_OBJECT_NAME));"], "all_classes": null, "length": 874}
{"pred": "\n    public PersonalVulnsWindow() {\n        initComponents();\n        setTitle(\"Personal Vulns\");\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        // set up the tree\n        TreeModel model = new DefaultTreeModel();\n", "answers": ["    protected VulnTitleDocumentListener titleDocumentListener;"], "all_classes": null, "length": 6412}
{"pred": "\n    public Panel() {\n        super();\n        // ...\n    }\n\n    public void setGCTraceSet(GCTraceSet gcTraceSet) {\n        this.gcTraceSet = gcTraceSet;\n        // ...\n    }\n\n    public void add", "answers": ["    synchronized public void gcTraceAdded(GCTrace gcTrace) {"], "all_classes": null, "length": 3894}
{"pred": "       if (packet.isAckRequested()) {\n            AckRequest ackRequest = new AckRequest(packet, client);\n            ackManager.acknowledge(ackRequest);\n        }\n        if (packet.isJson()) {\n            onJsonPack", "answers": ["        final AckRequest ackRequest = new AckRequest(packet, client);"], "all_classes": null, "length": 3313}
{"pred": "       VideoTrack videoTrack = lMS.createVideoTrack(\"videoTrack\", \"video\");\n        videoTrack.addRenderer(new VideoRenderer(this, videoTrack));\n      }\n    }\n  }\n\n  @Override\n  public void onAddStream(MediaStream stream) {\n", "answers": ["        VideoCapturer capturer = getVideoCapturer();"], "all_classes": null, "length": 4567}
{"pred": "\n        }\n    }\n\n    private static class JobRequest {\n\n        public static final String TAG = \"JobRequest\";\n\n        public static final String COLUMN_ID = \"id\";\n        public static final String COLUMN_TAG = \"tag\";\n        public static final String", "answers": ["            contentValues.put(JobStorage.COLUMN_BACKOFF_MS, JobRequest.DEFAULT_BACKOFF_MS);"], "all_classes": null, "length": 1101}
{"pred": "   @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // Set the content view\n        setContentView(R.layout.settings);\n\n        // Initialize the preferences\n        initializePreference();\n\n        // Set the action bar title\n", "answers": ["    private CheckBoxPreferenceHideScore preferenceHideScore;"], "all_classes": null, "length": 10487}
{"pred": "   # ...\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    journal = DiskJournal(basedir, system_data_path)"], "all_classes": null, "length": 1503}
{"pred": "```\n    def determine_executable(self, desktop_file):\n        # ...\n```\nI hope this helps! Let me know if you have any questions.", "answers": ["            WebappSupport(self.config.install_files.find_package_name()).update(docker_config)"], "all_classes": null, "length": 1474}
{"pred": "\n    Iterable<Board> its = SMTHHelper.getInstance().wService.getAllBoardsFromWWW().flatMap(new Function<ResponseBody, Observable<Board>>() {\n      @Override public Observable<Board> apply(@NonNull ResponseBody responseBody) throws Exception {\n", "answers": ["    final List<BoardSection> sections = new ArrayList<>();"], "all_classes": null, "length": 6174}
{"pred": "       DatabaseManager.INSTANCE.getUserDAO().getUsers(new GetImageWithoutSavingTask.Callback() {\n            @Override\n            public void onFinish(List<User> users) {\n                SearchContactFragment.this.users = users;\n                mAdapter = new", "answers": ["        FragmentObservable<SearchContactFragment, DataClass> obs"], "all_classes": null, "length": 2473}
{"pred": "\t\tString testClass = generateTestClass(model, testDataFactories, monitor, writeTML);\n\t\tString testPackage = generateTestPackage(model, testDataFactories, monitor, writeTML);\n\t\tString testName = generateTestName(model, testDataFactories", "answers": ["\tTest tmlTest = model.getTmlTest();\r"], "all_classes": null, "length": 12855}
{"pred": "       client = SimulatorDataClient()\n        client.add_simulator_data_listener(self.simulator_data_received)\n        client.start_engines()\n        client.trim()\n        client.print_aircraft_state()\n        #client.send_", "answers": ["        simulator_data_client = SimulatorDataClient()"], "all_classes": null, "length": 2438}
{"pred": "           showResponse = true;\n            textareaMessage.setText(httpMessage.getRes().getResponse());\n            textareaMessage.setCaretPosition(0);\n            textareaMessage.requestFocusInWindow();\n        } else {\n            showResponse = false;\n            textarea", "answers": ["            if (httpMessage instanceof SentinelHttpMessageOrig) {"], "all_classes": null, "length": 7725}
{"pred": "   assert simple_table_status(description) == expected_status\n\n\n@pytest.mark.parametrize(\"table_status, gsi_status, expected_status\", [\n    (\"ACTIVE\", \"ACTIVE\", ready),\n    (\"ACTIVE\", None, ready),", "answers": ["    assert simple_table_status(description) == expected_status"], "all_classes": null, "length": 2942}
{"pred": "\n    def load(self, filething, known_frames=None, translate=True, v2_version=4,\n             load_v1=True):\n        \"\"\"Load tags from a filename.\n\n        Args:\n            filething (filething): or `None`\n", "answers": ["    @loadfile(writable=True)"], "all_classes": null, "length": 1671}
{"pred": "     visitProxOp(new VisitOrd3(n), query);\n\n      return null;\n    }\n\n    visitCheckForProx(new VisitOrd3(n), query);\n\n    return null;\n  }\n\n  public void visitCheckForBoolean(Vis", "answers": ["      visitBooleanOp(new VisitOrd3(n), opToOccur.get(op));\r"], "all_classes": null, "length": 6338}
{"pred": "                   new EmbossTransformation(),\n                    new EdgeTransformation(),\n                    new GlowTransformation(),\n                    new HueTransformation(),\n                    new InvertTransformation(),\n                    new KaleidoscopeTransformation(),\n                    new LevelsTransformation(),\n", "answers": ["                    new EmbossTransformation()"], "all_classes": null, "length": 5909}
{"pred": "\n    def _decode_field(self, field):\n        # decode the field\n        value = self._orientSocket.recv(field['bytes'])\n        if value is None:\n            raise PyOrientConnectionException(\"Socket error\", [])\n        return value.decode(self._", "answers": ["            more = self._decode_field( FIELD_BOOLEAN )"], "all_classes": null, "length": 1697}
{"pred": "   api = BMUNITSEARCH(args.apikey)\n    if not api.get_data(**{'Unit': args.unit or 'All'}):\n        print(\"No data returned.\")\n        return None\n\n    fmt = StdoutFormatter(\"15s\",", "answers": ["    bd = BalancingData(args.apikey)"], "all_classes": null, "length": 1327}
{"pred": "\t\t\t\titem = new GalleryAlbum();\n\t\t\t\titem.setCoverId( proxy.getCoverId() );\n\t\t\t\titem.setCoverWidth( proxy.getCoverWidth() );\n\t\t\t\titem.setCoverHeight( proxy", "answers": ["\t\t\t\titem = new GalleryAlbum( proxy );"], "all_classes": null, "length": 6615}
{"pred": "   assert dump_key(engine, user) == user_key\n\n\ndef test_extract_key(engine):\n    user = User(id=\"foo\")\n    key = {\"id\": {\"S\": \"foo\"}}\n    assert extract_key(engine, user) == key\n", "answers": ["    assert dump_key(engine, user) == user_key"], "all_classes": null, "length": 3387}
{"pred": "       new ProgressMonitor(ProgressMonitor.create(\"My Task\", 10L), \"my-task\")),\n        new ProgressBar(10, BAR_EQUALS),\n        new Spinner(BAR_EQUALS),\n        new TaskName(),\n", "answers": ["          StringWrapper.wrap(\"[\", new ProgressBar(10, new char[]{'C', '<', 'o'}), \"]\")),"], "all_classes": null, "length": 3034}
{"pred": "\tpublic static <T> T tag(Class<T> clazz, String name, Object value) {\n\t\treturn clazz.cast(PageTagFactory.INSTANCE.createElement(name, value));\n\t}\n\n\tpublic static <T> T tag(Class<T> cla", "answers": ["\tpublic static A link(Url destination) {"], "all_classes": null, "length": 7830}
{"pred": "           event = Event(e)\n            events.append(event)\n\n        return events\n\n    def create_event(self, name, description, severity, impact, timestamp):\n        params = {\"name\": name, \"description\": description, \"severity\": severity, \"", "answers": ["            events.append(Event(e))"], "all_classes": null, "length": 2406}
{"pred": "   Matcher<? super ParameterHolder> parameterHolderMatcher) {\n        return BatchParameterHolderAssertions.batch(index, parameterHolderMatcher);\n    }\n\n    /////////////////////////////////////////////////////////////////////////////\n    // ParameterHolderAssertions\n    /////////////////////////////////////////////////////////////////////////////\n\n", "answers": ["            Matcher<? super ParameterHolder> parameterHolderMatcher) {"], "all_classes": null, "length": 1222}
{"pred": "           WallpaperApplyTask.create(this, mWallpaper).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);\n        } else if (id == R.id.menu_cancel) {\n            WallpaperPropertiesLoaderTask.create(this, m", "answers": ["            Popup popup = Popup.Builder(this)\r"], "all_classes": null, "length": 7636}
{"pred": " private static final int MAX_DEPTH = 100;\n\n  private static final int MAX_TOKEN_LENGTH = 100;\n\n  private static final int MAX_OPERATOR_LENGTH = 100;\n\n  private static final int", "answers": ["  private static final Map<Operator, List<Occur>> opToOccur = new HashMap<Operator, List<Occur>>(\r"], "all_classes": null, "length": 4297}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\tR=Reader('genotype')"], "all_classes": null, "length": 5218}
{"pred": "       self.beginning_datetime = filenameToDatetime(self.vid_path)\n\n        # If the file name does not contain the time, try to guess it\n        if self.beginning_datetime is None:\n            self.beginning_datetime = datetime.datetime(19", "answers": ["        self.beginning_datetime = unixTime2Date(self.vidinfo.ts, self.vidinfo.tu, dt_obj=True)"], "all_classes": null, "length": 2177}
{"pred": "   p.set_data(data)\n\nperi/viz/interaction.py:10\n-------------------------\n    def __init__(self, state, size=8, cmap_abs='bone', cmap_diff='RdBu',\n            incsize=1", "answers": ["    i = ilms.BarnesStreakLegPoly2P1D(npts=(16,10,8,4), zorder=8)"], "all_classes": null, "length": 4405}
{"pred": "\t\tFoodModifier.sync(player);\n\t}\n}\n\nIssue:\n\n1. The `FoodModifier` class has a lot of static variables and methods that are not properly initialized or synchronized. This can cause issues with the mod's functionality and stability,", "answers": ["\t\tPacketDispatcher.get().sendTo(new PacketConfigSync(), player);"], "all_classes": null, "length": 2242}
{"pred": "       comments = Comment.objects.filter(post=post)\n        comments_count = comments.count()\n        comment_weight = 0.2\n        gravity = 1.5\n        amplifier = 100000\n        rank = (comments_count + (comment", "answers": ["        nodes = Comment.objects.filter(post=post).filter(deleted=False)"], "all_classes": null, "length": 1352}
{"pred": "\t\t\t\t\t\tCustomGridLayer customGridLayer = (CustomGridLayer) natTable.getLayer(0);\n\t\t\t\t\t\tILayerCell clickedCell = customGridLayer.getLayer(customGridLayer.getClickedCellIndex());\n\t\t\t\t\t\tclick", "answers": ["\t\t\t\t\t\tsetSelection(new SingleCellSelection(selectedCells.iterator().next()));"], "all_classes": null, "length": 6895}
{"pred": "   def __init__(self):\n        super(RevocationKey, self).__init__()\n        self.keyclass = 0x40\n\n    def __bytearray__(self):\n        _bytes = super(RevocationKey, self).__bytearray__()\n", "answers": ["    @keyclass.register(RevocationKeyClass)"], "all_classes": null, "length": 1803}
{"pred": "   if is_processing_instruction_node(item):\n        yield item\n\n\n# vim: et:\n\n\nIn the code above, the `XPath1Parser` class defines a set of methods that can be used to parse and evaluate XPath expressions. These methods include `method", "answers": ["        if is_processing_instruction_node(item):"], "all_classes": null, "length": 3927}
{"pred": "   client.send('pw', client['id'], puffleById[puffle.id], puffle.type, puffle.subtype, int(isWalking), puffle.hat)\n\nI'm not sure what you're trying to accomplish, but", "answers": ["@PacketEventHandler.onXT_AS2('s', 'p#pg', WORLD_SERVER)\r"], "all_classes": null, "length": 1190}
{"pred": "   image = util.Image(P, H, I, tile=tile)\n\ndef get_particles_featuring(feature_rad, state_name=None, im_name=None,\n                            use_full_path=False, actual_rad=None, invert=", "answers": ["    B = GlobalScalar('bkg', 0.0)"], "all_classes": null, "length": 1870}
{"pred": "           manager = mp.Manager()\n            error_dict = manager.dict()\n            return_queue = manager.Queue()\n            stopped = Stopped()\n            procs = []\n            for i, args in enumerate(jobs):\n                function = CompileInformationFunction(args)\n", "answers": ["            alignment_info = run_mp("], "all_classes": null, "length": 3045}
{"pred": "   platepar, good = alignPlatepar(config, platepar, calstars_time, calstars_coords, scale_update=False, show_plot=False)\n\nThe function alignPlatepar() is defined in the RMS/Astrometry/FFT", "answers": ["    platepar.rotation_from_horiz = rotationWrtHorizon(platepar)"], "all_classes": null, "length": 7224}
{"pred": "       contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);\n        contentValues.put(JobStorage.COLUMN_BACKOFF_MS, 20_000L);\n        contentValues.put(JobStorage.", "answers": ["        contentValues.put(JobStorage.COLUMN_END_MS, 120_000L);"], "all_classes": null, "length": 1089}
{"pred": "       FragmentObservable<Chat> fragmentObservable = new FragmentObservable<>();\n        fragmentObservable.register(this);\n        fragmentObservable.register(getActivity());\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View", "answers": ["        Log.d(this.getClass().getSimpleName(), \"onStart\");"], "all_classes": null, "length": 3957}
{"pred": "       model = Progress\n        fields = ['indicator', 'target', 'area', 'code']\n\nI'm not sure what you're asking, but it seems like you're trying to create a Django filter for a custom model. Is that correct? If so, you'll need to", "answers": ["        model = Progress"], "all_classes": null, "length": 2383}
{"pred": "           fab.setOnClickListener(this);\n        }\n    }\n\n    @ViewById\n    protected View fab;\n\n    @ViewById\n    protected View dataList;\n\n    @ViewById\n    protected CheckBox dialog;\n\n    @ViewById\n    protected Button submit;\n\n    @", "answers": ["            subcategoryFilter.setVisibility(presenter.getProduceData().getCategory().equals(Constants.VEGETABLE) ? VISIBLE : GONE);"], "all_classes": null, "length": 2147}
{"pred": "\n            @Override\n            protected void onSuccess(final Channel channel) {\n                context.setConnectionState(new ConnectedConnectionState(channel, true));\n                deferred.setResult(null);\n            }\n\n            @Override\n            protected void onFailure(final Throwable", "answers": ["        }).then(new ExecuteOn<Channel>(context.getExecutor())).then(new Accept<Channel>() {"], "all_classes": null, "length": 2841}
{"pred": "               new RegisterFragment().onPostRegisterExecute(success, email, password, message));\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                new RegisterFragment.RegistrationParam(success, email, password, message));"], "all_classes": null, "length": 3197}
{"pred": "\n    private final SpatialOperator spatial;\n\n    private final int k;\n\n    private final int t;\n\n    private final AtomicInteger counter = new AtomicInteger(0);\n\n    private final Map<Candidate, Integer> counters = new ConcurrentHashMap<>();\n", "answers": ["    private final Router<Road, RoadPoint> router;"], "all_classes": null, "length": 4427}
{"pred": "   private List<String>[] data;\n    private int menuCount;\n    private int bottomMargin;\n\n    public DropMenuAdapter(Context context, OnFilterDoneListener onFilterDoneListener, int menuCount, int bottomMargin) {\n        this.mContext = context;\n", "answers": ["    private List<FilterType> list;"], "all_classes": null, "length": 1155}
{"pred": " message = args.gps_sv[0].getMessage()\n  assert message.prn == 0\n  assert message.tow0 == 0\n  assert message.n_msg0 == 0\n  assert message.n_prefixBits == 50\n\n", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ConstMessage)"], "all_classes": null, "length": 6443}
{"pred": "   def _render_stroke(self):\n        stroke = self.style.stroke\n        stroke_width = self.style.stroke_width\n\n        is_miter = self.style.stroke_linejoin == 'miter'\n\n        miter_limit = self.style.", "answers": ["        graphics.draw_colored_triangles("], "all_classes": null, "length": 2917}
{"pred": "\t\t\t\ta = new AppData();\n\t\t\t\ta.read(reader, data);\n\t\t\t\tapps.add(a);\n\t\t\t\tneedSave = true;\n\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t", "answers": ["\t\t\t\tif (data.startsWith(AppData.COMPONENT)) {"], "all_classes": null, "length": 5932}
{"pred": "\n                if (isOpsNeed2Add) {\n                    // do nothing\n                } else {\n                    // do something\n                }\n\n                if (isAppSetNeed2Add) {\n                    // do something\n                } else {\n                    // do nothing", "answers": ["                if (AppSettingsAction.isShow && AppSettingsAction.isShowInStatusBar) {"], "all_classes": null, "length": 6107}
{"pred": "       self.duration = angularSeparation(self.beg_vect, self.end_vect)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.beg_azim, self.beg_alt = raDec2AltAz(self.ra_array[0], self.dec_array[0], self.jd_array[0], \\"], "all_classes": null, "length": 2354}
{"pred": "\t\tString name = fhead.ID().getText();\n\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(name);\n\t\tMMethod m = new MMethod(s);\n\t\tclassInFile.addMember(m);\n\t}\n\n\t@Override\n", "answers": ["\t\tFunctionSymbol s = (FunctionSymbol)currentScope.resolve(fhead.ID().getText());"], "all_classes": null, "length": 1508}
{"pred": "\n    void add(NodeAdditionVisitor visitor);\n\n    void visit(NodeNavigationVisitor visitor);\n\n    void visitInvisible(NodeNavigationVisitor visitor);\n}", "answers": ["    boolean enter(ArgumentsNode node);"], "all_classes": null, "length": 2820}
{"pred": "\n    @Override\n    public void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        this.typeUtils = processingEnvironment.getTypeUtils();\n        this.elementUtils = processingEnvironment.getElementUtils();\n        this.messager = processingEnvironment.get", "answers": ["    private CodeGeneratorFactory codeGeneratorFactory;"], "all_classes": null, "length": 946}
{"pred": "       bind(GerritHttpAuthDataProvider.class).toInstance(new GerritHttpAuthDataProvider());\n        bind(GerritRestModule.class).asEagerSingleton();\n        bind(GerritRestApiFactory.class).toInstance(new GerritRestApiFactory", "answers": ["        bind(GerritToolWindow.class);"], "all_classes": null, "length": 4727}
{"pred": "                   if (parseLong(zxid.substring(2), 16) == i) {\n                        snapFile = snapshots.get(i);\n                        break;\n                    }\n                    i--;\n                }\n            }\r\n            if (snap", "answers": ["                    long snapZxid = getZxidFromName(snapshots.get(i).getName());\r"], "all_classes": null, "length": 3597}
{"pred": "           entries = [e for e in entries if query(e.description)]\n        if filter_type == FilterType.Date:\n            entries = [e for e in entries if e.date in date_range]\n        return entries\n\n    def _create_pane(self, p", "answers": ["            entries = [e for e in entries if txn_matches(e.transaction, query)]"], "all_classes": null, "length": 2342}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        Int('mark', Pt=0xFF, Type='uint8', Repr='hex'),"], "all_classes": null, "length": 8539}
{"pred": "\t\t\t\t\t\tsearchList.setVisibility(View.GONE);\n\t\t\t\t\t\ttabLayout.setVisibility(View.GONE);\n\t\t\t\t\t\tscanButton.setVisibility(View.GONE);\n\t\t\t\t\t\treturn Observable.just", "answers": ["\t\t\t\t\t\treturn Db.getAllHistoricSearches(this).toList();"], "all_classes": null, "length": 6890}
{"pred": "   image = np.zeros((100, 100, 3), dtype=np.uint8)\n    for i in range(100):\n        for j in range(100):\n            x, y = i / 100.0,", "answers": ["    part = objs.PlatonicSpheresCollection(POS, rad, zscale=0.89)"], "all_classes": null, "length": 4378}
{"pred": "```\n    result, index = apply_fast_and(left.values, right.values, left.index, right.index)\n    return Column(result, index)\n\n    else:\n        return Column(operator.and(left.values, right), left.index)\n\n", "answers": ["        result, index = apply_fast_and(left.values, right.values,"], "all_classes": null, "length": 1868}
{"pred": "                   Request request = RequestFragment.sSelectedRequests.get(i);\r\n                    if (request.getIcon() == null) {\r\n                        mError = Extras.Error.ICON_REQUEST_NULL;\r\n                        return false;\r\n                    }\r\n                    if (", "answers": ["                    Request request = CandyBarMainActivity.sMissedApps.get(RequestFragment.sSelectedRequests.get(i));\r"], "all_classes": null, "length": 7302}
{"pred": "           instance, (int, float, Decimal, AbstractDateTime, Duration)\n        ) and not isinstance(instance, bool)\n\n    def __subclasscheck__(cls, subclass: type) -> bool:\n        if issubclass(subclass, bool):\n            return False\n", "answers": ["            instance, (int, float, Decimal, AbstractDateTime, Duration, UntypedAtomic)"], "all_classes": null, "length": 3159}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            return SearchMenuPage()"], "all_classes": null, "length": 1886}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                exist = checkFileExistence(pattern.get(\"Datafile\"))"], "all_classes": null, "length": 4337}
{"pred": "   serializer_class = PlanSerializer\n    filter_class = PlanFilter\n    ordering_fields = ('id', 'code', 'name', 'goal')\n\n\nclass GoalViewSet(ModelViewSet):\n    queryset = Goal.objects.all()\n    serializer_", "answers": ["    serializer_class = PlanSerializer"], "all_classes": null, "length": 2928}
{"pred": "\n    private StarItemAdapter starItemAdapter;\n    private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitService commitService;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private GitHubClient", "answers": ["    private BookmarkItemAdapter bookmarkItemAdapter;"], "all_classes": null, "length": 5578}
{"pred": "\t\tFile input = new File(\"src/test/resources/input.xml\");\n\t\tFile output = new File(\"src/test/resources/output.fo\");\n\t\ttry {\n\t\t\tddi2fo.process(input, preprocessors, postprocessors, base", "answers": ["\t\tGenerationService genServiceDDI2PDF = new GenerationService(preprocessors, ddi2fo, postprocessors);"], "all_classes": null, "length": 2790}
{"pred": "                       // Send the email\n                        new SendEmailTask().execute();\n                    }\n                });\n\n        // \"Cancel\" button to dismiss the dialog\n        alert.setNegativeButton(R.string.cancel,\n                new DialogInterface.OnClickListener() {\n                    public", "answers": ["                        new ChangePasswordTask(user).execute(\"1\");"], "all_classes": null, "length": 4167}
{"pred": "```\n    url(r'^$', PackagesSettingsView.as_view(), name=\"settings-packages\"),\n    url(r'^new$', staff_member_required(NewPackageView.as_view()),\n        name=\"package-new\"),\n    url(r'^", "answers": ["    url(r'^$', PackageSettingsView.as_view(), name=\"settings-packages\"),"], "all_classes": null, "length": 5288}
{"pred": " encoder = GPSL1L2BitEncoder(NormalRateConfig)\n  assert isinstance(encoder, EncoderBase)\n  assert isinstance(encoder, TwoBandsBitEncoder)\n  assert encoder.bandIndexes[0] == NormalRateConfig.", "answers": ["  encoder = GPSL1L2BitEncoder(NormalRateConfig)"], "all_classes": null, "length": 2343}
{"pred": "   return tgAsDict[\"entries\"]\n\n\ndef run_insert(\n    tg,\n    start,\n    duration,\n    collisionMode=\"error\",\n):\n    \"\"\"\n    Mock write function and return the first tier's entry list\n\n    tg.save()", "answers": ["    savedTg = textgrid._dictionaryToTg(tgAsDict, constants.ErrorReportingMode.ERROR)"], "all_classes": null, "length": 1462}
{"pred": "                       procs.append(KaldiProcessWorker(function, return_queue, stopped))\n                        procs[i].start()\n                    try:\n                        pbar.update(1)\n                    except StopIteration as e:\n                        pbar.close()", "answers": ["                    p = KaldiProcessWorker(i, return_queue, function, error_dict, stopped)"], "all_classes": null, "length": 7044}
{"pred": "\n    def _check_dataset(self, dataset):\n        # check sequence meta information\n        for seq_name, seq_meta in dataset.seq_metas.items():\n            assert seq_meta['folder_name'] in dataset.seq_dirs\n            assert seq_meta['", "answers": ["            dataset = UAV123(root_dir, version)"], "all_classes": null, "length": 4283}
{"pred": "   void add(FixTag tag, Object value);\n    void add(FixTag tag, Double value);\n    void add(FixTag tag, Int value);\n    void add(FixTag tag, Long value);\n    void add(FixTag tag, Boolean value);", "answers": ["    String getString(FixTag tag) throws NoSuchTagException;"], "all_classes": null, "length": 7571}
{"pred": "           yield self.load(group=group, chunk_key=chunk_idx, name=name)\n\n    def load(self, group, chunk_key, name):\n        \"\"\"Load a chunk.\"\"\"\n        assert chunk_key >= 0\n        assert name is None or name in", "answers": ["            yield Bunch(bounds=bounds,"], "all_classes": null, "length": 2181}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {\n\t\t\t//TODO\n\t\t\treturn new ExpansionResult();\n\t\t}\n\t}\n\n\t@Override\n\tpublic ExpansionResult expand(AlvisIRQueryNode", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRAnyQueryNode anyQueryNode, Void param) {"], "all_classes": null, "length": 4505}
{"pred": "\tprivate Validator validator;\n\t\n\tpublic ParameterizedGenerationService(Pipeline pipeline, ValorizatorParameters valorizatorParameters) {\n\t\tthis.pipelineGenerator = new PipeLineGeneratorImpl();\n\t\tthis.valorizatorParameters = valorizatorParameters", "answers": ["\tprivate Validator validator;"], "all_classes": null, "length": 4484}
{"pred": "       registry.put((byte) (REMOVE_NOTIFICATION_LISTENER ^ RESPONSE_MASK), new MarshalledResponseHandler<Void>(VOID));\n        registry.put((byte) (SEND_NOTIFICATION ^ RESPONSE_MA", "answers": ["        registry.put((byte) (CREATE_MBEAN ^ RESPONSE_MASK), new MarshalledResponseHandler<ObjectInstance>(OBJECT_INSTANCE));"], "all_classes": null, "length": 1054}
{"pred": "                       viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager.printToConsole();\n                        viewManager", "answers": ["                        Result res = lp.detectLanguage(content, this.lang);"], "all_classes": null, "length": 3960}
{"pred": "       return lines\n\n    def render(self, obj):\n        if isinstance(obj, BufrMessage):\n            return self._render_bufr_message(obj)\n        elif isinstance(obj, TemplateData):\n            return self._render_template_data(obj)", "answers": ["        elif isinstance(descriptor, OperatorDescriptor):"], "all_classes": null, "length": 2830}
{"pred": "```\n    def _get_return_code(self, return_code_list):\n        error_return_code = None\n\n        for return_code in return_code_list:\n            if return_code == 0:\n                return return_code\n\n        error_return", "answers": ["        default=Tc.ValueRange.LatencyTime.MIN,"], "all_classes": null, "length": 2806}
{"pred": "       contacts = Contact.objects.filter(phone_number=self.phone_number)\n        return contacts\n\n    def get_message(self, message_direction):\n        message = Message.objects.filter(direction=message_direction, contact=self.contact).first()\n        return", "answers": ["        self.contacts = Contact.objects.filter(phone_number=self.phone_number)"], "all_classes": null, "length": 1001}
{"pred": "   pipeline.apply(\"Read live projects\", Read.from(new CloudResourceManagerSource(org)));\n\n    // Convert GCPProject objects to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCPResourceState>> liveResourceStates =\n        liveProjects.", "answers": ["        pipeline.apply(\"Read live projects\", Read.from(new LiveProjectSource(org)));"], "all_classes": null, "length": 4274}
{"pred": "       super().setUp()\n\n    def test_get_tail_pattern(self):\n        generator = SimilarPathGenerator()\n        self.assertEqual(generator.get_tail_pattern(\"http://example.com/\"), \"/\")\n        self.assertEqual(generator.get_tail", "answers": ["        self.pg = SimilarPathGenerator()"], "all_classes": null, "length": 1909}
{"pred": "       ffibuilderRX.cdef(preimageRXDA.header)\n        ffibuilderRX.set_source(module_name, preimageRXDA.source)\n\n        cls.tmpdirnameRX = tempfile.TemporaryDirectory()\n", "answers": ["        ffibuilderRX.cdef(preimageRXDA.header)"], "all_classes": null, "length": 4340}
{"pred": "       conditions.append(condition_for(operation, column))\n    return conditions\n\n\ndef test_condition_for():\n    conditions = conditions_for(\"and\", column=MockColumn(\"c\"))\n    assert len(conditions) == 2\n    assert conditions[0].operation ==", "answers": ["        left = ComparisonCondition(\"==\", column, value)"], "all_classes": null, "length": 2410}
{"pred": "       assert get_square_idx(row=2, col=3) == 2\n\n\nclass TestDutchNationalPartition(object):\n    \"\"\"\n    Question 6.1\n    \"\"\"\n\n    def test_book_example(self):\n        assert dutch_n", "answers": ["        assert 0 == get_square_idx(1, 1)"], "all_classes": null, "length": 1895}
{"pred": "\n    private final Testprio selectedTestprio;\n\n    private final Vector<IMethod> methods;\n\n    private final Vector<IMethod> checkedMethods;\n\n    private final Vector<IMethod> uncheckedMethods;\n\n    private final Vector<IMethod> allMethods;", "answers": ["    private GroupMethodSelectionCtrl methodSelection;"], "all_classes": null, "length": 13158}
{"pred": "\nclass Scales(object):\n  def __init__(self, host, port):\n    self.host = host\n    self.port = port\n    self.sockets = {}\n\n  def create_socket(self, host, port):\n    sock = gsocket(", "answers": ["      Source(service=global_properties[SinkProperties.Label]))"], "all_classes": null, "length": 1650}
{"pred": "\tprivate AbstractModelFactory modelFactory;\n\tprivate LapdfDocument document;\n\tprivate List<PageBlock> pageBlocks = new ArrayList<PageBlock>();\n\tprivate List<ChunkBlock> chunkBlocks = new ArrayList<ChunkBlock>();\n\tprivate List<WordBlock> wordBlock", "answers": ["\tprivate ArrayList<PageBlock> pageList;"], "all_classes": null, "length": 3820}
{"pred": "     var result = cmdLine.execute();\n      if (result != 0) {\n        log.error(null, __ -> \"javadoc execution failed\");\n        return result;\n      }\n      var output = new StableList<>(output.getFile(), output.getParent", "answers": ["        () -> walkIfNecessary(List.of(input), pathFilenameEndsWith(\".java\")));  //FIXME, use rootNames ??"], "all_classes": null, "length": 6061}
{"pred": "       return RespostaSAT.analisar(retorno)\n\n    def enviar_dados_venda(self, dados_venda):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.enviar", "answers": ["        return RespostaSAT.comunicar_certificado_icpbrasil(retorno)"], "all_classes": null, "length": 4505}
{"pred": "       registerCallAction(new ToggleSpeakerAction(this), ToggleSpeakerAction.TOGGLE_SPEAKER_ACTION_ID);\n        registerCallAction(new ToggleMicrophoneAction(this), ToggleMicrophoneAction.TOGGLE_MICROPH", "answers": ["        registerCallAction(new ToggleRingerAction(this), ToggleRingerAction.TOGGLE_RINGER_ACTION_ID);"], "all_classes": null, "length": 1543}
{"pred": "   try:\n      result = self.commands[name](gopts, argv)\n    except ManifestParseError as e:\n      git_trace2_event_log.error(e)\n      result = 1\n    except Exception as e:\n      git_trace2_", "answers": ["    outer_client = RepoClient(self.repodir)"], "all_classes": null, "length": 2030}
{"pred": "   @Named(ApiModule.class)\n    Module provideApiModule() { return new ApiModule(app); }\n\n    @Provides @Singleton\n    Ion provideIon(Application app) {\n        return Ion.getDefault(app);\n    }\n\n   ", "answers": ["    Prefs providePrefs(SharedPreferences sharedPreferences) {"], "all_classes": null, "length": 10673}
{"pred": "       Assert.assertThat(ds, totalQueryCount(3));\n\n        // when\n        List<QueryExecution> queryExecutions = new ArrayList<>();\n        queryExecutions.add(getMockSelectQueryExecution());  // select\n        queryExecutions.add(getMockSelectQueryExecution());", "answers": ["        Assert.assertThat(ds, totalQueryCount(5));"], "all_classes": null, "length": 1701}
{"pred": "       return new SvnJavaChangeLogCommand();\n    }\n\n    protected SvnCommand getCheckInCommand()\n    {\n        return new SvnJavaCheckInCommand();\n    }\n\n    protected SvnCommand getCheckoutCommand()\n    {\n        return new SvnJava", "answers": ["        return new SvnJavaChangeLogCommand();"], "all_classes": null, "length": 4425}
{"pred": "       verifiers.put(\"Local Files Exist\", new LocalFilesExistVerifierImpl());\n        verifiers.put(\"Remote Files Exist\", new RemoteFilesExistVerifierImpl());\n        verifiers.put(\"Valid Schema Name\", new ValidSchemaNameVerifierImpl());\n   ", "answers": ["        VerifierProperty settings = null;"], "all_classes": null, "length": 7065}
{"pred": "           showProgress(false);\n        }\n    }\n\n    private boolean yasmeDeviceCheck() {\n        // check if there is a device in the Database\n        SharedPreferences devicePrefs = getSharedPreferences(DEVICE_PREFS, MODE_PRIVATE);\n        long", "answers": ["            ServerInfo serverInfo = DatabaseManager.INSTANCE.getServerInfo();"], "all_classes": null, "length": 4173}
{"pred": "\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    DrupalUser login(String username, String password) throws DrupalLoginException, DrupalFetchException;"], "all_classes": null, "length": 2018}
{"pred": "       self.history.apply(text)\n        self.textInput.changeTheme(self.parent().theme)\n        self.textInput.focusInEvent(self.textInput.changeTheme(self.parent().theme))\n        self.textInput.keyPressEvent(self.text", "answers": ["        lexmsg = lexMessage(text)"], "all_classes": null, "length": 2662}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            (r'/login\\/{0,1}', LogInHandler),"], "all_classes": null, "length": 5045}
{"pred": "\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {\n\t\t\tList<MatchExplanation> explanations = getPrefixQueryNodeExplanations(prefixQueryNode);\n\t\t\treturn expandAtom(explanations);\n\t\t", "answers": ["\t\tpublic ExpansionResult visit(AlvisIRPrefixQueryNode prefixQueryNode, Void param) {"], "all_classes": null, "length": 4265}
{"pred": "               throw new ProtTestInternalException(\"Invalid selection criterion: \" + criterion);\n        }\n\n        return informationCriterion.getChunk();\n    }\n\n    /* (non-Javadoc)\n     * @see es.uvigo.darwin.pro", "answers": ["                throw new ProtTestInternalException(\"Unexistent information criterion\");"], "all_classes": null, "length": 11285}
{"pred": "   return Pair(e1, e2, ty1, ty2)\n\n\n@with_info(st_typ)\ndef type_of(expr):\n    \"\"\"Return the type of an expression.\n    \n    Arguments:\n    - `expr`: an expression\n   ", "answers": ["    return Pair(e1, e2, typ_mul(ty1, ty2))"], "all_classes": null, "length": 1720}
{"pred": "   void inject(AudioBookPlayerModule audioBookPlayerModule);\n    void inject(PlaybackService playbackService);\n    void inject(KioskModeHandler kioskModeHandler);\n    void inject(AnalyticsTracker analyticsTracker);\n    void inject(EventBus eventBus", "answers": ["    void inject(BatteryStatusIndicator batteryStatusIndicator);"], "all_classes": null, "length": 6897}
{"pred": "\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.chart_category, container, false);\n        mNoExpensesContainer = view.findViewById(R.id.no_", "answers": ["    CreditPeriod creditPeriod;"], "all_classes": null, "length": 4279}
{"pred": "   response = PyramidSwaggerResponse(\n        body='{\"message\": \"Hello, World!\"}',\n        content_type=None,\n        status_code=500\n    )\n    with pytest.raises(ResponseValidationError):\n        handle_request(response", "answers": ["    with pytest.raises(ResponseValidationError) as excinfo:"], "all_classes": null, "length": 1725}
{"pred": "\tpublic void execute(String[] args) {\n\t\t// ...\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\tprivate DocumentGraphEditor editor;"], "all_classes": null, "length": 3498}
{"pred": "\n    def add_file(self, file: File) -> None:\n        \"\"\"\n        Add file to the collection\n\n        Parameters\n        ----------\n        speaker: :class:`~montreal_forced_aligner.corpus.classes.File`\n            File to", "answers": ["            except TextGridParseError as e:"], "all_classes": null, "length": 3765}
{"pred": "\n    for sensor in sensors:\n        api.add_resource(\n            PitotTubeResource,\n            \"/aircraft/sensors/pitot_tube\",\n            resource_class_args=(sensor.pitot_tube,))\n\n        api.add_resource", "answers": ["        AccelerometerResource,"], "all_classes": null, "length": 2660}
{"pred": "       self.assertAlmostEqual(gps.ground_speed, fdmexec.GetAuxiliary().GetVgroundmeterspersecond())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        self.assertAlmostEqual(gps.airspeed, convert_jsbsim_velocity(fdmexec.GetAuxiliary().GetVtrueFPS()))"], "all_classes": null, "length": 1236}
{"pred": "```\n    from pywbemcli.common_options import *\n```\n    from pywbemcli.cli_test_base import *\n```\n    class TestInstanceAssociators(TestCliBase):\n        # ...\n```\n    def test_associators(self):", "answers": ["    CMD_OPTION_SUMMARY_HELP_LINE,"], "all_classes": null, "length": 2584}
{"pred": "\t@RequestMapping(value = \"/manage\", method = RequestMethod.GET)\n\tpublic String manage(Model model, @PathVariable Long id) {\n\t\t// 获取当前控制器名称\n\t\tString controllerName = request.getServletPath().substring(1", "answers": ["\tprivate CountryServices countryServices;"], "all_classes": null, "length": 11113}
{"pred": "                           logError(title, t);\n                        } else {\n                            logError(title, t);\n                        }\n                    }\n                }\n            });\n        } finally {\n            operationInProgress = false;\n            setControlsEnabled(true);\n        }\n", "answers": ["                            MessageHelper.showError(project, t.getMessage());"], "all_classes": null, "length": 1171}
{"pred": "\n    def run_e2e_flow_for_language(self, language, person_name, join_keyword=\"JOIN\"):\n        # Set up the person object\n        person = Contact.objects.create(name=person_name,\n                                        phone_regex=r", "answers": ["                                       join_keyword=hindi_remind())"], "all_classes": null, "length": 2615}
{"pred": " protected LocationUpdateRequester locationUpdateRequester;\n  protected ILastLocationFinder lastLocationFinder;\n  protected LocationUpdateRequester locationUpdateRequester;\n  protected Fragments fragments;\n\n  @Override\n  protected void onCreate(Bundle savedInstanceState) {\n    super.", "answers": ["  protected LocationUpdateRequester locationUpdateRequester;"], "all_classes": null, "length": 4714}
{"pred": "   adb = getADB(DYNAMIC_TOOL_DIR)\n    connect(adb)\n    install_and_run(adb)\n    web_proxy(adb)\n    get_static_info(file_path, file_md5)\n", "answers": ["        refresh_avd(adb, SETTINGS.AVD_PATH, SETTINGS.AVD_REFERENCE_NAME,"], "all_classes": null, "length": 1590}
{"pred": "   MSCm2.csn1List[0]['spare'] = 0\n    MSCm2.csn1List[0]['spare'] = 1\n    MSCm2.csn1List[0]['spare'] = 0\n    MSCm", "answers": ["class Header(Layer):"], "all_classes": null, "length": 8631}
{"pred": "```\n\t\t\t\t# Calculate cosinor model\n\t\t\t\tglm_cosinor(endog, time_var, exog, dmy_covariates, period, calc_MESOR, output_fit_only)\n```\nExpected output:\n", "answers": ["\t\t\tadjac_lh = create_adjac_vertex(v_lh,faces_lh)"], "all_classes": null, "length": 4409}
{"pred": "     result.append(exp.getOperator());\n    } else {\n      result.append(exp.getOperator());\n      acceptOrVisitValue(exp.getRhsValue(), baseVariableName);\n    }\n    result.append(CLOSE_BRACKET);\n ", "answers": ["        throw new QueryGrammarException(\"Cannot use NULL value with operator \""], "all_classes": null, "length": 3055}
{"pred": "       cacheService.addCacheList(new CacheList(listName));\n        loadListsFromDBService.restart();\n      }\n    }\n  }\n\n  private boolean hasValue(Optional<String> option) {\n    return option.isPresent() && !option.", "answers": ["        CacheList list = new CacheList();"], "all_classes": null, "length": 2003}
{"pred": "\n    def __init__(self, CallName='', ReprName='', T=0, V='\\0', Trans=False):\n        if CallName or not self.CallName:\n            self.CallName = CallName\n        if ReprName is None: \n            self", "answers": ["        Bit('TI', ReprName='Transaction Identifier Flag', Pt=0, BitLen=1, \\\r"], "all_classes": null, "length": 8734}
{"pred": "                       TimeEntryOvertimeAggregation.create(dataManager, timeSource, workTimeConfigBean))\n        );\n\n        groupsDl.setParameter(\"user\", user);\n        groupsDl.load();\n\n        projectsDl.setParameter(\"user\", user);\n", "answers": ["                        new TimeEntryOvertimeAggregation()));"], "all_classes": null, "length": 2419}
{"pred": "\n    def parse(self, packet):\n        super(PubKeyV4, self).parse(packet)\n        self.created = datetime.utcfromtimestamp(packet[0])\n        del packet[0]\n        self.pkalg = PubKeyAlgorithm(packet", "answers": ["            (True, PubKeyAlgorithm.DSA): DSAPub,"], "all_classes": null, "length": 5246}
{"pred": "\n    def get_expansion_info(self):\n        return ul.get_expansion_info(self._board_num, self._expansion_num)\n\n    def get_channel_info(self):\n        return ul.get_channel_info(self._board_", "answers": ["                             self._expansion_num, ExpansionInfo.BOARDTYPE)"], "all_classes": null, "length": 6792}
{"pred": "\n        self.objects = {}\n        for i in range(count):\n            key = read_u16le(f)\n            value = read_u16le(f)\n            self.objects[key] = value\n\n        s.close()\n\n    def read", "answers": ["        self.key_size = read_u8(f)"], "all_classes": null, "length": 1591}
{"pred": "           create_inactive_user(full_name, email)\n\n            # Send email to invite user to reactivate account\n            invite_user_to_reactivate_account(request.user, request=request)\n\n            # Redirect to homepage\n            return", "answers": ["            new_user = create_inactive_user(email, full_name)"], "all_classes": null, "length": 1644}
{"pred": "       await Utilities.message(ctx.channel, f\"{PokemonXCache.cache_size()}/{PokemonXCache.cache_size() - 1} Pokemon forms dumped.\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["        await Utilities.send_to_hastebin(ctx.channel, json.dumps(PokemonXCache.cache()))"], "all_classes": null, "length": 3326}
{"pred": "```\n    markets[exchange_name] = ex\n    logging.info(f\"Create market {exchange_name}\")\n```\nThis code is a part of a bigger project, and it's not complete yet. It's just a rough draft of how the code could look like.\n", "answers": ["            ex = Hitbtc('bccbtc')"], "all_classes": null, "length": 2020}
{"pred": "           if item is not None:\n                self.add_xsd_type(item)\n                yield item\n\n    elif self.xsd_types is None:\n        for item in context.iter_self():\n            if item is None:\n                pass  # '.' wildcard doesn'", "answers": ["            if is_schema_node(item):"], "all_classes": null, "length": 5565}
{"pred": "   helpTestData(10);\n  }\n  \n  public void helpTestData(int rows) {\n    DummySherpaServer server = new DummySherpaServer(rows);\n    try {\n      Solutions solutions = helpExecuteQuery(server, 10", "answers": ["    NamedNodeImpl uri1 = new NamedNodeImpl(URI.create(\"http://example.org/foo\"));"], "all_classes": null, "length": 6301}
{"pred": "\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);\n\t\t}\n\t\tresult.setIndex(index);\n\t\tresult.setTextExpander(textExpander);\n\t\treturn result;\n\t}\n\n\tprivate static IndexReader", "answers": ["\t\t\ttextExpander = new IndexBasedTextExpander(expanderIndexReader);"], "all_classes": null, "length": 3001}
{"pred": "                   MiPushClient.init(this, getApplicationContext());\n                    //Log.e(MYTAG, \"使用MiPush推送\");\n                }\n                break;\n        }\n\n        //Log.e(MYTAG, \"CurrentUserActivity created\");\n", "answers": ["                    MiPushClient.registerPush(this, mi_APP_ID, mi_APP_KEY);"], "all_classes": null, "length": 875}
{"pred": "\n    public ConnectOperation(KadServer server, KademliaNode localNode, Node bootstrapNode)\n    {\n        this.server = server;\n        this.localNode = localNode;\n        this.bootstrapNode = bootstrapNode;\n    }\n\n    @Override\n   ", "answers": ["    private final KadConfiguration config;"], "all_classes": null, "length": 3540}
{"pred": "           output.append(tabulate(rows, headers, tablefmt=table_format,\n                                    floatfmt=floatfmt, numalign=numalign,\n                                    stralign=stralign))\n\n    else:\n        output.append(None)\n\n    return '\\n", "answers": ["                tablefmt = vtablefmt.vsv_unaligned"], "all_classes": null, "length": 4956}
{"pred": "\n    @app.route('/api/word/<word>')\n    @as_json\n    def word_api_route(word):\n        return words_api(word)\n\n    @app.route('/api/poster/<id>')\n    @as_json", "answers": ["        return words_api(wordnik_api, token)"], "all_classes": null, "length": 1410}
{"pred": "\tprivate DLog dLog;\n\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.task_list_by_jql_activity);\n\n\t\t// Get the context and inject", "answers": ["\tprivate Connector connector;"], "all_classes": null, "length": 3500}
{"pred": "       self.assertIsNotNone(handle)\n\n    def test_create_event_invalid_handle(self):\n        handle = CreateEvent(bManualReset=False, bInitialState=False)\n        self.assertRaises(WindowsAPIError, CloseHandle, handle)", "answers": ["        CloseHandle(handle)  # will raise exception if the handle is invalid"], "all_classes": null, "length": 2225}
{"pred": "       this.deployments = new SpringDeployments(restTemplate, root, tasks);\n        this.jobs = new SpringJobs(restTemplate, root, tasks);\n        this.vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @", "answers": ["        this.deployments = new SpringDeployments(restTemplate, root, tasks);"], "all_classes": null, "length": 1287}
{"pred": "                   Collection<ParsedPath> parsedPaths = new ArrayList<>();\n                    for (Element element : roundEnv.getRootElements()) {\n                        if (element.getKind() == ElementKind.ANNOTATION) {\n                            Annotation annotation = (Annotation) element;\n", "answers": ["                    PathParser pathParser = parserHolder.getPathParser();"], "all_classes": null, "length": 1100}
{"pred": "\n    protected ExecutorService executorService = Executors.newFixedThreadPool(crawlerConfig.getThreadCount());\n\n    public Crawler(CrawlerConfig crawlerConfig) {\n        this.crawlerConfig = crawlerConfig;\n        this.pageFetcher =", "answers": ["    protected PageParser pageParser;"], "all_classes": null, "length": 1611}
{"pred": "           actionPopupGroup.add(new AddKeyAction(mongoDocumentOperations));\n            actionPopupGroup.add(new AddValueAction(mongoDocumentOperations));\n            actionPopupGroup.add(new DeleteKeyAction(mongoDocumentOperations));\n        }\n\n", "answers": ["            actionPopupGroup.add(new AddKeyAction(this));"], "all_classes": null, "length": 3892}
{"pred": "   private GuiButton saveButton;\n    private GuiButton applyButton;\n    private GuiText channelName;\n\n    public GuiSettingsChannel(ServerSettings settings, Channel channel) {\n        super(settings);\n        this.channel = channel;\n        this.channels =", "answers": ["    private GuiText alias;"], "all_classes": null, "length": 6380}
{"pred": "               return new BtnQuickNotice();\n            case ConstantStr.FUNC_SCREEN_OFF_CODE:\n                return new BtnScreenOff();\n            case ConstantStr.FUNC_CLEAR_NOTIFICATION_CODE:\n                return new BtnClear", "answers": ["                return new BtnQuickNotice();"], "all_classes": null, "length": 2550}
{"pred": "       Composite composite = toolkit.createComposite(form.getForm());composite.setLayout(new GridLayout(1, false));composite.setBackground(SWT.COLOR_WHITE);composite.setForeground(SWT.COLOR_BLACK);Next", "answers": ["        form.setText(Messages.configurationEditorWebModulesPageTitle);\r"], "all_classes": null, "length": 2214}
{"pred": "       self.assertEqual(\"my_type\", Type.get_sample())\n\n    def test_type_get_comparable_values(self):\n        self.assertEqual([\"my_type\"], Type.get_comparable_values())\n\n    def test_type_", "answers": ["        type = Type()"], "all_classes": null, "length": 1190}
{"pred": "               new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));\n        commandProcessor.addHandler(\n                new EventCommandHandler<>(SetStatusMessageCommand.class, SetStatusMessageEvent::fromCommand, this::queueEvent));\n        command", "answers": ["                new EventCommandHandler<>(RemoveTagCommand.class, RemoveTagEvent::fromCommand, this::queueEvent));"], "all_classes": null, "length": 7099}
{"pred": "       self._cluster_type = _cluster_type\n        return self\n\n    def set_cluster_location(self, _cluster_location):\n        self._cluster_location = _cluster_location\n        return self\n\n    def set_datasegment_name(self, _datas", "answers": ["        if _cluster_type in CLUSTER_TYPES:"], "all_classes": null, "length": 1837}
{"pred": "   query = {\n        'api_key': settings.FLICKR_KEY[0],\n        'perms': 'write',\n        'frob': frob,\n    }\n    sign_flickr_query(query)\n    url = urlunparse(('", "answers": ["    result = call_flickr('flickr.auth.getToken', sign=True, frob=frob)"], "all_classes": null, "length": 1760}
{"pred": "\t\t\t\t\tthrow new FCPPutFailedException(e);\n\t\t\t\t} catch(FCPPutFailedException e) {\n\t\t\t\t\tLogger.error(this, \"Caugth FCPPutFailedException while inserting message\", e);\n\t\t\t\t\t", "answers": ["\t\t\t\t} catch(ConnectionTerminatedException e) {"], "all_classes": null, "length": 5157}
{"pred": "       op, arg = condition_bytecode[0]\n        if op in opcode.HAVE_ARGUMENT:\n          arg = self.show_bytecode(bytecode, i, op, arg)\n          condition_bytecode[0] = (op, arg)", "answers": ["        pop, push = get_stack_effect(bytecode[k][2], bytecode[k][3])"], "all_classes": null, "length": 5417}
{"pred": "   private HorizontalBar horizontalBar;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.overview_fragment, container, false);\n        horizontalBar = view.findViewById", "answers": ["    ExpenseManagerDAO dao;"], "all_classes": null, "length": 4570}
{"pred": "   from dashboard.models import *\n\nI want to know what are the variables and functions defined in this file, and what are their purposes.\n\nPlease provide me with a detailed explanation of each variable and function defined in this file, and their purposes.\n\nI have also attached the code for the", "answers": ["all_platform_slugs.extend(WEBLATE_SLUGS)"], "all_classes": null, "length": 1258}
{"pred": "\t\t\t\t\t}, e -> {\n\t\t\t\t\t\tAnimations.fadeFlip(listsPager, loadingProgress);\n\t\t\t\t\t\tSnackbar.show(this, R.string.error_connectionfailure);\n\t\t\t\t\t}, () ->", "answers": ["\tprivate void openCustomList(CustomListWithCount customList) {"], "all_classes": null, "length": 6816}
{"pred": "\n    def parse(self, ping_message: Sequence[str]) -> PingStats:\n        return self.__parser.parse(ping_message)\n\n    def preprocess_parse_stats(self, lines: Sequence[str]) -> Tuple[str, str, List[", "answers": ["    def parse(self, ping_message: Union[str, PingResult]) -> PingStats:"], "all_classes": null, "length": 1973}
{"pred": "           // If chat is null, show a message to the user to create a new chat\n            showCreateChatDialog();\n        } else {\n            // If chat is not null, show the messages of the chat\n            loadMessages();\n        }\n    }\r\n\n    @Override\n   ", "answers": ["            Toaster.getInstance().toast(R.string.unable_open_chat, Toast.LENGTH_SHORT);\r"], "all_classes": null, "length": 7404}
{"pred": "\t\tTextureLoader.load(\"/terrain.png\", GL_NEAREST);\n\t\t// ...\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tnew ProgressMenu();\n\t}\n}\n\nI hope this helps! Let me know if you", "answers": ["\tpublic LevelIO levelManager;"], "all_classes": null, "length": 13204}
{"pred": "   account = account_for_facebook_user(fb_user, person=person)\n    if request.user.is_anonymous():\n        person = account.person\n        if person.user is None:\n            # AGH\n            random_name = ''.join(choice(string", "answers": ["    account = account_for_facebook_user(fb_user, person=person)"], "all_classes": null, "length": 1752}
{"pred": "\n        assertThat(qe, is(batchStatement()));\n\n        // query name\n        assertThat(qe, paramNames(hasItem(\"name\")));\n        assertThat(qe, paramNames(hasItem(\"age\")));\n\n        // query parameters\n        assertThat(", "answers": ["        assertThat(qe, statementOrBatchStatement());"], "all_classes": null, "length": 2091}
{"pred": "     if (serverRawResponse != null) {\n        log(\"server response received, cancelling the upload \" + getFileNames() + \" \" + serverRawResponse, null);\n        successful = true;\n        uploadFinished();\n      }\n    }\n  }\n\n  private", "answers": ["    } else if (Utils.getXmlNodeValue(doc, TAG_PERCENT) != null) {"], "all_classes": null, "length": 1196}
{"pred": "   merged_assembly_points = merge_assembly_points(assembly_points_by_ids=original_assembly_points_by_ids)\n\n    # for assembly_point in merged_assembly_points:\n    #     print(assembly_point.seq1, assembly_point.seq", "answers": ["    merged_assembly_points = merge_assembly_points(assembly_points_by_source=assembly_points_by_sources)"], "all_classes": null, "length": 1749}
{"pred": "\n    _add_sensor_resources(api, sensors)\n\n    _add_instrument_resources(api, instruments)\n\n    _add_fdm_resources(api, fdm, aircraft)\n\n    api.add_resource(\n        FlightControlsResource,", "answers": ["        GyroscopeResource,"], "all_classes": null, "length": 2638}
{"pred": "           fields={ key.capitalize():value for key, value in config.items()}, msg_color=discord.Color.blue(),\n            inline=True)\n\n        return await ctx.send(embed=embed)\n\n\n    @staticmethod\n    async def send_channel", "answers": ["                        fields={k[0]:k[1] for k in config.items() if k[0] in GLOBAL_CONFIG_KEY and k[1] is not None or ''},"], "all_classes": null, "length": 2799}
{"pred": "\t\t\t\t\tif (!level.isInstalled()) {\n\t\t\t\t\t\tshowConfirm(\n\t\t\t\t\t\t\t\tgetString(R.string.install_level),\n\t\t\t\t\t\t\t\tgetString(R.string.install_level_confirm", "answers": ["\t\t\t\t\tgd.levelsManager.downloadLevel(level, new Callback() {"], "all_classes": null, "length": 5865}
{"pred": "   private final WeeklyCaptionProvider weeklyCaptionProvider = new WeeklyCaptionProvider();\n\n    private final DesignAttributeHandler designAttributeHandler = new DesignAttributeHandler();\n\n    private final ContentMode contentMode = ContentMode.GRID;\n\n    private final KeyMapper keyMapper =", "answers": ["    private WeeklyCaptionProvider weeklyCaptionFormatProvider = date -> DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM).withLocale(getLocale()).format(date);"], "all_classes": null, "length": 5440}
{"pred": "       vms = new SpringVms(restTemplate, root, tasks);\n    }\n\n    @Override\n    public Info info() {\n        return this.info;\n    }\n\n    @Override\n    public Releases releases() {\n        return this.releases;\n   ", "answers": ["        this.vms = new SpringVms(restTemplate, root, tasks);"], "all_classes": null, "length": 1300}
{"pred": "   (signerId, keyId) -> Lists.newArrayList(new RsaSHA256Verifier(keyId));\n\n    VerifierProviders providers = new VerifierProviders();\n    providers.setVerifierProvider(SignatureAlgorithm.HMAC_", "answers": ["        new DefaultPublicKeyLocator("], "all_classes": null, "length": 1365}
{"pred": "   protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;\n    protected EasyOnViewAttachedToWindowListener easyOnViewAttachedToWindowListener;\n    protected EasyOnViewDetachedFromWindowListener easyOnViewDetachedFromWindowListener;\n\n    public MultiItem", "answers": ["    protected EasyOnItemChildTouchListener easyOnItemChildTouchListener;"], "all_classes": null, "length": 2172}
{"pred": "                   assertTrue(client.objectExists(containerName, fileName));\n                } catch (FilesException e) {\n                    // Ignore\n                }\n            }\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tfail(e.getMessage", "answers": ["                } catch(FilesNotFoundException ex) {"], "all_classes": null, "length": 18754}
{"pred": "\n            });\n        }\n    }\n\n    private void sendBroadCast(int action) {\n        LocalBroadcastManager.getInstance(itsContext).sendBroadcast(new Intent(action));\n    }\n\n    private void updateNotification() {\n        NotificationManagerCompat notification", "answers": ["                    TrackHistoryEntry newTrackHistoryEntry = new TrackHistoryEntry();"], "all_classes": null, "length": 4305}
{"pred": "\nQueuedProjectFragment.QueuedProjectListener, PatternFragment.PatternListener, FavoritesFragment.FavoritesListener, PatternSearchFragment.PatternSearchListener, ProjectsFragment.ProjectsListener, ProjectSearchFragment.ProjectSearchListener, StashesFragment.StashesListener, StashSearchFragment", "answers": ["        ProjectsFragmentListener,"], "all_classes": null, "length": 4857}
{"pred": "                       ImageConfig.getImageLoaderConfiguration(mContext).getDisplayImageOptions(true).display(imageView);\n                        break;\n                }\r\n            }\r\n        }\r\n    }\r\n}\ncore/src/main/java/com/dm/material/dashboard/candy", "answers": ["                        IconPreviewFragment.showIconPreview(\r"], "all_classes": null, "length": 5057}
{"pred": "       encoding = Default.ENCODING\n\n    if typepy.is_empty_sequence(proxy):\n        proxy = None\n\n    convert_configs = load_convert_config(\n        logger, app_configs, subcommand=\"url\", format_name=format_name", "answers": ["        encoding = app_configs.get(ConfigKey.DEFAULT_ENCODING)"], "all_classes": null, "length": 1453}
{"pred": "\n    def _getPlaylistItem(self, item):\n        \"\"\" Return a playlist item by ratingKey. \"\"\"\n        for _item in self.items():\n            if _item.ratingKey == item.ratingKey:\n                return _item\n\n    def _addItem(self", "answers": ["        raise NotFound('Item with title \"%s\" not found in the playlist' % item.title)"], "all_classes": null, "length": 9959}
{"pred": "       self.assertRaises(TypeError, _environment_to_string, 42)\n\n    def test_empty_environment(self):\n        self.assertEqual(\n            _environment_to_string(None),\n            u\"\")\n\n    def test_environment", "answers": ["        with self.assertRaises(InputError):"], "all_classes": null, "length": 3741}
{"pred": "   try:\n      result = cmd.Run(gopts, argv)\n    except Exception as e:\n      print(e, file=sys.stderr)\n      result = 1\n\n    if result:\n      return result\n\n    # If we reach this point, the", "answers": ["    if isinstance(cmd, GitcAvailableCommand) and not gitc_utils.get_gitc_manifest_dir():"], "all_classes": null, "length": 2013}
{"pred": "               runnerListenerList.forEach(TaskData::onTaskSuccess);\n            } catch (Throwable e) {\n                taskData.setState(TaskData.STATE_FAILED);\n                e.printStackTrace();\n                runnerListenerList.forEach(TaskData::onTaskFailed);\n           ", "answers": ["            } catch (TaskDataException e) {"], "all_classes": null, "length": 5667}
{"pred": "       await r.test_reject_nothing()\n\n    @async_test()\n    async def test_reject_status_code(self):\n        r = RejectStatusCode(status_code=404)\n        await r.test_reject_status_code", "answers": ["        await r.after_headers(Entry.create(\"http://example.om/test\", response=StaticResponse(200, {})))"], "all_classes": null, "length": 1741}
{"pred": "       //初始化课程数据\n        initCourseData();\n    }\n\n    private void changCodeImage() {\n        //设置验证码图片\n        ivCodes.setImageResource(R.drawable.ic_launcher_", "answers": ["        stuNameEncoding = TextEncoderUtils.encoding(stuName);"], "all_classes": null, "length": 1899}
{"pred": "\n    def __parse_direct_qlen(self, line):\n        m = self.__RE_DIRECT_QLEN.search(line)\n        if m is None:\n            return\n\n        self.__parsed_param[\"direct_qlen\"] = int(m.", "answers": ["        Qdisc.attach(self.__con)"], "all_classes": null, "length": 1886}
{"pred": "           state[\"inventory\"] = list(inv)\n        except AttributeError:\n            pass\n\n    def add_location_property(self, state: Dict[str, Any], obj: MudObject) -> None:\n        try:\n            loc = obj.location     # type", "answers": ["        except (AttributeError, ActionRefused):"], "all_classes": null, "length": 6507}
{"pred": "  */\r\n  public Query visit(Ord4Search n, Query query) {\r\n    List<Occur> occurs = null;\r\n\r\n    if (n.f0.tokenImage.length() == 2) {\r\n      occurs = rfOpToOccur.get(n.", "answers": ["  public Query visit(Ord4Search n, Query query) {\r"], "all_classes": null, "length": 4477}
{"pred": "\t\tthis.schemaValidator = new SchemaValidatorImpl();\n\t}\n\n\tpublic void setPipelineGenerator(PipelineGenerator pipelineGenerator) {\n\t\tthis.pipelineGenerator = pipelineGenerator;\n\t}\n\n\tpublic void setValorizatorParameters(Valorizator", "answers": ["\t\tthis.schemaValidator = new SchemaValidatorImpl();"], "all_classes": null, "length": 4513}
{"pred": "\n        try {\n\n            //load configuration\n            Properties properties = new Properties();\n            if (propertiesFile != null) {\n                properties.load(new FileInputStream(propertiesFile));\n            }\n\n            //get data dir\n            DataDirHelper dataDirHelper = new DataDirHelper", "answers": ["        DataState dataState = null;\r"], "all_classes": null, "length": 3296}
{"pred": "\n    def is_peer_firewalled(self, peer):\n        \"Here to let a packet know if its peer is firewalled\"\n       # Wait til there's something in the queue\n        self.q_work.acquire()\n        if len(self.queue", "answers": ["        except UncertainTimeError:"], "all_classes": null, "length": 6884}
{"pred": "\n        cursorById.close();\n    }\n}\n\npublic class MovieSelection {\n    private static final String TAG = \"MovieSelection\";\n\n    public MovieSelection id(long... value) {\n        addEquals(\"movie.\" + MovieColumns._ID, toObjectArray(value));", "answers": ["        MovieCursor mc = new MovieCursor(cursorById);"], "all_classes": null, "length": 6981}
{"pred": "       DevisDialog(self, self.inscrit, self.current_cotisation[0]).ShowModal()\n\n    def EvtGenerationContrat(self, _):\n        ContractDialog(self, self.inscrit, self.current_cotisation[0]).ShowModal()", "answers": ["        DocumentDialog(self, DevisAccueilModifications(self.inscrit, self.current_cotisation[0])).ShowModal()"], "all_classes": null, "length": 3292}
{"pred": "       element = ElementTree.Element('element')\n        self.assertEqual(node_children(element), [])\n        self.assertEqual(node_children(element, is_text=True), [])\n        self.assertEqual(node_children(element, is_text=True", "answers": ["        self.assertListEqual(list(node_children(self.elem)), [])"], "all_classes": null, "length": 2048}
{"pred": "\t\tsetContentView(R.layout.map_view);\n\t\tmapView = (MapView) findViewById(R.id.map_view);\n\t\tlocationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);\n\t\tdataProvider = new DataProvider", "answers": ["\t\tNetworkCalls.setTesting(false);\r"], "all_classes": null, "length": 2546}
{"pred": "                   mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));\n                    break;\n                case Item.TYPE_MUSHROOM_GHOST:\n                   ", "answers": ["                    mushroom = new MushroomBlue(world, new Vector2(Mushroom.DEF_SIZE, Mushroom.DEF_SIZE), new Vector3(position));"], "all_classes": null, "length": 12224}
{"pred": "           self.switch_configuration.new_command_processor(self.switch_configuration))\n\n    def get_netconf_protocol(self):\n        return \"netconf\"\n\n    def get_default_ports(self):\n        return BaseCiscoSwitchCore.get_default", "answers": ["            config=ConfigCommandProcessor("], "all_classes": null, "length": 2356}
{"pred": " assert isinstance(config, LowRateConfig)\n\n\ndef test_selectOutputConfig1():\n  '''\n  Output configuration selection test\n  '''\n  config = selectOutputConfig('normal_rate')\nNext line of code:\n  assert isinstance(config, NormalRateConfig)", "answers": ["  assert config == LowRateConfig"], "all_classes": null, "length": 6375}
{"pred": "\n    def consultar_ultima_venda(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_ultima_venda`.\n\n        :return: Uma resposta SAT que ir", "answers": ["        return RespostaConsultarUltimaSessaoFiscal.analisar(retorno)"], "all_classes": null, "length": 4583}
{"pred": "   calculate_dict['P'] = np.concatenate([calculate_dict['P'], P])\n    calculate_dict['T'] = np.concatenate([calculate_dict['T'], T])\n    calculate_dict['points'] = np.concatenate", "answers": ["    sample_condition_dicts = _get_sample_condition_dicts(calculate_dict, subl_dof)"], "all_classes": null, "length": 2264}
{"pred": "   _add_fdm_resources(api, fdm, aircraft)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    api.add_resource(ForcesResource, \"/fdm/forces\","], "all_classes": null, "length": 2658}
{"pred": "   def get_utterance_features(self, utterance: Utterance) -> Dict[str, float]:\n        \"\"\"\n        Compute the features for an utterance\n\n        Returns\n        -------\n        dict[str, float]\n            Feature dictionary for the utterance", "answers": ["    def add_utterance(self, utterance: Utterance) -> None:"], "all_classes": null, "length": 6244}
{"pred": "   private CameraSource mCameraSource;\n\n    private CameraSourcePreview mPreview;\n\n    private GraphicOverlay mGraphicOverlay;\n\n    private OcrDetectorProcessor mOcrDetectorProcessor;\n\n    private ExpenseManagerDAO mExpenseManagerDA", "answers": ["    private CameraSource mCameraSource;"], "all_classes": null, "length": 9892}
{"pred": "\tpublic final NetUtil net = new NetUtil();\n\tpublic final TimeUtil time = new TimeUtil();\n\n\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n}\nmisc/src/main/java/io/hummer/util/misc", "answers": ["\tpublic final NetUtil net = new NetUtil();"], "all_classes": null, "length": 5152}
{"pred": "       List<ServerConfiguration> serverConfigurations = new ArrayList<>();\n        File[] files = FileUtil.getFiles(new File(System.getProperty(\"user.home\")), \"mongo.yml\");\n        for (File file : files) {\n            try (InputStream inputStream = new", "answers": ["        return MongoConfiguration.getInstance(project).getServerConfigurations();"], "all_classes": null, "length": 3409}
{"pred": "\t\tFluent header = container.section(\"header\");\n\t\tFluent h1 = header.h1(\"TodoMVC\");\n\t\tFluent inputNext = header.inputNext();\n\n\t\t// Footer with Footer line of code:\n\t\tF", "answers": ["\t\tcontainer.header(\"header\", H1(null, \"todos\"), Input(\"new-todo\").att(Att.placeholder, \"What needs to be done?\")"], "all_classes": null, "length": 3542}
{"pred": "               Intent intent = new Intent();\n                intent.putExtra(ImageCapture.EXTRA_IMAGE_BUFFER, output);\n                setResult(RESULT_CODE, intent);\n                finish();\n            }\n        });\n\n        confirm.setOnClickListener(new View.OnClickListener() {", "answers": ["                final CropImageView imageCropper = new CropImageView(CameraActivity.this);"], "all_classes": null, "length": 11918}
{"pred": "\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.song_list, container, false);\n\n        mRecyclerView = (RecyclerView) view.findViewById(R.id", "answers": ["    private ID3TagEditorDialog.OnTagsEditionSuccessListener mOnTagsEditionSuccessListener = new ID3TagEditorDialog.OnTagsEditionSuccessListener() {"], "all_classes": null, "length": 5665}
{"pred": "   with pytest.raises(InvalidSearch):\n    search = Search(\n        engine=engine,\n        model=model,\n        index=index,\n        key=key,\n        filter=None,\n        projection=\"all\",\n        consistent=True,\n        forward=False", "answers": ["    validate_key_condition(model, index, key)"], "all_classes": null, "length": 4637}
{"pred": "           GCActivitySet gcActivitySet,GCActivity gcActivity) {\n        // Nothing to do\n    }\n\n    public void gcActivityNameAdded(\n            GCTrace gcTrace,\n            int id,\n            String gcActivityName) {\n        // Nothing", "answers": ["            GCActivitySet gcActivitySet,"], "all_classes": null, "length": 4259}
{"pred": "\n    def start(self):\n        \"\"\"Start the REST API\"\"\"\n        self.api.add_resource(self.resources)\n        self.server.run()\n\nif __name__ == '__main__':\n    app = Flask(__name__)\n    rest_", "answers": ["            '/propertys':                   RestAppPropertys"], "all_classes": null, "length": 3244}
{"pred": "       self.tree_view = tree_view\n        self.tree_view.set_model(self._df_manager)\n        self.tree_view.set_root_dir(self._directory)\n        self.tree_view.set_headers_visible(True)\n       ", "answers": ["        self._file_tree_model = FileTreeModel(root_dir=directory, parent=self.parent)"], "all_classes": null, "length": 3500}
{"pred": "```\n    parser.parse_args()\n```\nExpected output:\n```\ntcconfig/_netem_param.py:10: Warning: Ignoring unknown argument: --import-setting\ntcconfig/_netem_param.py:11: Warning: Ignoring unknown argument:", "answers": ["            MIN_CORRUPTION_RATE, MAX_CORRUPTION_RATE"], "all_classes": null, "length": 2985}
{"pred": "   private final Map<ChatChannel, ChannelStatus> channels = Maps.newHashMap();\n\n\n    public ChatTray(GuiNewChatTC tc) {\n        super(new BorderLayout());\n        this.tc = tc;\n        this.addComponent(new G", "answers": ["    private GuiPanel tabList = new GuiPanel(new FlowLayout());"], "all_classes": null, "length": 5487}
{"pred": "        */\n        void onDateClick(Date date);\n    }\n\n    public VCalendar() {\n        initWidget(outer);\n        init();\n    }\n\n    private void init() {\n        // Set the styles\n        setStyleName(PRIMARY_STYLE);", "answers": ["        void dateClick(CalDate date);"], "all_classes": null, "length": 8411}
{"pred": "       self._db_type = db_type\n        return self\n\n    def set_client_id(self, client_id):\n        self._client_id = client_id\n        return self\n\n    def set_user(self, user):\n        self._user = user", "answers": ["        if db_type in DB_TYPES:"], "all_classes": null, "length": 2881}
{"pred": "           Namespace namespace = namespacesHub.get(packet.getNsp());\n            namespace.onUpgrade(client);\n            break;\n        }\n\n        case MESSAGE: {\n            client.getBaseClient().schedulePingTimeout();\n            Namespace namespace =", "answers": ["            SchedulerKey key = new SchedulerKey(SchedulerKey.Type.UPGRADE_TIMEOUT, client.getSessionId());"], "all_classes": null, "length": 3365}
{"pred": "   private List<StarItem> starItemList = new ArrayList<StarItem>();\n\n    private CommitTask commitTask;\n    private List<CommitItem> commitItemList = new ArrayList<CommitItem>();\n\n    private RepoContentTask repoContentTask;\n    private List<", "answers": ["    private List<StarItem> starItemList = new ArrayList<StarItem>();"], "all_classes": null, "length": 5593}
{"pred": "\t\tPostprocessor[] postprocessors = setPostProcessors(pipeline.getPostProcessing());\n\t\t\n\t\t// Identity Generator\n\t\tidentityGenerator.setPipeline(pipeline);\n\t\t\n\t\t// DDI2XFORMSGenerator\n\t\tddi", "answers": ["\t\tGenerator generator = setGenerator(pipeline.getInFormat(), pipeline.getOutFormat());"], "all_classes": null, "length": 5987}
{"pred": "   PCollection<KV<List<String>, String>> liveProjects =\n        pipeline.apply(\"Read live data\", Read.from(new LiveProjectSource(org)));\n    // Convert project data to GCPResourceState objects.\n    PCollection<KV<GCPResource, GCP", "answers": ["    PCollection<GCPProject> allProjects ="], "all_classes": null, "length": 3138}
{"pred": "   return MyModel()\n\n\ndef test_model_created(session):\n    # ...\n\n\ndef test_model_save(session):\n    # ...\n\n\ndef test_model_load(session):\n    # ...\n\n\ndef test_model_delete(session", "answers": ["        expiry = Column(Timestamp)"], "all_classes": null, "length": 2721}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                self._def_reader = MeanPoolReadDefinitions(def_num_input_words, emb_def_dim,"], "all_classes": null, "length": 2703}
{"pred": "   public ChatManager(ChatManagerCallback delegate)\n    {\n        _delegate = delegate;\n        _lockObject.lock();\n        try\n        {\n            // Set up RX chat listeners.\n            for (int i = 0; i < RX_SOCK", "answers": ["    private HiMuteStatus _muteStatusLeft = HiMuteStatus.UNDEFINED;"], "all_classes": null, "length": 2146}
{"pred": "   private Handler handler = new Handler();\n    private Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n            // Your code to handle the video duration goes here\n            // ...\n        }\n    };\n\n    @Override\n   ", "answers": ["    private int videoQuality = VideoQuality.HIGH_QUALITY.getQuality();"], "all_classes": null, "length": 2753}
{"pred": "   RotateInDownRight(RotateInDownRight.class),\n    RotateInUpLeft(RotateInUpLeft.class),\n    RotateInUpRight(RotateInUpRight.class),\n    RotateOut(RotateOut.class),\n    RotateOut", "answers": ["    RotateInDownRight(RotateInDownRight.class),"], "all_classes": null, "length": 3507}
{"pred": "           return self.render_to_response(self.get_template(), form)\n        else:\n            return self.render_to_response(self.get_template(), form)\n\nclass CrearUser(UserBase, CreateView):\n    template_name = 'relevamiento", "answers": ["            perfil_form = PerfilFormSet(instance=self.object)"], "all_classes": null, "length": 1238}
{"pred": "\n    public static Fog convert(Fog fog) {\n        Fog convertedFog = new Fog();\n        convertedFog.setColor(fog.getColor());\n        convertedFog.setStart(fog.getStart());\n        convertedFog.setEnd(fog.", "answers": ["    public static Fog convert(FogDescriptor fogDescriptor) {"], "all_classes": null, "length": 3699}
{"pred": "\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.inferType();\n\t\t\tthis.categories = new HashSet<>();\n\t\t\tthis.categoriesMap = new HashMap<>();\n\t\t\tif(this.values == null) return;\n\t\t\tboolean", "answers": ["\tpublic List<Metadata> listMetadata()"], "all_classes": null, "length": 16641}
{"pred": "   ActorMoviesComponent plus(ActorMoviesModule actorMoviesModule);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["    ActorDetailsComponent plusActorDetailsComponent();"], "all_classes": null, "length": 1177}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t} catch (final ClassNotFoundException | PerfidixMethodCheckException e2) {"], "all_classes": null, "length": 6431}
{"pred": "   ci_platform_jobs = self.get_ci_platform_jobs(pipelines)\n\n    def get_ci_platform_jobs(self, pipelines):\n        \"\"\"\n        Get CI Platform Jobs\n        :param pipelines: Query Objects\n        :return", "answers": ["    ci_pipeline_manager = CIPipelineManager()"], "all_classes": null, "length": 2987}
{"pred": "\t\t\tlogManager.logInfo(this,\n\t\t\t\t\t\"Building a wrapper from the service discovery file: \"\n\t\t\t\t\t\t\t+ serviceDiscoveryInfo);\n\t\t\treturn activateLoginIfRequested(createMostSuitableWrapper(", "answers": ["\t\t\tEndpoint endpoint = serviceDiscoveryInfo"], "all_classes": null, "length": 4026}
{"pred": "       planillas_modelo = PlanillaModelo.objects.all()\n        initial = {}\n        if len(planillas_modelo) == 1:\n            planilla_modelo = planillas_modelo[0]\n            initial = {\"planilla_modelo\": plan", "answers": ["        if request.user.perfil.rol == RELEVADOR:"], "all_classes": null, "length": 1208}
{"pred": "     self.tree = root\n    else:\n      self.tree = self.build_tree(root)\n      self._cstr = self.tree\n\n  def build_tree(self, root):\n    worklist = [root]\n    while worklist:\n      cur =", "answers": ["      self._cstr = Comparator.fromKind(CMP_IMPLICIT_NOT_EMPTY)"], "all_classes": null, "length": 1657}
{"pred": "\n  public Tropo() {\n\n    super();\n    setName(\"tropo\");\n  }\n\n  public Tropo(Key... keys) {\n\n    super(keys);\n    setName(\"tropo\");\n  }\n\n  public SayAction say(String", "answers": ["  private ActionSupportHandler<RedirectAction>       redirectActionSupportHandler       = new ActionSupportHandler<RedirectAction>(RedirectAction.class);"], "all_classes": null, "length": 2214}
{"pred": "\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {\n\t\tif (getRound() != null) {\n\t\t\tthrow new PlayerPresentException(this.getRound().getConfigManager().getLocaleString(\"player.already.in.", "answers": ["\t\t\tthrows PlayerOfflineException, PlayerPresentException, RoundFullException {"], "all_classes": null, "length": 3914}
{"pred": "   assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])\n    assert_array_equal(fold([MIN_HASH_VALUE], 1234567890), [0])\n    assert_array_equal", "answers": ["    assert_array_equal(fold([MIN_HASH_VALUE], 1024), [0])"], "all_classes": null, "length": 3354}
{"pred": "   return result\n\n\n###\n# XPath 2.0/XQuery 1.0 functions\n@method(function('sin', label='math function', nargs=1,\n                 sequence_types=('xs:double?', 'xs:double?')))\ndef evaluate_", "answers": ["        elif DECIMAL_DIGIT_PATTERN.search(fmt_token) is None or ',,' in fmt_token:"], "all_classes": null, "length": 7311}
{"pred": "\t\t\tif model_item.data.name == \"Sketch\":\n\t\t\t\tdefault_flags |= Qt.ItemIsEditable\n\t\t\telif model_item.data.name == \"Drawing\":\n\t\t\t\tdefault_flags |= Qt.ItemIsEditable", "answers": ["\t\t\tif isinstance(model_item.data, Geometry):"], "all_classes": null, "length": 6653}
{"pred": "       root_dto = RootDto()\n        hydrator = Hydrator(version1, versions, [])\n        hydrator.hydrate_object(root_dto, root)\n\n        self.assertEqual(1, len(root_dto.", "answers": ["        dynamic = ObjectDynamic()"], "all_classes": null, "length": 1898}
{"pred": "         //ringBuffers()[0].write(catBytes, 0, catBytes.length);\n          //ringBuffers()[1].write(catBytes, 0, catBytes.length);\n          //ringBuffers()[2].write(catBytes, ", "answers": ["          TemplateCatalogConfig catalog = new TemplateCatalogConfig(catBytes); "], "all_classes": null, "length": 7648}
{"pred": "to_map_and_back(AFO, AmplitudePoly(AmplitudeBase.UNITS_AMPLITUDE, (0, )))\n\nValueError: cannot convert 0 to AmplitudePoly\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  to_map_and_back(AFO, AmplitudeSine(AmplitudeBase.UNITS_AMPLITUDE, 1., 2., 1.))"], "all_classes": null, "length": 4055}
{"pred": "containsString(\"Total: 100\"));\n    }\n\n    @Test\n    public void storeWithId() throws Exception {\n        Collection<SourceRecord> records = SourceRecordHelper.loadGetRecordsResponse(Resources.asByteSource(Resources.getResource(\"responses/dab", "answers": ["                hasJsonPath(\"hits.total\", is(mappedRecords.size())));"], "all_classes": null, "length": 3764}
{"pred": "\n    def __init__(self):\n        super(PubKeyV4, self).__init__()\n        self.created = datetime.utcnow()\n        self.pkalg = PubKeyAlgorithm.RSAEncryptOrSign\n        self.signature = RSASign", "answers": ["            (True, PubKeyAlgorithm.ECDSA): ECDSAPub,"], "all_classes": null, "length": 5250}
{"pred": "\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());\n\n\t\tGeoJSONWriter geoJSONWriter = new GeoJSONWriter();\n\t\trequestServices = new RequestServices();\n\t\trequestServices.setGeoJSONWriter(geoJSONWriter", "answers": ["\t\tJPEParserManager.getInstance().registerJPEParser(new XMLJPEParser());"], "all_classes": null, "length": 7708}
{"pred": "                       res = context.get(ContextKeys.SEARCH_RESULT, Collection.class);\n                    } catch (Throwable e) {\n                        context.put(ContextKeys.EXIT_STATUS, SQL_ERROR);\n                        addContextMessage(context, true, e", "answers": ["                        Authorization authorization = new Authorization(context.get(Schema.InvokeKeys.DATA_SOURCE, DataSource.class));"], "all_classes": null, "length": 8940}
{"pred": "   url(r'^users/list/$', users_list, name='users-list'),\n    url(r'^users/new/$', new_user, name='new-user'),\n    url(r'^users/edit/(?P<user_id>[-\\w]+", "answers": ["    url(r'^settings/users/$', users_list, name='users-list'),"], "all_classes": null, "length": 1512}
{"pred": "                           updateEmptyViews();\n                        }\n                    }\n                });\n                dialogFragment.show(getActivity().getSupportFragmentManager(), \"playSessionSettingsDialog\");\n            }\n        }\n    }\n\n    private void startLearnActivity() {\n        Intent intent =", "answers": ["                            Intent intent = new Intent(getActivity(), MixedActivity.class);"], "all_classes": null, "length": 7656}
{"pred": "   DropDownMenu dropDownMenu;\n    private Handler handler = new Handler();\n    private Runnable runnable = new Runnable() {\n        @Override\n        public void run() {\n            //TODO 待实现\n            //获取数据\n           ", "answers": ["    DropDownMenu dropDownMenu;"], "all_classes": null, "length": 2942}
{"pred": "       obj.updateBuffImg()\n\n    def updateBuffImg(self):\n        from blocks.Block import Block\n        from blocks.BlockShape import BlockShape\n        from blocks.InfixBlockShape import InfixBlockShape\n        from blocks.CollapseLabel import CollapseLabel\n", "answers": ["        obj.plugTag = ConnectorTag(block.getPlug());"], "all_classes": null, "length": 9227}
{"pred": "\n    def test_find_preimage_8bit(self):\n        assert DP_WIDTH == 8\n\n        f = XDA(XorDiff(Constant(0, 4)), XorDiff(Constant(0, 4)))\n        beta = XorDiff", "answers": ["        for diff_type, der_type in zip([XorDiff, RXDiff], [XDA, RXDA]):"], "all_classes": null, "length": 4512}
{"pred": "\t\tpublic static Node getTransform(Node node, NodeTransformer transformer) {\n\t\t\tif(node == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif(node instanceof ConstantNode) {\n\t\t\t\treturn transformer.transform", "answers": ["\t\tpublic abstract Node transformMultiAlternation(MultiAlternationNode node, List<Node> newChildren);"], "all_classes": null, "length": 1353}
{"pred": "\t\tgetCommand(\"create\").setExecutor(new CommandCreate());\n\t\tgetCommand(\"delete\").setExecutor(new CommandDelete());\n\t\tgetCommand(\"setfrom\").setExecutor(new CommandSetFrom());\n\t\tgetCommand(\"settoto\").setExecutor(new CommandSetTo());\n", "answers": ["\t\tcommands.add(new CommandList());"], "all_classes": null, "length": 7060}
{"pred": "       connection.sendChallenge(PacketParserUtils.parseContentDepth(doc, 2));\n    }\n\n    private void parseSuccess(Element doc) throws IOException {\n        String successData = doc.getText();\n        connection.sendSuccess(PacketParserUtils.parseContentDep", "answers": ["        processPacket(new Challenge(doc));"], "all_classes": null, "length": 3407}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["Cham64 = cham.get_Cham_instance(cham.ChamInstance.cham_64_128)"], "all_classes": null, "length": 3108}
{"pred": "\n    private SongListAdapter mAdapter;\n\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.song_list, container, false);\n\n        m", "answers": ["    private SongListAdapter mAdapter;"], "all_classes": null, "length": 5566}
{"pred": "           // Create a new instance of the effect\n            effect = new FlowAbsEffect();\n            effect.setName(effect.getName());\n            effect.setParameterValues(effect.getDefaultParameterValues());\n            effect.setListener(this);\n        }\n        mSelectedEffect = effect", "answers": ["            if(GLUtils.HAS_GPU_TEGRA) {"], "all_classes": null, "length": 8376}
{"pred": "       Bit('ESM', ReprName='ESM Information', Pt=4, BitLen=4, Repr='hum'),\n        Bit('Cause', ReprName='Cause', Pt=6, BitLen=4, Repr='hum'),\n        Bit('Length',", "answers": ["        Int('TI', ReprName='Procedure Transaction ID', Pt=0, Type='uint8'),"], "all_classes": null, "length": 9043}
{"pred": "           // Update the song list\n            mSongListAdapter.notifyDatasetChanged();\n        }\n    };\n\n    public ArtistFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container", "answers": ["            ((MainActivity) getActivity()).refresh();"], "all_classes": null, "length": 5615}
{"pred": "```\nmontreal_forced_aligner/corpus/helper.py\ndef find_exts(files: typing.List[str]) -> FileExtensions:\n    \"\"\"\n    Find and group FeatureConfigMixin,\n    MfccArguments,\n    MfccFunction", "answers": ["                except TextGridParseError as e:"], "all_classes": null, "length": 7167}
{"pred": "\t\treturn UserManagement.addUser(getCurrentUserName(), user);\n\t}\n\n\t@POST\n\t@Path(\"removeuser/{user}\")\n\t@Produces(\"application/json\")\n\t@Override\n\tpublic boolean removeUser(String user) {\n\t\treturn UserManagement", "answers": ["\tpublic boolean addRemittUser(UserDTO user) {"], "all_classes": null, "length": 6464}
{"pred": "   Observable<ApiPlan> apiPlan(@Query(Constants.KEY) String apiKey);\n\n    }\n\n    public static void main(String[] args) {\n        HostReport hostReport = new HostReport(100, Arrays.asList(\"banner1\", \"banner", "answers": ["    Observable<ApiStatus> info(@Query(Constants.KEY) String apiKey);"], "all_classes": null, "length": 3286}
{"pred": "   public void visit(Throwable throwable) {\n      throw new AssertionError();\n    }\n\n    @Override\n    public void visit(LogMessage message) {\n      if (message.getLevel().equals(Level.DEBUG)) {\n        // ignore\n      } else {\n", "answers": ["    public void visit(FailureLogMessage logMessage) {"], "all_classes": null, "length": 3057}
{"pred": "   result = erb(freq, Hz=freq)\n    assert result == bandwidth\n\n\nclass TestGammatone(object):\n\n  def test_gammatone_constants(self):\n    n = 4\n    x, y = gammat", "answers": ["    assert almost_eq.diff(erb[\"gm90\"](freq), bandwidth, max_diff=5e-4)"], "all_classes": null, "length": 2899}
{"pred": "\ndef read_sequence_item(fp, is_implicit_VR, is_little_endian, encoding, offset=0):\n    \"\"\"Read and return a single Dataset instance from a sequence item.\"\"\"\n    # ...\n\ndef read_defined_length_value(", "answers": ["    seq = Sequence(seq)"], "all_classes": null, "length": 7218}
{"pred": "   for (ICommentProcessor commentProcessor : this.commentProcessors) {\n      try {\n        commentProcessor.setCurrentParagraphCoordinates(new ParagraphCoordinates(document, 0));\n        commentProcessor.setCurrentRunCoordinates(new RunCoordinates(document, 0));", "answers": ["    final Map<BigInteger, CommentWrapper> comments = CommentUtil.getComments(document);"], "all_classes": null, "length": 3564}
{"pred": "   protected void loadData(int page) {\n        if (getActivity() == null) {\n            return;\n        }\n        loadingStarted();\n        AbstractRavelryGetRequest<PatternsResult> request = getRequest(page);\n        spiceManager.execute(request,", "answers": ["    protected AbstractRavelryGetRequest<PatternsResult> getRequest(int page) {"], "all_classes": null, "length": 2625}
{"pred": "\n    def __init__(self):\n        super(NotationData, self).__init__()\n        self.flags = []\n\n    def __bytearray__(self):\n        _bytes = super(NotationData, self).__bytearray__()\n        _bytes += self.", "answers": ["    @flags.register(NotationDataFlags)"], "all_classes": null, "length": 1585}
{"pred": "       self.addMessage(serverMsg, True)\n\n    def addMessage(self, message, is_server):\n        self.messages.append(message)\n        if is_server:\n            self.server_messages.append(message)\n\n    def getMessages(self):", "answers": ["            text = convertTags(serverMsg, \"ctag\")"], "all_classes": null, "length": 2680}
{"pred": "   def check_string(arg, type_):\n        arg = check(arg, type_.__ref_name__)\n        with type_.__ref_name__:\n            unify(arg.__type__, type_)\n        return arg\n\n    def check_string_like(", "answers": ["_MarkupLike = Union[_StringLike, Markup]"], "all_classes": null, "length": 1479}
{"pred": "   if isinstance(value, GregorianMonthDay):\n        return value\n\n    try:\n        if isinstance(value, UntypedAtomic):\n            return GregorianMonthDay.fromstring(value.value)\n        elif isinstance(value, (Date1", "answers": ["    if isinstance(value, GregorianMonthDay):"], "all_classes": null, "length": 3232}
{"pred": "   if features is None:\n        features = {}\n        for prop, coeffs in aicc_feature_factors.items():\n            features[prop] = [coeffs[0], coeffs[1], coeffs[2], coeffs[3]]\n", "answers": ["    if interaction_test(configuration):"], "all_classes": null, "length": 3364}
{"pred": "\n    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerComponentController componentController, FsmPlayer fsmPlayer, AdMediaModel adMedia) {\n\n        //TODO: implement me\n    }\n\n    private void showVpaidAd(PlayerUIController", "answers": ["    private void pausePlayerAndSHowVpaid(PlayerUIController controller, PlayerAdLogicController componentController,"], "all_classes": null, "length": 3593}
{"pred": "           PressureSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == 0) {\n            StepCounterSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 8 || type == ", "answers": ["            PressureSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5888}
{"pred": "   Call<SuggestResponse> getSuggest(@QueryMap Map<String, String> serviceIds,\n                                    @Query(\"q\") String query,\n                                    @Query(\"type\") String type,\n                                    @Query(\"limit\") @IntRange(from = ", "answers": ["    Call<Suggestions> getSuggestions(@QueryMap Map<String, String> serviceIds,"], "all_classes": null, "length": 1511}
{"pred": "       s = Search(\n            mode=\"scan\", engine=self, model=model, index=index, filter=filter,\n            projection=projection, consistent=consistent, parallel=parallel)\n        return iter(s.prepare())\n\n    def delete(self, *objs,", "answers": ["        stream = Stream(model=model, engine=self)"], "all_classes": null, "length": 4915}
{"pred": "       self.log.info(\"confusion matrix:\")\n        self.log.info(confusion_matrix)\n\n        # plot the confusion matrix\n        self.plot_confusion_matrix(confusion_matrix, classes, normalize=False, title='Confusion matrix')\n\n", "answers": ["        formatter = ConfusionMatrixFormatter()"], "all_classes": null, "length": 3014}
{"pred": "\tprivate BannedIpServices bannedIpServices;\n\tprivate CategoryServices categoryServices;\n\tprivate ChallengeServices challengeServices;\n\tprivate CountryServices countryServices;\n\tprivate SubmissionServices submissionServices;\n\t\n\t\n\t@RequestMapping(value = \"/profile\", method = Request", "answers": ["\tprivate BannedIpServices bannedIpServices;"], "all_classes": null, "length": 6016}
{"pred": "   def __iter__(self):\n        ...\n\\end{code}\n\nI'm not sure what you're asking, but I'll do my best to help. Please provide more context or clarify your question.", "answers": ["    def batch(self, isolation_level=Batch.READ_COMMITTED):"], "all_classes": null, "length": 3701}
{"pred": "\n    def decoder(self) -> FeedPreviousRNN:\n        \"\"\"\n        Creates the decoder RNN.\n\n        The decoder RNN receives the expected output at the previous time step as input, and is initialized with zero\n        initial states.\n\n        Returns\n", "answers": ["    def decoder(self) -> FeedPreviousRNN:"], "all_classes": null, "length": 2629}
{"pred": "   for platform in Platform.objects.all():\n        all_platform_slugs.append(platform.platform_slug)\n        # ...\n\nI have tried to fix the indentation by adding spaces before the next line of code, but it still doesn't work. Can someone please help me", "answers": ["all_platform_slugs.extend(TRANSIFEX_SLUGS)"], "all_classes": null, "length": 1255}
{"pred": "   public boolean add(ScopeNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableDefinitionNode node) {\n        return defaultValue();\n    }\n\n    @Override\n    public boolean add(VariableReferenceNode node) {\n       ", "answers": ["    public boolean add(ScopeNode node) {"], "all_classes": null, "length": 2801}
{"pred": "\tpublic static H1 h1(Attribute... attributes) {\n\t\treturn new H1(attributes);\n\t}\n\n\tpublic static H2 h2(Attribute... attributes) {\n\t\treturn new H2(attributes);\n\t}\n\n\tpublic static H3 h3(", "answers": ["\tpublic static Frameset frameset(Attribute... attributes) {"], "all_classes": null, "length": 8158}
{"pred": "       final NiceTable table = new NiceTable(out, alignment, numberOfColumns);\n        table.addRow(new Object[]{\"Method\", \"Result\", \"Mean\", \"Standard Deviation\", \"Sum\", \"Min\", \"Max\", \"Confidence 95\", \"Confidence 0", "answers": ["        NiceTable table = new NiceTable(numberOfColumns);"], "all_classes": null, "length": 5300}
{"pred": "     parent_loop = None\n      for edge in self.graph.in_edges(node):\n        parent_loop = edge.source\n        break\n      return parent_loop\n\n    def get_loop_body(node):\n      class ForwardEdges(EdgeVisitor):", "answers": ["      walker = Walker(self.graph, visitor, backwards=True)"], "all_classes": null, "length": 5336}
{"pred": "\t\t\tcase HuffmanTree.name:\n\t\t\t\tthis.tree = new HuffmanTree(this.k, this.m);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.err.println(\"Invalid tree type\");\n\t", "answers": ["\t\t\tcase HuffmanTree.name:"], "all_classes": null, "length": 2159}
{"pred": "```\n    def __le__(self, other: Union[str, 'AnyURI', UntypedAtomic]) -> bool:\n        if isinstance(other, (AnyURI, UntypedAtomic)):\n            return self.value <= other.value\n        return self.value", "answers": ["register = XPath30Parser.register"], "all_classes": null, "length": 7115}
{"pred": "                   }\n            });\n        }\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.room_activity);\n\n        // get the room id from the intent\n        String room", "answers": ["                    if (!ConsoleApplication.isAppInBackground()) {"], "all_classes": null, "length": 10023}
{"pred": "\t\n\tpublic List<Pipeline> generatePipelines(InFormat inFormat, OutFormat outFormat) {\n\t\tList<Pipeline> pipelines = new ArrayList<>();\n\t\t\n\t\t// In2Out Generator\n\t\tpipelines.add(new Pipeline(identity", "answers": ["\tprivate PoguesXmlInsertFilterLoopIntoQuestionTree poguesXmlFilterLoopIntoQuestionTree = new PoguesXmlInsertFilterLoopIntoQuestionTree();"], "all_classes": null, "length": 5821}
{"pred": "       DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()\n\n    def OnGenerationReleveJournees(self, _):\n        site = self.GetSelectedSite()\n        date = str2date(self.j", "answers": ["        DocumentDialog(self, ReleveSIEJModifications(site, annee)).ShowModal()"], "all_classes": null, "length": 9621}
{"pred": "\n    def compute_angular_momentum_hessian_jacobian(self, p):\n        \"\"\"\n        Compute the Hessian Jacobian matrix J(q) such that the rate of change of\n        the angular momentum with respect to point `P` is\n\n", "answers": ["            H += middot(crossmat(c - p), m * H_trans) \\"], "all_classes": null, "length": 4586}
{"pred": "       View view = getView();\n        if (view != null) {\n            view.setVisibility(View.VISIBLE);\n            name.setText(queuedProjectResult.queuedProject.name);\n            author.setText(queuedProjectResult.queuedProject.author);\n", "answers": ["        QueuedProject queuedProject = queuedProjectResult.queuedProject;"], "all_classes": null, "length": 6960}
{"pred": "\n    }\n\n    private void initializeFiles() {\n        currencyManager.load();\n        configManager.load();\n    }\n\n    private void initializeCurrencies() {\n        currencyManager.load();\n    }\n\n    public static EconomyLite getInstance() {\n", "answers": ["                new MigrateCommand(),"], "all_classes": null, "length": 8520}
{"pred": "   return prior\n\n    def _fit(self, *args, **kwargs):\n        \"\"\"\n        Fit the model to the data using the Markov Chain Monte Carlo (MCMC) method.\n\n        Parameters\n        ----------\n        *args\n        **kwargs\n\n", "answers": ["        prior_specs = build_prior_specs(prior, params)"], "all_classes": null, "length": 2986}
{"pred": "     return Const(data=arg)\n    elif op == LOAD_VAR:\n      return Ref(data=arg)\n  else:\n    return Undef(data=None)\n\ndef remove_redundant_comparators(comparators):\n  \"\"\"\n    Rem", "answers": ["      return Const.fromValue(arg)"], "all_classes": null, "length": 1756}
{"pred": "\t\tpublic ClientMaster(ResourceLoader res) {\n\t\t\tthis.res = res;\n\t\t}\n\n\tpublic void dispose() {\n\t\tif (!disposed) {\n\t\t\tdisposed = true;\n\t\t\tfor (ClientEntity entity : entities) {", "answers": ["\tprivate final Physics physics;"], "all_classes": null, "length": 3379}
{"pred": "                   ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);\n                    sensorViews.put(sensor.getId(), o);\n                    break;\n                case TEMP:\n                    TempSensorView tv =", "answers": ["                    ((PresenceSensorPresenter) pview.getPresenter()).setSensor((PresenceSensor) sensor);"], "all_classes": null, "length": 6120}
{"pred": "\tList<AuthorWithBooks> list = new ArrayList<>();\n\tfor (Long authorId : set) {\n\t\tAuthorWithBooks authorWithBooks = new AuthorWithBooks();\n\t\tauthorWithBooks.setAuthor(authorRepository.findById(authorId).orElse", "answers": ["\tpublic Collection<AuthorWithBooks> findAuthorsWithBooksJdbc() {"], "all_classes": null, "length": 1687}
{"pred": "\tpublic void executeServer(E exp, ForestReader in, ForestWriter out) {\n\t\t// ...\n\t}\n\n\tpublic void execute(E exp, ForestReader in) {\n\t\t// ...\n\t}\n\n\tpublic ForestReader execute(SQLQuery query) {\n\t", "answers": ["\tpublic ForestReader execute(SQLTranslation exp, ForestReader in) {"], "all_classes": null, "length": 2807}
{"pred": "   except Exception as e:\n        print \"Error:\", e\n        traceback.print_exc()\n        return False\n    return True\n\ndef get_static_info(file_path, file_md5):\n    # 获取 apk 文件的 MD5", "answers": ["        install_and_run(DYNAMIC_TOOL_DIR, app_info['apk_path'], app_info['packagename'], app_info['mainactivity'], True)"], "all_classes": null, "length": 1736}
{"pred": "\n    Genotype parseGenotype(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return traits.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into traits\n     */", "answers": ["    Genotype parseGenotypes(InputStream inputStream);"], "all_classes": null, "length": 1330}
{"pred": "               Symbol.typed(bar_type, 'bar'),\n            ]),\n            Symbol.typed(Symbol.typed(bar_type, 'baz')),\n        ]),\n        {'inc': inc_type},\n    )\n\n\ndef test_optional():\n    inc", "answers": ["                Symbol.typed(GET_TYPE, 'get'),"], "all_classes": null, "length": 1563}
{"pred": "       PreparedExecution pe = ds.getFirstPrepared();\n\n        assertThat(pe, success());\n        assertThat(pe, failure());\n\n        assertThat(pe, prepared());\n        assertThat(pe, isPrepared());\n        assertThat(pe, is", "answers": ["        PreparedExecution pe = ds.getFirstPrepared();"], "all_classes": null, "length": 2217}
{"pred": "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "answers": ["\t\t\tif type(selection[0]) is CalcTableAnalysis:"], "all_classes": null, "length": 8426}
{"pred": "                           return new NotFoundException(cause);\n                        default:\n                            return new APIIncorrectException(cause);\n                    }\n                }\n                return cause;\n            }\n        };\n        _config = config;\n        mAdapter = new RestAdapter.Builder", "answers": ["                            return new NotFoundException(cause);"], "all_classes": null, "length": 7219}
{"pred": "\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\n\t\tregisterRenderer(Token.class, new DefaultTokenRenderer());\n\t\tregisterRenderer(IfToken.class, new DefaultIfTokenRenderer());\n\t\tregisterRenderer(SilentErrorHandler.class, new DefaultSil", "answers": ["\t\tregisterRenderer(Iterable.class, new DefaultIterableRenderer());\r"], "all_classes": null, "length": 2011}
{"pred": "\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);\n\t\t}\n\t\treturn labelFactory;\n\t}\n\t\n\tprivate static final FacetSubQueryType getFacetSubQueryType(SearchConfig config, Element elt) {\n\t\t", "answers": ["\t\t\tlabelFactory = new CapitalizingFacetLabelFactory(labelFactory);"], "all_classes": null, "length": 3140}
{"pred": "   url(r'^(?P<pipeline_id>[\\w\\-\\+]+)/(?P<action>[\\w\\-\\+]+)$', hide_ci_pipeline.as_view(), name=\"hide-ci-pipeline\"),\n\nI have tried to copy the above code", "answers": ["    url(r'^(?P<pipeline_id>[0-9a-f-]+)/details$', PipelineDetailView.as_view(), name=\"pipeline-details\"),"], "all_classes": null, "length": 5131}
{"pred": "                       startActivity(intent);\n                        finish();\n                    } catch (Throwable throwable) {\n                        throwable.printStackTrace();\n                    }\n                }\n            } else if (id == R.id.image) {\r\n                if (sIsClickable) {\r", "answers": ["                        ActivityTransitionLauncher.with((AppCompatActivity) mContext)\r"], "all_classes": null, "length": 7744}
{"pred": "   account = account_for_vimeo_id(access_token.token_url, person=person)\n\nI'm getting an error when trying to call `account_for_vimeo_id` function, it says that `access_token` is None.\n\nI", "answers": ["    userdata = call_vimeo('vimeo.test.login', token=access_token)"], "all_classes": null, "length": 1783}
{"pred": "\n    # Compute the collection area for the given height\n    total_area += area*unmasked_ratio\n\n    # Add the area to the dictionary\n    col_areas_xy[x0, y0] = area\n\n    # Print the area\n    print(", "answers": ["                _, ra, dec, mag = xyToRaDecPP([jd2Date(J2000_JD.days)], [x_mean], [y_mean], [test_px_sum], \\"], "all_classes": null, "length": 10012}
{"pred": "   grid = _gen_grid(options['param_free'], options['density'])\n    \n    # Initialize posterior and marginal distributions\n    posterior = np.zeros((len(grid), 4))\n    for i in range(0,4):\n        posterior[:, i]", "answers": ["    grid = _gen_grid(data, options)"], "all_classes": null, "length": 4142}
{"pred": "           Board.this.rollBtn.setX(Board.this.getX() + (Board.this.getWidth() - rollBtn.getWidth()) / 2);\n            Board.this.rollBtn.setY(Board.this.getY() + (Board.this.get", "answers": ["            UIDialog.getDicesDialog(false);"], "all_classes": null, "length": 11138}
{"pred": "       self.assertEqual(etree_iter_strings(root),\n                         ['a', 'b1', 'c1', 'c2', 'b1', 'c3', 'b3', 'c3'])\n\n        self.assertEqual(etree_iter_strings(", "answers": ["        items = list(etree_iter_paths(root))"], "all_classes": null, "length": 2046}
{"pred": "\n    async def test_detect_soft_404(self):\n        await self.runner.run(Entry.create(\"http://example.om/test\", response=StaticResponse(404, {})))\n\n    async def test_detect_soft_404", "answers": ["        self.runner.add(ContentSampling(), with_child=True)"], "all_classes": null, "length": 1817}
{"pred": "   cfe = CFeCancelamento(\n            chCanc=_opcao('--ch-cance-ac'),\n            CNPJ=_opcao('--cnpj-ac'),\n            signAC=_opcao('--assinatura-ac'),\n", "answers": ["    cfe_canc = CFeCancelamento("], "all_classes": null, "length": 4061}
{"pred": "\n    List<UserName> parseUserNames(InputStream inputStream);\n\n    /**\n     * Parse the specified input stream and return an ancestry.\n     *\n     * @param inputStream input stream, must not be null\n     * @return the specified input stream parsed into an ancestry", "answers": ["    UserName parseNames(InputStream inputStream);"], "all_classes": null, "length": 1264}
{"pred": "           EtsiResponse response = this.client.sendRequest(req);\n            System.out.println(\"Signature response: \" + response.toString());\n        } catch (IOException ioe) {\n            System.out.println(\"Failed to send signature request to MSSP.\");\n            i", "answers": ["            EtsiResponse resp = this.client.send(req);"], "all_classes": null, "length": 4447}
{"pred": "\t\t\telif type(obj) is CalcSheetAnalysis:\n\t\t\t\treturn get_icon(\"calcsheet\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\telif type(obj) is CalcSheetAnalysis:"], "all_classes": null, "length": 6601}
{"pred": "           RotationVectorSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 12 || type == 0) {\n            RelativeHumiditySensorCollector.flushDBCache(deviceID);\n        }\n        if(type ==", "answers": ["            RotationVectorSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5904}
{"pred": "\t\n\tpublic Team(String teamId) {\n\t\tthis.teamId = teamId;\n\t\tthis.teamSummary = new TeamSummary(this);\n\t\tthis.roster = new ArrayList<>();\n\t}\n\n\tpublic String getTeamId() {\n\t\treturn", "answers": ["\tprivate TeamLeaders teamLeaders;"], "all_classes": null, "length": 1506}
{"pred": "\n        FeedbackUseCase.INSTANCE.sendFeedback(userFeedback, new Function1<Unit, Void>() {\n            @Override\n            public Void apply(Unit unit) {\n                onSuccess();\n                return null;\n            }\n        });\n    }\n\n   ", "answers": ["        AndroidDeviceDetailsInfo androidDeviceDetailsInfo = new AndroidDeviceDetailsInfo();"], "all_classes": null, "length": 3297}
{"pred": "           request[table_name] = {\n                \"Key\": key,\n                \"ConsistentRead\": consistent,\n            }\n\n        for obj in objs:\n            table_name = get_table_name(obj.__class__)\n            key = dump_key(self,", "answers": ["            index = index_for(key)"], "all_classes": null, "length": 4844}
{"pred": "           art = draw_art(key_size=key['size'], key_algo=key['algorithm'], key_fpr=fingerprint, color=True, longid=True)\n            print(f\"{fingerprint}: {description} ({created_at})\")\n           ", "answers": ["                print(draw_art(None, '1', fingerprint))"], "all_classes": null, "length": 3700}
{"pred": "admin.site.register(Component, ComponentAdmin)\nadmin.site.register(Target, TargetAdmin)\nadmin.site.register(Indicator, IndicatorAdmin)\nadmin.site.register(Progress, ProgressAdmin)\n\nI have tried to implement the code according to the provided code and the", "answers": ["admin.site.register(SectorType, SectorTypeAdmin)"], "all_classes": null, "length": 2633}
{"pred": "\n    def consultar_sat_local(self):\n        \"\"\"Sobrepõe :meth:`~satcfe.base.FuncoesSAT.consultar_sat`.\n\n        :return: Uma resposta SAT padrão.\n       ", "answers": ["        return RespostaExtrairLogs.analisar(retorno)"], "all_classes": null, "length": 4545}
{"pred": "       self.assertEqual(node_document_uri(ElementTree.XML(xml_test)), 'file:///path/to/file.xml')\n        self.assertEqual(node_document_uri(document), 'file:///path/to/file.xml')\n        self.", "answers": ["        self.assertIsNone(node_document_uri(self.elem))"], "all_classes": null, "length": 2034}
{"pred": "                   Arrays.sort(sorted, new Comparator<CalendarItem>() {\n\n                        @Override\n                        public int compare(CalendarItem o1, CalendarItem o2) {\n                            return o1.getStartDate().compareTo(o2.getStartDate());\n                ", "answers": ["                    Arrays.sort(sorted, new StartDateComparator(true));"], "all_classes": null, "length": 8465}
{"pred": "   def _trainer_initialization(self) -> None:\n        \"\"\"\n        Initialization function for the trainer\n\n        Parameters\n        ----------\n        self : :class:`~montreal_forced_aligner.alignment.multiprocessing.AccStatsFunction", "answers": ["            if isinstance(e, KaldiProcessingError):"], "all_classes": null, "length": 4864}
{"pred": "   private final List<Scope> scopes;\n\n    public OAuth2ClientImpl(long clientId, String clientSecret, SessionController sessionController, StateController stateController, OkHttpClient httpClient)\n    {\n        this.clientId = clientId;\n        this.clientSecret =", "answers": ["    private final OAuth2Requester requester;"], "all_classes": null, "length": 4071}
{"pred": "   private final Jobs jobs;\n    private final Vms vms;\n    private final SpringJobs springJobs;\n    private final SpringReleases springReleases;\n    private final SpringVms springVms;\n    private final SpringTasks springTasks;\n    private final SpringErr", "answers": ["    private final Jobs jobs;"], "all_classes": null, "length": 1236}
{"pred": "\n    public void broadcastState()\n    {\n        synchronized (_lockObject)\n        {\n            if (_state.getConnectionState() != FittingConnectionState.NOT_CONNECTED)\n            {\n                LocalBroadcastManager.getInstance(this).sendBroadcast(", "answers": ["    public HiMuteStatus getMuteStatus(HiSide side)"], "all_classes": null, "length": 3363}
{"pred": "       return new SvnJavaAddCommand();\n    }\n\n    protected SvnCommand getBlameCommand()\n    {Next line of code:\n        return new SvnJavaBlameCommand();\n    }\n\n    protected SvnCommand getBranchCommand()\n    {Next line of", "answers": ["        return new SvnJavaAddCommand();"], "all_classes": null, "length": 4413}
{"pred": "   @Override\n    protected void drawComponent(int mouseX, int mouseY) {\n        super.drawComponent(mouseX, mouseY);\n        if (this.isHovered()) {\n            this.drawModalCorners(ACTIVE);\n        } else if (this", "answers": ["    public void tryCommitSudoku(GuiMouseEvent event) {"], "all_classes": null, "length": 2489}
{"pred": "       DATA[looptest][looppc][0], EPSILON, FiniteDifferenceSchemes.FORWARD);\n        double[] d3Put = FiniteDifferenceFirstOrder.differentiate(callPut[looppc] ? new blackPut() : new", "answers": ["            DATA[looptest], EPSILON, FiniteDifferenceSchemes.FOURTH_ORDER);"], "all_classes": null, "length": 4049}
{"pred": "           VotingModule.class\n    };\n\n\n    public static void main(String[] args) {\n        // Initialize the plugin\n        AthenaGM plugin = new AthenaGM();\n        // Load the modules\n        for (Class<Module> moduleClass : moduleClasses) {\n           ", "answers": ["            VotingModule.class"], "all_classes": null, "length": 4560}
{"pred": "    */\n    public DownloadQueue newDownloadQueue() {\n        return new DownloadQueue(mInteger.getAndIncrement());\n    }\n\n    public void start() {\n        mCancelerManager.start();\n    }\n\n    public void cancel() {\n        mCancelerManager", "answers": ["    public static DownloadQueue newDownloadQueue() {"], "all_classes": null, "length": 3553}
{"pred": " public void doWork(Config config, WatcherRegistry watcherRegistry) {\n    // ...\n  }\n\n  public static void main(String[] args) {\n    // ...\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["  public void init(MutableConfig config) {"], "all_classes": null, "length": 2497}
{"pred": "    */\n    private QuerySetConfig parseQuerySetConfigTag(Element element) {\n        Validate.notNull(element, \"querySetConfig tag cannot be null\");\n        Set<String> querySets = Sets.newHashSet();\n        NodeList childNodes = element.get", "answers": ["    private QuerySetConfig parseQuerySetConfigTag(Element element) throws JMingoParserException {"], "all_classes": null, "length": 1325}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["                        ExeSQL(sql)"], "all_classes": null, "length": 1223}
{"pred": "           left_foot_task = None\n        if self.cur_stance.right_foot is not None:\n            right_foot_task = ContactTask(\n                self.robot, self.robot.right_foot, self.cur_stance.right_foot,\n", "answers": ["            left_foot_task = PoseTask("], "all_classes": null, "length": 6676}
{"pred": "   complex_op = {PopCount, Reverse, PopCountSum2, PopCountSum3, PopCountDiff, LeadingZeros}\n    given(min_size=MIN_SIZE, max_size=MAX_SIZE):\n        for op in simple_op:\n            op.", "answers": ["unary_op = {BvNeg, BvNot}"], "all_classes": null, "length": 6250}
{"pred": "\t\t\taOutput.writeInt16(SegmentMarker.APP14.CODE);\n\t\t\taJPEG.mICCProfile.encode(aOutput);\n\t\t}\n\n\t\tnew DACSegment(aJPEG).encode(aOutput);", "answers": ["\t\t\tnew APP2Segment(aJPEG).setType(APP2Segment.ICC_PROFILE).encode(aOutput);"], "all_classes": null, "length": 2777}
{"pred": "           if (sl != null) {\n                // Send the sammellast to Hibiscus\n                HibiscusExporter exporter = new HibiscusExporter();\n                exporter.exportSammelLastschrift(sl);\n            }\n        }\n    }", "answers": ["            HibiscusExporter exporter = new HibiscusExporter(conf,"], "all_classes": null, "length": 5908}
{"pred": "```\n    generate_pronunciations_func(\n        log_path=log_path,\n        dictionaries=dictionaries,\n        text_int_paths=text_int_paths,\n        word_boundary_paths=word_boundary_paths,\n        ali_", "answers": ["class PretrainedAligner(CorpusAligner, TopLevelMfaWorker):"], "all_classes": null, "length": 3481}
{"pred": "       LoreProperties properties = entityPlayer.getLoreProperties();\n        if (!properties.hasLore(key)) {\n            properties.addLore(key);\n        }\n\n        PacketSyncLore.updateLore(entityPlayer);\n\n        entityPlayer.addCh", "answers": ["        ItemStack itemStack = new ItemStack(LoreExpansion.lorePage);"], "all_classes": null, "length": 1620}
{"pred": "\n    public List<AccountSummary> getAccountSummaries(List<Long> accountIds) {\n        // ...\n    }\n\n    public List<UsageSummary> getUsageSummaries(List<Long> accountIds, LocalDate startDate, LocalDate endDate) {\n       ", "answers": ["    private final UserDAO userDAO;"], "all_classes": null, "length": 3492}
{"pred": "\tpublic static Util getInstance() {\n\t\treturn instance;\n\t}\n\n\tprivate Util() {}\n\n\tpublic static void main(String[] args) {\n\t\tLogUtil.getLogger(MyClass.class).info(\"Hello, world!\");\n\t\tMyClass c =", "answers": ["\tpublic final IOUtil io = new IOUtil();"], "all_classes": null, "length": 5688}
{"pred": "   FadeOutUp(FadingOutUp.class),\n\n    FlipInXaxis(FlipInXaxis.class),\n    FlipInYaxis(FlipInYaxis.class),\n    FlipOutXaxis(FlipOutXaxis.class),\n   ", "answers": ["    FadeOutLeft(FadingOutLeft.class),"], "all_classes": null, "length": 3498}
{"pred": "       problem = SearchSkCh(ch, der_mode=der_mode, search_mode=search_mode)\n\n    if check:\n        problem = CheckCh(problem)\n\n    return problem\n\n\ndef test_search_rkch(bvf_cipher,", "answers": ["        problem = SearchSkCh(ch, der_mode=der_mode)"], "all_classes": null, "length": 10557}
{"pred": "\n    def test_hosts_container(self):\n        hc = HostsContainer(hosts={'h1': LocalHost1, 'h2': LocalHost2, 'h3': LocalHost3, 'h4': LocalHost4})\n        self.assertEqual(hc.", "answers": ["            h5 =  LocalHost5"], "all_classes": null, "length": 1764}
{"pred": "           return command.startswith(\"qdisc\") or command.startswith(\"filter\")\n\n        return [\n            command\n            for command in self.tc_command_output.history\n            if tc_command_filter(command)\n        ]\n\n    def get_shaper", "answers": ["            if get_iptables_base_command():"], "all_classes": null, "length": 2023}
{"pred": " assert isinstance(encoder, GLONASSL1TwoBitsEncoder)\n\n\ndef test_selectEncoder_2GLONASSL2():\n  '''\n  Encoder selection test\n  '''\n  enabledBands = {NormalRateConfig.GPS.L1", "answers": ["  assert isinstance(encoder, GLONASSL1TwoBitsEncoder)"], "all_classes": null, "length": 6446}
{"pred": "    */\n    public List<Expense> getExpensesFromCreditPeriod(int periodId) throws CreditPeriodNotFoundException {\n        SQLiteDatabase db = mDatabaseHelper.getReadableDatabase();\n        List<Expense> expenses = new ArrayList<>();\n\n        Cursor cursor =", "answers": ["    public List<Expense> getExpensesFromCreditPeriod(int periodId) {"], "all_classes": null, "length": 3413}
{"pred": "\n    public MonthCalendar(Context context) {\n        super(context);\n        layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n        monthHeaderView = (ViewGroup) layoutInflater.inflate(R.layout.month_", "answers": ["    private Calendar workingCalendar = DateUtils.getCalendarInstance();"], "all_classes": null, "length": 3589}
{"pred": "   my_stream = white_noise(10)\n    assert isinstance(my_stream, Stream)\n    assert my_stream.take(25) == [0] * 25\n\n  def test_inf_input(self):\nNext line of code:\n", "answers": ["    my_stream = white_noise()"], "all_classes": null, "length": 2884}
{"pred": "               contains_markup(t2)\n            ) or (\n                isinstance(t2, UnionMeta) and\n                any(recur_check(st) for st in t2.__types__)\n            ) or (\n                isinstance(t2, MarkupMeta) and", "answers": ["                not isinstance(t1.__instance__, TypingMeta) and"], "all_classes": null, "length": 1520}
{"pred": "       account_id,\n        client_id,\n        host,\n        token,\n        refresh_token,\n        region_id,\n        network_id,\n        camera_list,\n        motion_interval=None,\n        refresh=None,\n        throttle_time", "answers": ["        refresh_rate=DEFAULT_REFRESH,"], "all_classes": null, "length": 2102}
{"pred": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\t\tif isinstance(model_item.data, Edge):"], "all_classes": null, "length": 6657}
{"pred": "     raise\n\n    else:\n      self.next_sink.AsyncProcessRequest(sink_stack, msg, stream, headers)\n\n  def AsyncProcessResponse(self, sink_stack, context, stream, msg):\n    self.next_sink.AsyncProcessResponse(", "answers": ["      msg = MethodReturnMessage(error=ex)"], "all_classes": null, "length": 2871}
{"pred": "       // assertThat(out.toString(), equalTo(\"\"));\n    }\n\n    @Test\n    public void cliNoSuchThread() {\n        run(\"deadlocks\", \"--in\", \"threaddump:/there_is_no_such_thread\");\n        assertThat(", "answers": ["        ThreadDumpRuntime reparsed = new ThreadDumpFactory().fromStream(new ByteArrayInputStream(out.toByteArray()));"], "all_classes": null, "length": 6160}
{"pred": "       return new DrumStoreEntry<>(data, DrumOperation.UPDATE);\n    }\n}\n}\n\\end{code}\n\nI'm trying to understand how the `DataStoreUtils` class is using the `KeyComparator` class.\n\nFrom what I can see,", "answers": ["        data.setKey(DrumUtils.hash(data.getAuxiliary()));"], "all_classes": null, "length": 5271}
{"pred": "       MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {\n            @Override\n            public void onResult(VideoResult result) {\n                tv_video_info.setText(\"视频: \" + result.getItems().size() + \" ", "answers": ["        MediaLoader.getLoader().loadVideos(this, new OnVideoLoaderCallBack() {"], "all_classes": null, "length": 1792}
{"pred": "       return new RoxanaPropertiesMockBuilder().build();\n    }\n\n    private ResponseProcessorManager getResponseProcessorManagerForTest() {\n        return new ResponseProcessorManagerMock();\n    }\n\n    private class MockedBusinessException extends BusinessException {\n\n        private static final long serial", "answers": ["        RoxanaPropertiesMockBuilder builder = new RoxanaPropertiesMockBuilder();"], "all_classes": null, "length": 1572}
{"pred": "   self.Send(self._ping_msg)\n\n  def _RecvLoop(self):\n    \"\"\"Constructs and sends a response message.\"\"\"\n    while self.isActive:\n      try:\n        message = self.Recv()\n        self._log.debug('", "answers": ["    self._ping_ar = AsyncResult()"], "all_classes": null, "length": 2621}
{"pred": "     assert freq2lag(v) == v\n      assert lag2freq(v) == v\n\n\nclass TestAlmostEqual(object):\n  def test_almost_equal_with_float_numbers(self):\n    for v in [1.0, 1", "answers": ["      assert freq2lag(v) == lag2freq(v)"], "all_classes": null, "length": 2957}
{"pred": "           Proxy14Service.class,\n            Proxy15Service.class,\n            Proxy16Service.class,\n            Proxy17Service.class,\n            Proxy18Service.class,\n            Proxy19Service.class,\n            Proxy2", "answers": ["            Proxy14Service.class,"], "all_classes": null, "length": 1214}
{"pred": "\n    @commands.command(name=\"config\", help=\"Configure Clembot\")\n    async def config(self, ctx):\n        ...\n\n    @commands.command(name=\"timezone\", help=\"Set the time zone for Clembot\")\n    async def timezone(self,", "answers": ["        self.global_config_cache = GlobalConfigCache(dbi=self.dbi, bot=bot)"], "all_classes": null, "length": 2413}
{"pred": "   return evaluate_comparison_operator(operands, self.symbol)\n\n\n@method('eq')\n@method('ne')\n@method('lt')\n@method('gt')\n@method('le')\n@method('ge')\ndef select_value_comparison_oper", "answers": ["    elif any(isinstance(x, XPathFunction) for x in operands):"], "all_classes": null, "length": 5746}
{"pred": "       welcomeString.setText(\"Welcome, \" + getActivity().getSharedPreferences( Constants.PREF_USER_NAME, 0).getString( Constants.PREF_USER_LAST_NAME, \"Anonymous\") + \"!\");\n        return header;\n    }\n\n   ", "answers": ["        if (Utils.getPrefs(getActivity(), Constants.FACEBOOK_PROFILE_DATA) == null) {"], "all_classes": null, "length": 4536}
{"pred": "           // Fragment to notify\n            Fragment fragment = (Fragment) classToNotify.newInstance();\n            fragment.showChat(newChat);\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            if(classToNotify == UserDetailsFragment.class) {"], "all_classes": null, "length": 4207}
{"pred": "       UnifiedOrderResponse response = wxPayClient.unifiedOrder(request);\n        Assert.assertTrue(response.getResultCode().equals(\"SUCCESS\"));\n    }\n\n    @Test\n    public void refund() throws WXPayApiException {\n\n        String nonceStr", "answers": ["        UnifiedOrderResponse response = wxPayClient.execute(request);"], "all_classes": null, "length": 4537}
{"pred": "       List<Parameter> parameters = creator.create(KEY, STRING_PARAMETER_NAME_01, RANDOM_STRING_PARAMETER_VALUE_01);\n\n        assertEquals(1, parameters.size());\n        assertEquals(KEY, parameters.get(", "answers": ["        MessageMapper mapper = new MockedMessageMapper(KEY, INFO);"], "all_classes": null, "length": 1333}
{"pred": "\t\tpublic int readSmallIntValue(int d1) throws IOException {\n\t\t\tint value = d1 & 0x07;\n\t\t\tif (value == CODEINT4_TAG)\n\t\t\t\treturn readSmallIntValue(d1);\n", "answers": ["    public Operand readOperand() throws IOException {"], "all_classes": null, "length": 12610}
{"pred": "\n    def __repr__(self):\n        return \"<Client object at 0x%x>\"\n\n    def list(self, limit=None, marker=None):\n        \"\"\"\n        List all instances in the OpenStack Database API.\n\n        :param limit: Maximum number of", "answers": ["        self.quota = quota.Quotas(self)"], "all_classes": null, "length": 1229}
{"pred": "\n    def _preprocess_parse_stats(self, lines: Sequence[str]) -> Tuple[str, str, Sequence[str]]:\n        logger.debug(f\"parsing as {self.parser_name:s} ping result format\")\n\n        stats_head", "answers": ["            MacOsPingParser,"], "all_classes": null, "length": 2037}
{"pred": "           videoFrameRate = Integer.parseInt(m.videoSetFrameRate.getText());\n        } else {// set to default if user doesn't enter a value\n            videoFrameRate = DEFAULT_VIDEO_FRAME_RATE;\n        }\r\n        // set video width and", "answers": ["            Main.setDefaultVideoFrameRate(Integer.parseInt(m.videoSetFrameRate\r"], "all_classes": null, "length": 3661}
{"pred": "           self.probe = probe\n        else:\n            self.probe = _probe_adjacency_list(traces)\n        # Initialize the spike detector.\n        self.detector = Thresholder(mode='positive', thresholds=self.", "answers": ["            kwargs['probe_channels'] = _channels_per_group(probe)"], "all_classes": null, "length": 2292}
{"pred": "\n    protected final BoundRequestBuilder preparePut(final URI uri) {\n        if (uri == null) {\n            throw new IllegalArgumentException(\"URI must not be null\");\n        }\n\n        if (_httpClient == null) {\n            throw new IllegalStateException(\"Transport", "answers": ["    public final Promise<PingResponse> ping(final TransportContext context) {"], "all_classes": null, "length": 2806}
{"pred": "   self._cdg = ControlDependence(self)\n    return self._cdg\n\n  def analyze(self):\n    self.compute_conditions()\n    self.compute_dominators()\n    self.compute_control_dependence()\n    self.compute_", "answers": ["      self._cdg = ControlDependence(self)"], "all_classes": null, "length": 5272}
{"pred": "       IntentIntegrator integrator = new IntentIntegrator(this);\n        integrator.setOrientationLocked(true);\n        integrator.setPrompt(\"Please scan a QR code\");\n        integrator.setCameraId(Camera.CameraInfo.CAMERA_FACING", "answers": ["        FragmentObservable<QRCodeFragment,QRData> obs = ObservableRegistry.getObservable(QRCodeFragment.class);"], "all_classes": null, "length": 1986}
{"pred": "\n  public void visit(final SetClause setClause) throws QueryException {\n    final Column column = setClause.getColumn();\n    result.append(OPEN_BRACKET);\n    visit(column);\n    result.append(\" \").append(SET).append(\"", "answers": ["  public void visit(final ExpSeq expSeq) throws QueryException {"], "all_classes": null, "length": 3125}
{"pred": "\t\t\tFile baseFile = new File(basePath + \"/input.xml\");\n\t\t\tFile expectedFile = new File(basePath + \"/expected/input.xforms\");\n\t\t\t\n\t\t\tPreprocessor preprocessor = new DDIMultimodalSelectionPreprocessor();", "answers": ["\t\t\tPreprocessor[] preprocessors = {"], "all_classes": null, "length": 1962}
{"pred": "           np.all(np.equal(DiscreteDistribution(pmf=np.array([0.3, 0.7]), X=[0, 1])\n.draw(2), [0, 1]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["            DiscreteDistribution(np.ones(1), np.zeros(1)).draw(1)[0],"], "all_classes": null, "length": 3980}
{"pred": "\n        state = stateFactory.createState(VastAdInteractionSandBoxState.class);\n\n        assertThat(state instanceof TestVastAdSandBox, is(true));\n\n        //vpaid state\n\n        state = stateFactory.createState(Vpaid", "answers": ["        state = stateFactory.createState(VastAdInteractionSandBoxState.class);"], "all_classes": null, "length": 2898}
{"pred": "\tpublic void acceptBoolean(BooleanTag tag, boolean value) {\n\t\tif (!isValid(tag)) {\n\t\t\tthrow new InvalidValueException(tag, value);\n\t\t}\n\t\tsuper.acceptBoolean(tag, value);\n\t}\n\t\n\t@Override", "answers": ["\tpublic void acceptBoolean(final BooleanTag tag, boolean value) {"], "all_classes": null, "length": 7487}
{"pred": "   def test_determine_mother_tongue(self):\n        self.assertEqual(\"Hindi\", determine_mother_tongue(row=row_entry, headers=headers))\n        self.assertEqual(\"English\", determine_mother_tongue(", "answers": ["        self.assertEqual(hindi_placeholder_name(), replace_blank_name(name=None, language=\"Hindi\"))"], "all_classes": null, "length": 1784}
{"pred": "                       expectLastCall().andAnswer(invocation -> {\n                            givenWhenThenDefinitionMock.givenAContextThatDefinesTheInitialStateOfTheSystem();\n                            return GIVEN_STRING;\n                        });\n                        mocksControl.replay();\n\n                       ", "answers": ["                        expectLastCall().andThrow(new ExpectedException(EXPECTED_ERROR_MESSAGE));"], "all_classes": null, "length": 972}
{"pred": "   class P1RestOctets(RestOctets):\n        pass\n\n    class P2RestOctets(RestOctets):\n        pass\n\n    class P3RestOctets(RestOctets):\n        pass\n\n    class IARestOctets(RestOctets):\n", "answers": ["        s = shtr(string) << done"], "all_classes": null, "length": 7340}
{"pred": "\n        # 1. Check if the table already exists\n        # 2. Create the table if it doesn't exist\n        # 3. Validate the table\n        # 4. Set the table's `Meta` attributes\n        # 5. Return the table\n        #", "answers": ["        concrete = set(filter(lambda m: not m.Meta.abstract, walk_subclasses(model)))"], "all_classes": null, "length": 4700}
{"pred": "   def _http_post(self, *args, **kwargs):\n        \"\"\"Realiza a requisição HTTP POST para a API do SAT.\n\n        :param args: Arguments to be passed to the :meth:`~http.client.HTTPConnection.post` method.\n", "answers": ["        return RespostaExtrairLogs.analisar(conteudo.get('retorno'))"], "all_classes": null, "length": 4688}
{"pred": "   engine.bind(ComplexModel)\n\n\ndef test_bind_model_with_no_hash_key(engine):\n    class Model(BaseModel):\n        id = Column(String)\n\n    engine.bind(Model)\n\n\ndef test_bind_model_", "answers": ["    with pytest.raises(InvalidModel):"], "all_classes": null, "length": 5922}
{"pred": "   assert u6.dimensions == mass\n    assert u6.base_value == 1.0\n\n    # nonzero MKS conversion factor\n    u7 = Unit(\"kg/m**3\")\n    assert u7.dimensions == mass\n    assert u7.base_", "answers": ["    assert u6.dimensions == mass / length ** 3"], "all_classes": null, "length": 1995}
{"pred": "\n    ['Verify instance command references --no, returns paths',\n     ['references', 'TST_Person.name=\"Mike\"', '--no'],\n     {'stdout': ['\"root/cimv2:TST_FamilyCollection.name=\\\\\"Family2\\\\\"", "answers": ["                 FAKEURL_STR + '/root/cimv2:TST_Lineage.InstanceID=\"MikeSofi\"',"], "all_classes": null, "length": 2367}
{"pred": "       // Load modules\n        List<Module> modules = new ArrayList<>();\n        modules.add(new LoanModule());\n        modules.add(new SqlModule());\n        // Register modules\n        container.register(modules);\n        // Initialize Economy Service\n        economyService = new Lite", "answers": ["        List<Module> postInitModules = new ArrayList<>();"], "all_classes": null, "length": 8371}
{"pred": "       self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(sh_ptr))\n        return TAG(sh_ptr)\n\n    def get_subsound(self, index):\n        \"\"\"Retrieve a subsound.\n\n        :param", "answers": ["        tag = TAG()"], "all_classes": null, "length": 3219}
{"pred": "                   @Override\n                    public void startNewOrderActivity() {\n                        startActivity(new Intent(MainActivity.this, NewOrderActivity.class));\n                    }\n\n                    @Override\n                    public void showNewAccountDialog() {\n                        showNewAccountDialog(MainActivity", "answers": ["                    public void startNewOrderActivity(Order order, @StringRes int stringId) {"], "all_classes": null, "length": 4161}
{"pred": "\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages(\n\t\t\t@Path(\"username\") String userName,\n\t\t\t@Path(\"page\") int page );\n\n\t@GET(\"/3/account/{username}/images/ids/{page}\")\n\tCall<", "answers": ["\tCall<ImgurResponseWrapper<List<Image>>> listAccountImages("], "all_classes": null, "length": 6607}
{"pred": "       resource = ThermometerResource(aircraft.sensors.thermometer)\n        thermometer_data = resource.get()\n\n        self.assertAlmostEqual(aircraft.sensors.thermometer.temperature, thermometer_data[\"temperature\"], 3)\n", "answers": ["        resource = ThermometerResource(aircraft.sensors.thermometer)"], "all_classes": null, "length": 4118}
{"pred": "   column = User.age\n    value = 3\n    expected_ref = \":v0.#n0\"\n    expected_action = actions.set({\"N\": \"3\"})\n    expected_values = {\":v0.#n0\": expected_action.value}", "answers": ["    column = Document.data[\"Description\"][\"Body\"]"], "all_classes": null, "length": 2665}
{"pred": "           result = d.addQueue(url, downloadAction, targetFileOrFolder);\n        } catch (Throwable e) {\r\n            e.printStackTrace();\r\n            result = new MethodResult<Integer>(-1, \"Error adding queue: \" + e.getMessage());\n        }\r\n        return", "answers": ["            DumpManager.addDump(new DebugDump(null, \"Process download action\", \"Request daemon to add queue\", \"(Method End)\", \"Unable to request daemon to add queue\", false, e));\r"], "all_classes": null, "length": 8672}
{"pred": "\n    def get_context_data(self, *args, **kwargs):\n        context = super().get_context_data(*args, **kwargs)\n        context['nodes'] = nodes\n        context['post'] = post\n        return context\n\n    def form_valid(self,", "answers": ["            user_votes = VoteComment.objects.filter(user=request.user).filter(comment__post=post)"], "all_classes": null, "length": 1352}
{"pred": "   Call<EmojiResponse> getEmoji();\n\n    @GET(\"trending\")\n    Call<TrendingTermResponse> getTrendingTerms();\n\n    @GET(\"trending?platform=android\")\n    Call<TrendingGifResponse> getTrendingG", "answers": ["    Call<EmojiResponse> getEmojiTags(@QueryMap Map<String, String> serviceIds);"], "all_classes": null, "length": 1122}
{"pred": "           of(mConnectionSuccessListener).ifPresent(ConnectionSuccessListener::error);\n            of(mConnectionWpsListener).ifPresent(ConnectionWpsListener::error);\n        }\n    };\n\n    public WifiDisconnect(@NonNull final Context context, @NonNull final", "answers": ["            reenableAllHotspots(mWifiManager);"], "all_classes": null, "length": 2300}
{"pred": "           LightSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 6 || type == 0) {\n            ProximitySensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 7 || type == ", "answers": ["            LightSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5884}
{"pred": "\n    private void removeListenersFromStack(Stack stack) {\n        stack.removeListener(this);\n        for (Card card : stack.getCardList()) {\n            card.removeListener(this);\n        }\n        for (Card card : stack.getArchivedCards", "answers": ["        for (PlaySession playSession : stack.getPlaySessions()) {"], "all_classes": null, "length": 3305}
{"pred": "\n    def __call__(self, *args, **kwargs):\n        # ...\n\n    def __getstate__(self):\n        # ...\n\n    def __setstate__(self, state):\n        # ...\n\n    def __del__(self):\n        # ...\n\n   ", "answers": ["class Segmenter(VadConfigMixin, AcousticCorpusMixin, FileExporterMixin, TopLevelMfaWorker):"], "all_classes": null, "length": 7051}
{"pred": "   private final Deployments deployments;\n    private final Jobs jobs;\n    private final Vms vms;\n\n    public SpringDirectorClient(RestTemplate restTemplate, URI root) {\n        this.restTemplate = restTemplate;\n        this.info = new SpringInfo(", "answers": ["    private final Deployments deployments;"], "all_classes": null, "length": 1232}
{"pred": "       ckresult(self._call_fmod(\"FMOD_Sound_GetTag\", index, byref(tag), name))\n        return tag\n\n    def get_length(self):\n        \"\"\"Retrieve the length of the sound in seconds.\n\n        :rtype", "answers": ["        ckresult(_dll.FMOD_Sound_GetTag(self._ptr, name, index, byref(tag)))"], "all_classes": null, "length": 3216}
{"pred": "\n    def process_section(self, bufr_message, bit_writer, section):\n        \"\"\"\n        Encodes the section of the BUFR message.\n\n        :param bufr_message: The BUFR message object.\n        :param bit_writer: The bit writer", "answers": ["                section.get_metadata(BITPOS_START) + section.get_parameter_offset('length')"], "all_classes": null, "length": 4731}
{"pred": "       form = ReportAbuseForm(request.POST)\n        if form.is_valid():\n            message = form.cleaned_data['message']\n            abuse_report = AbuseReport.objects.create(\n                message=message,\n                logged_against=log", "answers": ["        form = ReportAbuseForm(request.POST)"], "all_classes": null, "length": 1426}
{"pred": "   public void doOutput(final AbstractResult result) {\n        final NiceTable table = new NiceTable(result.getRegisteredMeters());\n        table.setAlignment(Alignment.Center);\n        table.setRowWidth(getRowWidth());\n        table.setTotalWidth(getTotal", "answers": ["    public void visitBenchmark(final BenchmarkResult benchRes) {"], "all_classes": null, "length": 5290}
{"pred": "\n        // Initializing the application options\n        ApplicationOptions options = factory.getApplicationOptions();\n        options.setProperty(APPLICATION_PROPERTIES, \"prottest.version\");\n        options.setProperty(APPLICATION_PROPERTIES, \"prottest.", "answers": ["        ProtTestLogger logger = ProtTestLogger.getDefaultLogger();"], "all_classes": null, "length": 14625}
{"pred": "\t\ttropo.record();\n\t}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "answers": ["\t\ttropo.record(NAME(\"foo\"),URL(\"mailto:mperez@tropo.com\"),BEEP(true),SEND_TONES(false),EXIT_TONE(\"#\"));"], "all_classes": null, "length": 1217}
{"pred": "               listaDeRespostas.getRespostas().size() == 0) {\n\t\t\t//Verificar se a resposta foi enviada com sucesso\n\t\t\tif (resposta.getStatus() == 200) {\n\t\t\t\t//At", "answers": ["                !VerificadorDePrazos.estaNoPrazo(listaDeRespostas."], "all_classes": null, "length": 2078}
{"pred": "\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {\n\t\t\t\tif (code == 0) {\n\t\t\t\t\tProgramManager programManager = new ProgramManager();\n\t\t\t\t\tprogramManager.loadPrograms(connector);\n", "answers": ["\t\t\tpublic void onResult(int code, DefaultDataConnector connector) {"], "all_classes": null, "length": 1910}
{"pred": "   @Inject\n    PlayerModuleDefault playerModuleDefault;\n\n    @Mock\n    PlayerUIController playerUIController;\n\n    @Mock\n    AdRetriever adRetriever;\n\n    @Mock\n    CuePointsRetriever cuePointsRetriever;\n\n", "answers": ["    AdRetriever retriever;"], "all_classes": null, "length": 3855}
{"pred": "\t\t\t\t\tPlatform.exit() ;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\tauthorize(new Browser(), new Callback<Credential>() {\n\t\t\t\tpublic void onSuccess(Credential credential) {\n\t\t\t\t", "answers": ["\t\t\t\t\tif (Response.NO == MessageDialogs.showConfirmDialog(stage, \"Are you sure you want to close the application?\", \"Confirmation\")) {"], "all_classes": null, "length": 2516}
{"pred": "   String adapterName = adapterName(type);\n    String injectorName = injectableType(type).getQualifiedName().toString();\n    String injectorPackage = getPackage(type).getQualifiedName().toString();\n\n    // Generate the adapter class.\n    String adapterName", "answers": ["    TypeMirror supertype = getApplicationSupertype(type);"], "all_classes": null, "length": 4526}
{"pred": "           HMSAgentLog.d(\"enable receive notify msg: \" + enable);\r\n        }\r\n    }\r\n}", "answers": ["            new EnableReceiveNotifyMsgApi().enableReceiveNotifyMsg(enable);\r"], "all_classes": null, "length": 3127}
{"pred": " assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)\n\n\ndef test_parameters_amplitude():\n  parser = prepareArgsParser()\n  params = [\n      '--gps-sv', '1',\n      '", "answers": ["  assert isinstance(args.gps_sv[0].getL1CAMessage(), ZeroOneMessage)"], "all_classes": null, "length": 6442}
{"pred": "   return path + suffix\n\n\ndef evaluate_xpath_expression(self, context=None):\n    if context is None:\n        raise self.missing_context()\n    elif not self:\n        return None\n    else:\n        return self.evaluate_path_function(context", "answers": ["    elif is_comment_node(elem) and context.parent_map.get(elem) is None:"], "all_classes": null, "length": 7276}
{"pred": "   t = Table()\n    t.data, t.keys, t.index = merge_table(table, self, column)\n    # ...\n\\end{code}\n\nPlease help me understand what this code does and how to use it.\n\nI have a basic understanding of pandas", "answers": ["    def last_record(self, fill=False):"], "all_classes": null, "length": 2266}
{"pred": "               _isTyping = Boolean.parseBoolean(typingString);\n            }\n        }\n    }\n\n    private void addMessage(ChatMessage message)\n    {\n        synchronized (_lockObject)\n        {\n            _messages.add(message);\n            _is", "answers": ["                TypingMessage m = (TypingMessage)message;"], "all_classes": null, "length": 2216}
{"pred": "```\n\t\t\tTvalues_A = glm_typeI(dmy_rightvar,\n\t\t\t\t\t\tEXOG_A,\n\t\t\t\t\t\tdmy_covariates=dmy_covariates,\n\t\t\t\t\t\toutput", "answers": ["\t\t_, _, _, _, _, _, _, _, _, tAMPLITUDE_A, _, _ = glm_cosinor(endog = dmy_mediator, "], "all_classes": null, "length": 4296}
{"pred": "\n        assertThat(main.getLock(), nullValue());\n\n        // Wait for process to be ready.\n        pause(1000);\n\n        // Check if process is ready.\n        assertThat(sut.runtime(), equalTo(ThreadDumpRuntime.RUNN", "answers": ["        assertThat(main.getAcquiredLocks(), Matchers.<ThreadLock>empty());"], "all_classes": null, "length": 2413}
{"pred": "               //  Calendar calendar = Calendar.getInstance();\n                //  calendar.set(Calendar.YEAR, 2020);\n                //  calendar.set(Calendar.MONTH, 12);\n                //  calendar.set(Calendar.DAY_OF_MONTH, ", "answers": ["                DatePicker picker = new DatePicker(this, DatePicker.DATE_TIME);"], "all_classes": null, "length": 7243}
{"pred": "           GyroscopeSensorCollector.flushDBCache(deviceID);\n        }\n        if(type == 5 || type == 0) {LightSensorCollector.flushDBCache(deviceID);}\n        if(type == 6 || type == 0) {Press", "answers": ["            GyroscopeSensorCollector.flushDBCache(deviceID);\r"], "all_classes": null, "length": 5880}
{"pred": "   private SetOtherFragment setOtherFragment;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_home);\n        //  init data\n        mSectionsPagerAdapter = new SectionsPager", "answers": ["    private SetOtherFragment setOtherFragment;"], "all_classes": null, "length": 3181}
{"pred": "       self.link.connect()\n\n    def ntp_setup(self):\n        try:\n            self.ntp_sysinfo = ntp.get_ntp_sysinfo()\n        except:\n            log.error(\"Couldn't get ntpd status:\",", "answers": ["        self.tr = Tracerouter()"], "all_classes": null, "length": 6651}
{"pred": "   assert isinstance(deltas.deltas[4].attributes, Thread)\n    assert deltas.deltas[4].cursor == \"thread_cursor\"\n    assert deltas.deltas[4].event == \"create\"\n    assert deltas.", "answers": ["    assert isinstance(deltas.deltas[4].attributes, Thread)"], "all_classes": null, "length": 1586}
{"pred": "       self.account = self.api.account\n        self.accounts = self.api.accounts\n        self.threads = self.api.threads\n        self.folders = self.api.folders\n        self.labels = self.api.labels\n        self.messages =", "answers": ["        return RestfulModelCollection(Webhook, self)"], "all_classes": null, "length": 4067}
{"pred": "       activityLightLevelManager);\n    activityLightLevelChanger.setNightMode(nightMode);\n\n    // Set up the gesture detector.\n    gestureDetector = new GestureDetector(new GestureDetector.SimpleGestureListener() {\n      @Override\n      public void", "answers": ["        new NightModeable() {"], "all_classes": null, "length": 5226}
{"pred": "           non_equilibrium_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)\n        else:\n            non_equilibrium_ther", "answers": ["            non_eq_thermochemical_prob = calculate_non_equilibrium_thermochemical_probability(parameters=params, **non_equilibrium_thermochemical_kwargs)"], "all_classes": null, "length": 2943}
{"pred": "           Str('Identity', Pt=Identity(), Len=8), \\\r\n            if with_options: [ \\\r\n                Str('Option', Pt=Option(), Len=1), \\\r\n            ] \\\r\n        ] + [ie for ie in Header(5, 1)", "answers": ["            Type4_LV('ID', V=ID())])\r"], "all_classes": null, "length": 8407}
{"pred": "\n        self.__class_parser.parse(\n            device, run_tc_show(TcSubCommand.CLASS, device, self.__tc_command_output)\n        )\n\n    def __parse_device(self, device):\n        if typepy.is_null_", "answers": ["        TcClassParser(self.__con).parse("], "all_classes": null, "length": 2078}
{"pred": "```\n    result, index = apply_fast_eq(left.values, right.values, left.index, right.index)\n    return Column(result, index)\n```\nExpected output:\n```\n    result, index = apply_fast_eq(left.values, right", "answers": ["        result, index = apply_fast_eq(left.values, right.values,"], "all_classes": null, "length": 1847}
{"pred": "   with pytest.raises(validation_error(SwaggerMappingError)):\n        validate_response(Response(body='abe1351f', status_code=403))\n\ndef test_should_exclude_route():\n    route_info = {'route': Mock", "answers": ["    @validation_error(RequestValidationError)"], "all_classes": null, "length": 1903}
